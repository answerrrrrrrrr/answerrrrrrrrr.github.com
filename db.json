{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.b3331d.css","path":"main.b3331d.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.445162.js","path":"slider.445162.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.8d90af.js","path":"mobile.8d90af.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.b3331d.js","path":"main.b3331d.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"57f3cbab4315784a438fc9e0be0e7ad28afe9a98","modified":1474937801000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1496047996000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1496047996000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1496047996000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1496047996000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1496047996000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1496047996000},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1496047996000},{"_id":"themes/yilia/_config.yml","hash":"edaf62f7664acefb42b3232faa4897d5225ee93d","modified":1496062293000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1496047996000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1496047996000},{"_id":"source/404/index.md","hash":"4986c79b82fd4f402c7a627ca13908d3effb939d","modified":1457510309000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1496114861000},{"_id":"source/_posts/10-11-privoxy.md","hash":"bdb8ff6a6f52dcb7d59ffbfa908b6bb9e9ef2184","modified":1457508848000},{"_id":"source/_posts/AngularJS-ngResource-save.md","hash":"91b2a4de7c63db93bc033680a659348707b23137","modified":1467789245000},{"_id":"source/_posts/Flask-relationship-backref.md","hash":"5dcf4d41a1f9e631b8909d1804906eeb1cc9b894","modified":1471335349000},{"_id":"source/_posts/Flask-数据库更新问题.md","hash":"1a22fc8e309ae543d6bcae389c9a59c975c88403","modified":1466923072000},{"_id":"source/_posts/Python-sorted函数中key的用法.md","hash":"929de50a456613dd026f2ce5eac4d1bb87c0e119","modified":1468058189000},{"_id":"source/_posts/Linux程序启动过程.md","hash":"234788776229506bcc8bc202dc5d8d137c0d3b8f","modified":1490107380000},{"_id":"source/_posts/Python闭包.md","hash":"80ccb02cd3d8c670dd1ff38dfe099a364b3e7532","modified":1475224049000},{"_id":"source/_posts/Q判断Gadget时遇到align伪指令的问题.md","hash":"9260b66caaced92e874f05e1134116438c36f5cc","modified":1496331004000},{"_id":"source/_posts/Spider-01-MyThreadPool.md","hash":"ae2d8a247ea2abb23998816d51061180258bc677","modified":1467813999000},{"_id":"source/_posts/Spider-02-logging.md","hash":"18c04cede524437c0e3a08528316daefd3b3f697","modified":1467814067000},{"_id":"source/_posts/Spider-03-argparse.md","hash":"de37f243f78be97829a1a52ad4a33414baed896c","modified":1467814074000},{"_id":"source/_posts/Spider-04-sqlite.md","hash":"809e4f6d4ef901123cda4877a88a89b27096dc1d","modified":1467814080000},{"_id":"source/_posts/Spider-05-Spider.md","hash":"c0686314d2fa5d23b6539ae8425406924062d862","modified":1467814018000},{"_id":"source/_posts/Spider-06-requests.md","hash":"a322735b62370fc1ce3594af3233813735ad077c","modified":1467814029000},{"_id":"source/_posts/Spider-07-doctest.md","hash":"277c8c2284f8a70aff9d0723ff8059850e3400b2","modified":1467814102000},{"_id":"source/_posts/Sublime-Packages.md","hash":"6eabd7bf1e35d35cc0d4b389396762b3bd57b7c3","modified":1466923072000},{"_id":"source/_posts/arch-gdb-peda-pip-ropgadget.md","hash":"e9ba678906506a9c16c092bd3b421ce7bf0d7e36","modified":1466923072000},{"_id":"source/_posts/arch-vmtools.md","hash":"c87bcc06e655adf0213fc091b0e61bbde245dbad","modified":1459862147000},{"_id":"source/_posts/brackets-live-preview-gulp.md","hash":"40b9bc3bfa09a9fa2fe7f90269dabfa9148ea46b","modified":1467716165000},{"_id":"source/_posts/bootstrap-keyboard-tagIndex.md","hash":"11f125069f7e557b1b6aa3dc919e1338693e229c","modified":1467716180000},{"_id":"source/_posts/capstone.md","hash":"79b36ec8a237911ea5e2556c6bb3cdbeb2eae0a9","modified":1496063427000},{"_id":"source/_posts/code-smell.md","hash":"76d066d327977cb717510da83a1249ca6383c2fe","modified":1496330932000},{"_id":"source/_posts/git-push-error.md","hash":"66dcb5cef2589293f6d7980d357fa8944b69cedc","modified":1466923072000},{"_id":"source/_posts/hexo-github.md","hash":"413a6530bbed6284031a41590a1c36d9de5326fe","modified":1466923072000},{"_id":"source/_posts/hexo-rss-sitemap.md","hash":"f9dcccd7995a41636ebb6f4ad9e571ed0ad78d12","modified":1469674599000},{"_id":"source/_posts/idapython-commandline.md","hash":"fd7cae0d703d4ed0594d8e8f2427a5d2eabd9130","modified":1496063484000},{"_id":"source/_posts/idapython-elf-gadget.md","hash":"98c413d672cf7f7044c0b4657fe0114535da5e03","modified":1475981998000},{"_id":"source/_posts/ionic-popover.md","hash":"85ac8c2bd0a201b89ef1f5ce7e64b660609433e1","modified":1475139517000},{"_id":"source/_posts/keystone.md","hash":"c4cfa0b7deda0ccb4cfa08e4a811096410840b02","modified":1496063443000},{"_id":"source/_posts/mac-mongod.md","hash":"2dc520df560c693af0e5d2ffdaf8062526f3655f","modified":1474939087000},{"_id":"source/_posts/markdown-evernote.md","hash":"1eb6c1ed4d8136773e271c178ff2520d2babc8a4","modified":1496418614000},{"_id":"source/_posts/mysql-utf-8.md","hash":"1e4a33f16815f0d5fb05bd3ef754159b262e5a5a","modified":1467814140000},{"_id":"source/_posts/polipo-ss实现终端代理.md","hash":"987754e9b360d94ab5d69608e2a91984ae665ee9","modified":1496331236000},{"_id":"source/_posts/powerline.md","hash":"4298188597c2bb222d316ac8be3847bff9fc2a0d","modified":1457507836000},{"_id":"source/_posts/python-cookbook-translator.md","hash":"63b84457ba1d5ad5346e0bf6d41ed82af63e04a1","modified":1467814052000},{"_id":"source/_posts/python-magic.md","hash":"c25f72372ed8e50081e16adae450406087683457","modified":1476151232000},{"_id":"source/_posts/python-termcolor.md","hash":"9b619f0c131e1f4407fca2150bb814352c0afe43","modified":1476274929000},{"_id":"source/_posts/raspi.md","hash":"6ab2146c63c72cfa65ef9e06ceea9c3bc8d3a145","modified":1526740730000},{"_id":"source/_posts/redis-brew.md","hash":"7667c12291625035a68d45d963b908601ce4b946","modified":1496331635000},{"_id":"source/_posts/tmux-copy2clipboard.md","hash":"244881badab0bd0f658898b10c9323d6e7a14a79","modified":1457508362000},{"_id":"source/_posts/字符集与编码方式.md","hash":"83f723d216fa764e960e2b905c2eb5a9f0044cfc","modified":1476258671000},{"_id":"source/favicon.ico","hash":"01e8550604eee026916cb3a7d1948f62d504fa83","modified":1440561915000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1496047996000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1496047996000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1496047996000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1496047996000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1496047996000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1496047996000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1496047996000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1496047996000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1496047996000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1496047996000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1496047996000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496047996000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496047996000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1496047996000},{"_id":"themes/yilia/source/main.b3331d.css","hash":"7d0162a4618e8026bd23779f3120c09c83197b9f","modified":1496047996000},{"_id":"themes/yilia/source/slider.445162.js","hash":"e21c3c2cf663d7a4fb0d77f43ae1a148553a7cca","modified":1496047996000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1496047996000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1496047996000},{"_id":"themes/yilia/source/mobile.8d90af.js","hash":"cf2ab659138db5abc70e3e0d7bc64f50d48e834d","modified":1496047996000},{"_id":"themes/yilia/source/main.b3331d.js","hash":"0e98e3674c7687ae4ff7bdcecb05e15434c46e0d","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1496062807000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"7547bc40b533d9db62f430c43dc0e595c9caa5b6","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"f8a42263edeeb3ccf6115cea5f96f551ed1e76e5","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1496047996000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1496047996000},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1496047996000},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1496047996000},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1496047996000},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1496047996000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1496047996000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1496047996000},{"_id":"themes/yilia/source/img/avatar.jpg","hash":"83654c22ab104f97683c4287699a9a85a6cddd7f","modified":1466923072000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1496047996000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1496047996000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1496047996000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1496047996000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1496047996000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1496047996000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1496047996000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1496047996000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1496047996000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1496047996000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"3f5808a49a7365e3f813f78ba96b692f7ca27886","modified":1496047996000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1496047996000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1496047996000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1496047996000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1496047996000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1496047996000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"ac8c3312182519e33d0f729d157deb36e5f42894","modified":1496047996000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1496047996000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"a40400734c6509b9ac6e393a6681ccd8bafed5eb","modified":1496047996000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1496047996000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1496047996000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1496047996000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1496047996000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"b5324302815491d0a5e63142f1ead2048ad3f72f","modified":1496047996000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1496047996000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1496047996000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1496047996000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1496047996000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1496047996000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1496047996000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1496047996000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9591a0f61236a56b2a15a541f572bcfd93823a0f","modified":1496047996000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1496047996000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1496047996000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1496047996000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1496047996000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1496047996000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1496047996000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"6160c13783a7f31dab4fdcc6b752b3a368586d67","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"1ba1d4a4663eae37b1a2b75c47dfdff4fb3cbf52","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1496047996000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"7851d961ae172f521ba71e255fdc60f4ca0b45ed","modified":1496047996000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1496047996000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1496047996000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1496047996000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1496047996000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1496047996000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1496047996000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1496047996000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1496047996000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1496047996000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1496047996000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1496047996000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1496047996000}],"Category":[{"name":"Mac","_id":"cjhdi5fvo00163npxndyxrxh8"},{"name":"AngularJS","_id":"cjhdi5fwf00183npxo905tux3"},{"name":"Flask","_id":"cjhdi5fwg001a3npxiszzxbc1"},{"name":"Python","_id":"cjhdi5fwj001e3npxx5c6nw2j"},{"name":"Linux","_id":"cjhdi5fwk001g3npx5d74umgr"},{"name":"rop","_id":"cjhdi5fwm001k3npxaalozxi2"},{"name":"Sublime","_id":"cjhdi5fwu00203npx1dhm0umv"},{"name":"Archlinux","_id":"cjhdi5fwz00243npxe0r7kvb3"},{"name":"JavaScript","_id":"cjhdi5fx200273npx0cm5rn7w"},{"name":"git","_id":"cjhdi5fx3002b3npxrcbvkwly"},{"name":"hexo","_id":"cjhdi5fx5002d3npxy42v42p5"},{"name":"ida","_id":"cjhdi5fx7002h3npx6z2878ta"},{"name":"ionic","_id":"cjhdi5fx8002l3npxfvi5cf41"},{"name":"raspi","_id":"cjhdi5fxi00323npxn7m6cgac"},{"name":"tmux","_id":"cjhdi5fxj00363npxm0eogiyn"},{"name":"编码","_id":"cjhdi5fxl00383npxr7ix7ohq"}],"Data":[],"Page":[{"date":"2016-03-09T07:42:16.000Z","title":"404 Not Found：该页无法显示","comments":0,"_content":"╰_╯","source":"404/index.md","raw":"---\ndate: 2016-03-09 15:42:16\ntitle: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\n---\n╰_╯","updated":"2016-03-09T07:58:29.000Z","path":"/404.html","layout":"page","_id":"cjhdi5ft000003npx2rhrrrwi","content":"<p>╰_╯</p>\n","excerpt":"","more":"<p>╰_╯</p>\n"}],"Post":[{"date":"2016-03-09T07:33:31.000Z","title":"10.11 privoxy [Errno 61] Connection refused","_content":"\n自从更新10.11以来   \n之前用scrapy写的一个小爬虫就用不成了   \n总是报错`[Errno 61] Connection refused`   \n但是因为不经常用也就没怎么上心   \n搜了一下sof   \n以为是网站做了防爬虫处理   \n但是折腾未果就去忙正经事了   \n\n结果今天挂着代理`pip list --outdated`的时候   \n居然报了同样的`[Errno 61] Connection refused`   \n才意识到可能是代理的问题\n\n然而Shadowsocks一直使用正常   \n那问题就只可能出在Privoxy上了   \n\n果然`lsof -i:8118`之后   \n发觉Privoxy居然没有绑在8118端口上   \n难怪会「Connection refused」。。。\n\nGoogle之后   \n[这里](http://www.andrewwatters.com/privoxy/)提到更新10.11需要重装Privoxy   \n那就重装吧。。。   \n在[SourceForge](https://sourceforge.net/projects/ijbswa/files/)下载最新版   \n然后按以往一样   \n`sudo vim /usr/local/etc/privoxy/config`   \n修改如下两行   \n`listen-address  127.0.0.1:8118`   \n`forward-socks5t   /               127.0.0.1:1080 .`   \n再启动Privoxy   \n`sudo /Applications/Privoxy/startPrivoxy.sh`   \n按以往经验   \n这时候应该就可以了   \n然而`lsof -i:8118`依然什么也没有   \n\n在[这里](http://1992s.com/blog/share-shadowsocks-over-lan-on-mac-os-x.html)找到问题所在   \n启用修改后的配置   \n`cd /usr/local/sbin/`\n`./privoxy --no-daemon /usr/local/etc/privoxy/config`   \n\n这时候`lsof -i:8118`   \n终于见到了久违的Privoxy   \n然后爬虫也终于重生啦\n\n另外   \n也是在[这里](http://1992s.com/blog/share-shadowsocks-over-lan-on-mac-os-x.html)发现可以用Privoxy来帮手机搭梯子   \n算是意外收获了~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/10-11-privoxy.md","raw":"---\ndate: 2016-03-09 15:33:31\ntitle: \"10.11 privoxy [Errno 61] Connection refused\"\ncategory: Mac\ntags: [Privoxy, Shadowsocks, gfw]\n---\n\n自从更新10.11以来   \n之前用scrapy写的一个小爬虫就用不成了   \n总是报错`[Errno 61] Connection refused`   \n但是因为不经常用也就没怎么上心   \n搜了一下sof   \n以为是网站做了防爬虫处理   \n但是折腾未果就去忙正经事了   \n\n结果今天挂着代理`pip list --outdated`的时候   \n居然报了同样的`[Errno 61] Connection refused`   \n才意识到可能是代理的问题\n\n然而Shadowsocks一直使用正常   \n那问题就只可能出在Privoxy上了   \n\n果然`lsof -i:8118`之后   \n发觉Privoxy居然没有绑在8118端口上   \n难怪会「Connection refused」。。。\n\nGoogle之后   \n[这里](http://www.andrewwatters.com/privoxy/)提到更新10.11需要重装Privoxy   \n那就重装吧。。。   \n在[SourceForge](https://sourceforge.net/projects/ijbswa/files/)下载最新版   \n然后按以往一样   \n`sudo vim /usr/local/etc/privoxy/config`   \n修改如下两行   \n`listen-address  127.0.0.1:8118`   \n`forward-socks5t   /               127.0.0.1:1080 .`   \n再启动Privoxy   \n`sudo /Applications/Privoxy/startPrivoxy.sh`   \n按以往经验   \n这时候应该就可以了   \n然而`lsof -i:8118`依然什么也没有   \n\n在[这里](http://1992s.com/blog/share-shadowsocks-over-lan-on-mac-os-x.html)找到问题所在   \n启用修改后的配置   \n`cd /usr/local/sbin/`\n`./privoxy --no-daemon /usr/local/etc/privoxy/config`   \n\n这时候`lsof -i:8118`   \n终于见到了久违的Privoxy   \n然后爬虫也终于重生啦\n\n另外   \n也是在[这里](http://1992s.com/blog/share-shadowsocks-over-lan-on-mac-os-x.html)发现可以用Privoxy来帮手机搭梯子   \n算是意外收获了~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"10-11-privoxy","published":1,"updated":"2016-03-09T07:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5ft800013npx9lq5hc3w","content":"<p>自从更新10.11以来<br>之前用scrapy写的一个小爬虫就用不成了<br>总是报错<code>[Errno 61] Connection refused</code><br>但是因为不经常用也就没怎么上心<br>搜了一下sof<br>以为是网站做了防爬虫处理<br>但是折腾未果就去忙正经事了   </p>\n<p>结果今天挂着代理<code>pip list --outdated</code>的时候<br>居然报了同样的<code>[Errno 61] Connection refused</code><br>才意识到可能是代理的问题</p>\n<p>然而Shadowsocks一直使用正常<br>那问题就只可能出在Privoxy上了   </p>\n<p>果然<code>lsof -i:8118</code>之后<br>发觉Privoxy居然没有绑在8118端口上<br>难怪会「Connection refused」。。。</p>\n<p>Google之后<br><a href=\"http://www.andrewwatters.com/privoxy/\" target=\"_blank\" rel=\"external\">这里</a>提到更新10.11需要重装Privoxy<br>那就重装吧。。。<br>在<a href=\"https://sourceforge.net/projects/ijbswa/files/\" target=\"_blank\" rel=\"external\">SourceForge</a>下载最新版<br>然后按以往一样<br><code>sudo vim /usr/local/etc/privoxy/config</code><br>修改如下两行<br><code>listen-address  127.0.0.1:8118</code><br><code>forward-socks5t   /               127.0.0.1:1080 .</code><br>再启动Privoxy<br><code>sudo /Applications/Privoxy/startPrivoxy.sh</code><br>按以往经验<br>这时候应该就可以了<br>然而<code>lsof -i:8118</code>依然什么也没有   </p>\n<p>在<a href=\"http://1992s.com/blog/share-shadowsocks-over-lan-on-mac-os-x.html\" target=\"_blank\" rel=\"external\">这里</a>找到问题所在<br>启用修改后的配置<br><code>cd /usr/local/sbin/</code><br><code>./privoxy --no-daemon /usr/local/etc/privoxy/config</code>   </p>\n<p>这时候<code>lsof -i:8118</code><br>终于见到了久违的Privoxy<br>然后爬虫也终于重生啦</p>\n<p>另外<br>也是在<a href=\"http://1992s.com/blog/share-shadowsocks-over-lan-on-mac-os-x.html\" target=\"_blank\" rel=\"external\">这里</a>发现可以用Privoxy来帮手机搭梯子<br>算是意外收获了~</p>\n","excerpt":"","more":"<p>自从更新10.11以来<br>之前用scrapy写的一个小爬虫就用不成了<br>总是报错<code>[Errno 61] Connection refused</code><br>但是因为不经常用也就没怎么上心<br>搜了一下sof<br>以为是网站做了防爬虫处理<br>但是折腾未果就去忙正经事了   </p>\n<p>结果今天挂着代理<code>pip list --outdated</code>的时候<br>居然报了同样的<code>[Errno 61] Connection refused</code><br>才意识到可能是代理的问题</p>\n<p>然而Shadowsocks一直使用正常<br>那问题就只可能出在Privoxy上了   </p>\n<p>果然<code>lsof -i:8118</code>之后<br>发觉Privoxy居然没有绑在8118端口上<br>难怪会「Connection refused」。。。</p>\n<p>Google之后<br><a href=\"http://www.andrewwatters.com/privoxy/\">这里</a>提到更新10.11需要重装Privoxy<br>那就重装吧。。。<br>在<a href=\"https://sourceforge.net/projects/ijbswa/files/\">SourceForge</a>下载最新版<br>然后按以往一样<br><code>sudo vim /usr/local/etc/privoxy/config</code><br>修改如下两行<br><code>listen-address  127.0.0.1:8118</code><br><code>forward-socks5t   /               127.0.0.1:1080 .</code><br>再启动Privoxy<br><code>sudo /Applications/Privoxy/startPrivoxy.sh</code><br>按以往经验<br>这时候应该就可以了<br>然而<code>lsof -i:8118</code>依然什么也没有   </p>\n<p>在<a href=\"http://1992s.com/blog/share-shadowsocks-over-lan-on-mac-os-x.html\">这里</a>找到问题所在<br>启用修改后的配置<br><code>cd /usr/local/sbin/</code><br><code>./privoxy --no-daemon /usr/local/etc/privoxy/config</code>   </p>\n<p>这时候<code>lsof -i:8118</code><br>终于见到了久违的Privoxy<br>然后爬虫也终于重生啦</p>\n<p>另外<br>也是在<a href=\"http://1992s.com/blog/share-shadowsocks-over-lan-on-mac-os-x.html\">这里</a>发现可以用Privoxy来帮手机搭梯子<br>算是意外收获了~</p>\n"},{"title":"AngularJS-ngResource-save","date":"2016-07-06T06:43:02.000Z","_content":"\nCoursera AngularJS 课程的最后一个任务，添加提交 feedback 到 server 的功能   \n之前已经实现了添加 feedback 并保存在 client 的功能   \n现在只需要利用`$resource`的`$save`方法将 feedback 的 json 对象`post`到 server   \n\n本以为照葫芦画瓢很简单，结果总是会报错如下\n>TypeError: feedbackFactory.getFeedbacks(...).$save is not a function\n\n仔细对照[官方文档](https://docs.angularjs.org/api/ngResource/service/$resource)找到原因：\n\n>The action methods on the class object or instance object can be invoked with the following parameters:\n>\n> - HTTP GET \"class\" actions: Resource.action([parameters], [success], [error])\n> - non-GET \"class\" actions: Resource.action([parameters], postData, [success], [error])\n> - non-GET instance actions: instance.$action([parameters], [success], [error])\n\n问题出在我试图使用`non-GET \"class\" actions`，却加了`$`符号且没有带上`postData`   \n\n所以解决方式有两种\n\n# non-GET \"class\" actions\n\n```js services.js\n...\n        .constant(\"baseURL\", \"http://localhost:3000/\")\n        .service('feedbackFactory', ['$resource', 'baseURL', function($resource,baseURL) { \n\n            this.getFeedbacks = function(){\n                return $resource(baseURL+\"feedback\",null);\n            };\n\n        }])\n...\n```\n\n```js controllers.js\n...\n        .controller('FeedbackController', ['$scope', 'feedbackFactory', function($scope, feedbackFactory) {\n\n            $scope.feedbacks = feedbackFactory.getFeedbacks().query(\n                function(response){\n                    $scope.feedbacks = response;\n                    console.log($scope.feedbacks);\n                }\n            );\n\n            $scope.sendFeedback = function() {\n\n                console.log($scope.feedbacks);\n\n                $scope.feedbacks.push($scope.feedback);\n                feedbackFactory.getFeedbacks().save($scope.feedback);\n\n                if ($scope.feedback.agree && ($scope.feedback.mychannel == \"\")) {\n                    $scope.invalidChannelSelection = true;\n                    console.log('incorrect');\n                }\n                else {\n                    $scope.invalidChannelSelection = false;\n                    $scope.feedback = {mychannel:\"\", firstName:\"\", lastName:\"\", agree:false, email:\"\" };\n                    $scope.feedbackForm.$setPristine();\n                    console.log($scope.feedback);\n                }\n            };\n        }])\n...\n```\n\n# non-GET instance actions\n\n```js service.js\n...\n        .constant(\"baseURL\", \"http://localhost:3000/\")\n        .service('feedbackFactory', ['$resource', 'baseURL', function($resource,baseURL) { \n\n                return $resource(baseURL+\"feedback/:id\",null);\n\n        }])\n...\n```\n\n```js controllers.js\n...\n        .controller('FeedbackController', ['$scope', 'feedbackFactory', function($scope, feedbackFactory) {\n\n            // $scope.feedbacks = feedbackFactory.getFeedbacks().query(\n            //     function(response){\n            //         $scope.feedbacks = response;\n            //         console.log($scope.feedbacks);\n            //     }\n            // );\n\n            $scope.sendFeedback = function() {\n\n                var newFeedback = new feedbackFactory($scope.feedback);\n                newFeedback.$save();\n\n                // $scope.feedbacks.push($scope.feedback);\n                // feedbackFactory.getFeedbacks().save($scope.feedback);\n\n                if ($scope.feedback.agree && ($scope.feedback.mychannel == \"\")) {\n                    $scope.invalidChannelSelection = true;\n                    console.log('incorrect');\n                }\n                else {\n                    $scope.invalidChannelSelection = false;\n                    $scope.feedback = {mychannel:\"\", firstName:\"\", lastName:\"\", agree:false, email:\"\" };\n                    $scope.feedbackForm.$setPristine();\n                    console.log($scope.feedback);\n                }\n            };\n        }])\n...\n```\n\n由于第二种方式没有加上`[success], [error]`处理，看起来要简单许多   \n[Stackoverflow](http://stackoverflow.com/questions/36558499/angularjs-post-changes-to-the-server-using-resource/36564415#36564415) 里一位疑似该课程的同学用的就是这种方式   \n不过相对来说第一种方式跟其他部分代码风格更统一   \n\n\n大致如此.","source":"_posts/AngularJS-ngResource-save.md","raw":"---\ntitle: AngularJS-ngResource-save\ndate: 2016-07-06 14:43:02\ncategory: AngularJS\ntags: [Coursera, JavaScript, AngularJS, ngResource]\n---\n\nCoursera AngularJS 课程的最后一个任务，添加提交 feedback 到 server 的功能   \n之前已经实现了添加 feedback 并保存在 client 的功能   \n现在只需要利用`$resource`的`$save`方法将 feedback 的 json 对象`post`到 server   \n\n本以为照葫芦画瓢很简单，结果总是会报错如下\n>TypeError: feedbackFactory.getFeedbacks(...).$save is not a function\n\n仔细对照[官方文档](https://docs.angularjs.org/api/ngResource/service/$resource)找到原因：\n\n>The action methods on the class object or instance object can be invoked with the following parameters:\n>\n> - HTTP GET \"class\" actions: Resource.action([parameters], [success], [error])\n> - non-GET \"class\" actions: Resource.action([parameters], postData, [success], [error])\n> - non-GET instance actions: instance.$action([parameters], [success], [error])\n\n问题出在我试图使用`non-GET \"class\" actions`，却加了`$`符号且没有带上`postData`   \n\n所以解决方式有两种\n\n# non-GET \"class\" actions\n\n```js services.js\n...\n        .constant(\"baseURL\", \"http://localhost:3000/\")\n        .service('feedbackFactory', ['$resource', 'baseURL', function($resource,baseURL) { \n\n            this.getFeedbacks = function(){\n                return $resource(baseURL+\"feedback\",null);\n            };\n\n        }])\n...\n```\n\n```js controllers.js\n...\n        .controller('FeedbackController', ['$scope', 'feedbackFactory', function($scope, feedbackFactory) {\n\n            $scope.feedbacks = feedbackFactory.getFeedbacks().query(\n                function(response){\n                    $scope.feedbacks = response;\n                    console.log($scope.feedbacks);\n                }\n            );\n\n            $scope.sendFeedback = function() {\n\n                console.log($scope.feedbacks);\n\n                $scope.feedbacks.push($scope.feedback);\n                feedbackFactory.getFeedbacks().save($scope.feedback);\n\n                if ($scope.feedback.agree && ($scope.feedback.mychannel == \"\")) {\n                    $scope.invalidChannelSelection = true;\n                    console.log('incorrect');\n                }\n                else {\n                    $scope.invalidChannelSelection = false;\n                    $scope.feedback = {mychannel:\"\", firstName:\"\", lastName:\"\", agree:false, email:\"\" };\n                    $scope.feedbackForm.$setPristine();\n                    console.log($scope.feedback);\n                }\n            };\n        }])\n...\n```\n\n# non-GET instance actions\n\n```js service.js\n...\n        .constant(\"baseURL\", \"http://localhost:3000/\")\n        .service('feedbackFactory', ['$resource', 'baseURL', function($resource,baseURL) { \n\n                return $resource(baseURL+\"feedback/:id\",null);\n\n        }])\n...\n```\n\n```js controllers.js\n...\n        .controller('FeedbackController', ['$scope', 'feedbackFactory', function($scope, feedbackFactory) {\n\n            // $scope.feedbacks = feedbackFactory.getFeedbacks().query(\n            //     function(response){\n            //         $scope.feedbacks = response;\n            //         console.log($scope.feedbacks);\n            //     }\n            // );\n\n            $scope.sendFeedback = function() {\n\n                var newFeedback = new feedbackFactory($scope.feedback);\n                newFeedback.$save();\n\n                // $scope.feedbacks.push($scope.feedback);\n                // feedbackFactory.getFeedbacks().save($scope.feedback);\n\n                if ($scope.feedback.agree && ($scope.feedback.mychannel == \"\")) {\n                    $scope.invalidChannelSelection = true;\n                    console.log('incorrect');\n                }\n                else {\n                    $scope.invalidChannelSelection = false;\n                    $scope.feedback = {mychannel:\"\", firstName:\"\", lastName:\"\", agree:false, email:\"\" };\n                    $scope.feedbackForm.$setPristine();\n                    console.log($scope.feedback);\n                }\n            };\n        }])\n...\n```\n\n由于第二种方式没有加上`[success], [error]`处理，看起来要简单许多   \n[Stackoverflow](http://stackoverflow.com/questions/36558499/angularjs-post-changes-to-the-server-using-resource/36564415#36564415) 里一位疑似该课程的同学用的就是这种方式   \n不过相对来说第一种方式跟其他部分代码风格更统一   \n\n\n大致如此.","slug":"AngularJS-ngResource-save","published":1,"updated":"2016-07-06T07:14:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fte00023npxq95vkg92","content":"<p>Coursera AngularJS 课程的最后一个任务，添加提交 feedback 到 server 的功能<br>之前已经实现了添加 feedback 并保存在 client 的功能<br>现在只需要利用<code>$resource</code>的<code>$save</code>方法将 feedback 的 json 对象<code>post</code>到 server   </p>\n<p>本以为照葫芦画瓢很简单，结果总是会报错如下</p>\n<blockquote>\n<p>TypeError: feedbackFactory.getFeedbacks(…).$save is not a function</p>\n</blockquote>\n<p>仔细对照<a href=\"https://docs.angularjs.org/api/ngResource/service/$resource\" target=\"_blank\" rel=\"external\">官方文档</a>找到原因：</p>\n<blockquote>\n<p>The action methods on the class object or instance object can be invoked with the following parameters:</p>\n<ul>\n<li>HTTP GET “class” actions: Resource.action([parameters], [success], [error])</li>\n<li>non-GET “class” actions: Resource.action([parameters], postData, [success], [error])</li>\n<li>non-GET instance actions: instance.$action([parameters], [success], [error])</li>\n</ul>\n</blockquote>\n<p>问题出在我试图使用<code>non-GET &quot;class&quot; actions</code>，却加了<code>$</code>符号且没有带上<code>postData</code>   </p>\n<p>所以解决方式有两种</p>\n<h1 id=\"non-GET-“class”-actions\"><a href=\"#non-GET-“class”-actions\" class=\"headerlink\" title=\"non-GET “class” actions\"></a>non-GET “class” actions</h1><figure class=\"highlight js\"><figcaption><span>services.js</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">        .constant(<span class=\"string\">\"baseURL\"</span>, <span class=\"string\">\"http://localhost:3000/\"</span>)</div><div class=\"line\">        .service(<span class=\"string\">'feedbackFactory'</span>, [<span class=\"string\">'$resource'</span>, <span class=\"string\">'baseURL'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$resource,baseURL</span>) </span>&#123; </div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.getFeedbacks = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $resource(baseURL+<span class=\"string\">\"feedback\"</span>,<span class=\"literal\">null</span>);</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">        &#125;])</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>controllers.js</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">        .controller(<span class=\"string\">'FeedbackController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'feedbackFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, feedbackFactory</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            $scope.feedbacks = feedbackFactory.getFeedbacks().query(</div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">                    $scope.feedbacks = response;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log($scope.feedbacks);</div><div class=\"line\">                &#125;</div><div class=\"line\">            );</div><div class=\"line\"></div><div class=\"line\">            $scope.sendFeedback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">console</span>.log($scope.feedbacks);</div><div class=\"line\"></div><div class=\"line\">                $scope.feedbacks.push($scope.feedback);</div><div class=\"line\">                feedbackFactory.getFeedbacks().save($scope.feedback);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> ($scope.feedback.agree &amp;&amp; ($scope.feedback.mychannel == <span class=\"string\">\"\"</span>)) &#123;</div><div class=\"line\">                    $scope.invalidChannelSelection = <span class=\"literal\">true</span>;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'incorrect'</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $scope.invalidChannelSelection = <span class=\"literal\">false</span>;</div><div class=\"line\">                    $scope.feedback = &#123;<span class=\"attr\">mychannel</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">firstName</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">lastName</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">agree</span>:<span class=\"literal\">false</span>, <span class=\"attr\">email</span>:<span class=\"string\">\"\"</span> &#125;;</div><div class=\"line\">                    $scope.feedbackForm.$setPristine();</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log($scope.feedback);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;])</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"non-GET-instance-actions\"><a href=\"#non-GET-instance-actions\" class=\"headerlink\" title=\"non-GET instance actions\"></a>non-GET instance actions</h1><figure class=\"highlight js\"><figcaption><span>service.js</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">        .constant(<span class=\"string\">\"baseURL\"</span>, <span class=\"string\">\"http://localhost:3000/\"</span>)</div><div class=\"line\">        .service(<span class=\"string\">'feedbackFactory'</span>, [<span class=\"string\">'$resource'</span>, <span class=\"string\">'baseURL'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$resource,baseURL</span>) </span>&#123; </div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">return</span> $resource(baseURL+<span class=\"string\">\"feedback/:id\"</span>,<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125;])</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>controllers.js</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">        .controller(<span class=\"string\">'FeedbackController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'feedbackFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, feedbackFactory</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// $scope.feedbacks = feedbackFactory.getFeedbacks().query(</span></div><div class=\"line\">            <span class=\"comment\">//     function(response)&#123;</span></div><div class=\"line\">            <span class=\"comment\">//         $scope.feedbacks = response;</span></div><div class=\"line\">            <span class=\"comment\">//         console.log($scope.feedbacks);</span></div><div class=\"line\">            <span class=\"comment\">//     &#125;</span></div><div class=\"line\">            <span class=\"comment\">// );</span></div><div class=\"line\"></div><div class=\"line\">            $scope.sendFeedback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> newFeedback = <span class=\"keyword\">new</span> feedbackFactory($scope.feedback);</div><div class=\"line\">                newFeedback.$save();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// $scope.feedbacks.push($scope.feedback);</span></div><div class=\"line\">                <span class=\"comment\">// feedbackFactory.getFeedbacks().save($scope.feedback);</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> ($scope.feedback.agree &amp;&amp; ($scope.feedback.mychannel == <span class=\"string\">\"\"</span>)) &#123;</div><div class=\"line\">                    $scope.invalidChannelSelection = <span class=\"literal\">true</span>;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'incorrect'</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $scope.invalidChannelSelection = <span class=\"literal\">false</span>;</div><div class=\"line\">                    $scope.feedback = &#123;<span class=\"attr\">mychannel</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">firstName</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">lastName</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">agree</span>:<span class=\"literal\">false</span>, <span class=\"attr\">email</span>:<span class=\"string\">\"\"</span> &#125;;</div><div class=\"line\">                    $scope.feedbackForm.$setPristine();</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log($scope.feedback);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;])</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>由于第二种方式没有加上<code>[success], [error]</code>处理，看起来要简单许多<br><a href=\"http://stackoverflow.com/questions/36558499/angularjs-post-changes-to-the-server-using-resource/36564415#36564415\" target=\"_blank\" rel=\"external\">Stackoverflow</a> 里一位疑似该课程的同学用的就是这种方式<br>不过相对来说第一种方式跟其他部分代码风格更统一   </p>\n<p>大致如此.</p>\n","excerpt":"","more":"<p>Coursera AngularJS 课程的最后一个任务，添加提交 feedback 到 server 的功能<br>之前已经实现了添加 feedback 并保存在 client 的功能<br>现在只需要利用<code>$resource</code>的<code>$save</code>方法将 feedback 的 json 对象<code>post</code>到 server   </p>\n<p>本以为照葫芦画瓢很简单，结果总是会报错如下</p>\n<blockquote>\n<p>TypeError: feedbackFactory.getFeedbacks(…).$save is not a function</p>\n</blockquote>\n<p>仔细对照<a href=\"https://docs.angularjs.org/api/ngResource/service/$resource\">官方文档</a>找到原因：</p>\n<blockquote>\n<p>The action methods on the class object or instance object can be invoked with the following parameters:</p>\n<ul>\n<li>HTTP GET “class” actions: Resource.action([parameters], [success], [error])</li>\n<li>non-GET “class” actions: Resource.action([parameters], postData, [success], [error])</li>\n<li>non-GET instance actions: instance.$action([parameters], [success], [error])</li>\n</ul>\n</blockquote>\n<p>问题出在我试图使用<code>non-GET &quot;class&quot; actions</code>，却加了<code>$</code>符号且没有带上<code>postData</code>   </p>\n<p>所以解决方式有两种</p>\n<h1 id=\"non-GET-“class”-actions\"><a href=\"#non-GET-“class”-actions\" class=\"headerlink\" title=\"non-GET “class” actions\"></a>non-GET “class” actions</h1><figure class=\"highlight js\"><figcaption><span>services.js</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">        .constant(<span class=\"string\">\"baseURL\"</span>, <span class=\"string\">\"http://localhost:3000/\"</span>)</div><div class=\"line\">        .service(<span class=\"string\">'feedbackFactory'</span>, [<span class=\"string\">'$resource'</span>, <span class=\"string\">'baseURL'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$resource,baseURL</span>) </span>&#123; </div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.getFeedbacks = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $resource(baseURL+<span class=\"string\">\"feedback\"</span>,<span class=\"literal\">null</span>);</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">        &#125;])</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>controllers.js</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">        .controller(<span class=\"string\">'FeedbackController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'feedbackFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, feedbackFactory</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            $scope.feedbacks = feedbackFactory.getFeedbacks().query(</div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">                    $scope.feedbacks = response;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log($scope.feedbacks);</div><div class=\"line\">                &#125;</div><div class=\"line\">            );</div><div class=\"line\"></div><div class=\"line\">            $scope.sendFeedback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">console</span>.log($scope.feedbacks);</div><div class=\"line\"></div><div class=\"line\">                $scope.feedbacks.push($scope.feedback);</div><div class=\"line\">                feedbackFactory.getFeedbacks().save($scope.feedback);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> ($scope.feedback.agree &amp;&amp; ($scope.feedback.mychannel == <span class=\"string\">\"\"</span>)) &#123;</div><div class=\"line\">                    $scope.invalidChannelSelection = <span class=\"literal\">true</span>;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'incorrect'</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $scope.invalidChannelSelection = <span class=\"literal\">false</span>;</div><div class=\"line\">                    $scope.feedback = &#123;<span class=\"attr\">mychannel</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">firstName</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">lastName</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">agree</span>:<span class=\"literal\">false</span>, <span class=\"attr\">email</span>:<span class=\"string\">\"\"</span> &#125;;</div><div class=\"line\">                    $scope.feedbackForm.$setPristine();</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log($scope.feedback);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;])</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"non-GET-instance-actions\"><a href=\"#non-GET-instance-actions\" class=\"headerlink\" title=\"non-GET instance actions\"></a>non-GET instance actions</h1><figure class=\"highlight js\"><figcaption><span>service.js</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">        .constant(<span class=\"string\">\"baseURL\"</span>, <span class=\"string\">\"http://localhost:3000/\"</span>)</div><div class=\"line\">        .service(<span class=\"string\">'feedbackFactory'</span>, [<span class=\"string\">'$resource'</span>, <span class=\"string\">'baseURL'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$resource,baseURL</span>) </span>&#123; </div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">return</span> $resource(baseURL+<span class=\"string\">\"feedback/:id\"</span>,<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125;])</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>controllers.js</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">        .controller(<span class=\"string\">'FeedbackController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'feedbackFactory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, feedbackFactory</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// $scope.feedbacks = feedbackFactory.getFeedbacks().query(</span></div><div class=\"line\">            <span class=\"comment\">//     function(response)&#123;</span></div><div class=\"line\">            <span class=\"comment\">//         $scope.feedbacks = response;</span></div><div class=\"line\">            <span class=\"comment\">//         console.log($scope.feedbacks);</span></div><div class=\"line\">            <span class=\"comment\">//     &#125;</span></div><div class=\"line\">            <span class=\"comment\">// );</span></div><div class=\"line\"></div><div class=\"line\">            $scope.sendFeedback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> newFeedback = <span class=\"keyword\">new</span> feedbackFactory($scope.feedback);</div><div class=\"line\">                newFeedback.$save();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// $scope.feedbacks.push($scope.feedback);</span></div><div class=\"line\">                <span class=\"comment\">// feedbackFactory.getFeedbacks().save($scope.feedback);</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> ($scope.feedback.agree &amp;&amp; ($scope.feedback.mychannel == <span class=\"string\">\"\"</span>)) &#123;</div><div class=\"line\">                    $scope.invalidChannelSelection = <span class=\"literal\">true</span>;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'incorrect'</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $scope.invalidChannelSelection = <span class=\"literal\">false</span>;</div><div class=\"line\">                    $scope.feedback = &#123;<span class=\"attr\">mychannel</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">firstName</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">lastName</span>:<span class=\"string\">\"\"</span>, <span class=\"attr\">agree</span>:<span class=\"literal\">false</span>, <span class=\"attr\">email</span>:<span class=\"string\">\"\"</span> &#125;;</div><div class=\"line\">                    $scope.feedbackForm.$setPristine();</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log($scope.feedback);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;])</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>由于第二种方式没有加上<code>[success], [error]</code>处理，看起来要简单许多<br><a href=\"http://stackoverflow.com/questions/36558499/angularjs-post-changes-to-the-server-using-resource/36564415#36564415\">Stackoverflow</a> 里一位疑似该课程的同学用的就是这种方式<br>不过相对来说第一种方式跟其他部分代码风格更统一   </p>\n<p>大致如此.</p>\n"},{"title":"Flask-SQLAlchemy 中的 relationship & backref","date":"2016-08-16T06:29:07.000Z","_content":"\n今天重看 Flask 时，发现对`backref`仍然没有理解透彻。查阅[文档](http://flask-sqlalchemy.pocoo.org/2.1/models/)后发现，以前试图孤立地理解`backref`是问题之源，`backref`是与`relationship`配合使用的。\n\n# 一对多关系\n\n`db.relationship()`用于在两个表之间建立`一对多关系`。例如书中 roles 表中一个 User 角色，可以对应 users 表中多个实际的普通用户。实现这种关系时，要在“多”这一侧加入一个外键，指向“一”这一侧联接的记录。\n\n```py\nclass Role(db.Model):\n\t# ...\n\tusers = db.relationship('User', backref='role')\n\nclass User(db.Model):\n\t# ...\n\trole_id = db.Column(db.Integer, db.ForeignKey('roles.id'))\n```\n\n## relationship & ForeighKey\n\n大多数情况下, db.relationship() 都能自行找到关系中的外键, 但有时却无法决定把 哪一列作为外键。 例如, 如果 User 模型中有两个或以上的列定义为 Role 模型的外键, SQLAlchemy 就不知道该使用哪列。如果无法决定外键,你就要为 db.relationship() 提供额外参数,从而确定所用外键。（见书 P49）\n\n## relationship & backref\n通过`db.relationship()`，Role 模型有了一个可以获得对应角色所有用户的属性`users`。默认是列表形式，`lazy='dynamic'`时返回的是一个 query 对象。即`relationship`提供了 Role 对 User 的访问。\n\n而`backref`正好相反，提供了 User 对 Role 的访问。\n\n不妨设一个 Role 实例为 `user_role`，一个 User 实例为 `u`。relationship 使 `user_role.users` 可以访问所有符合角色的用户，而 backref 使 `u.role` 可以获得用户对应的角色。\n\n### 示例\n\n```\n$ p manage.py shell\n\n>>> user_role = Role.query.filter_by(name='User').all()\n>>> user_role\n[<Role u'User'>]\n\n>>> user_role = Role.query.filter_by(name='User').first()\n>>> user_role\n<Role u'User'>\n\n>>> user_role.users\n<sqlalchemy.orm.dynamic.AppenderBaseQuery object at 0x1087c1050>\n\n>>> user_role.users.order_by(User.username).all()\n[<User u'alice78'>, <User u'andrea86'>, <User u'hmr'>]\n\n>>> Role.query.all()\n[<Role u'Moderator'>, <Role u'Administrator'>, <Role u'User'>]\n\n>>> user_role.users.count()\n3\n\n>>> u = User.query.filter_by(username='hmr').first()\n>>> u\n<User u'hmr'>\n\n>>> u.role\n<Role u'User'>\n>>>\n```\n\n# 一对一关系\n\n除了一对多之外, 还有几种其他的关系类型。一对一关系可以用前面介绍的一对多关系表示, 但调用 db.relationship() 时要把 uselist 设为 False , 把“多”变成“一”。 \n\n\n# 多对多关系\n\n`多对多关系`在书 P131 讲得很清楚。\n\n在 P134 的实际例子中，使用两个一对多关系实现多对多关系。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Flask-relationship-backref.md","raw":"---\ntitle: Flask-SQLAlchemy 中的 relationship & backref\ndate: 2016-08-16 14:29:07\ncategory: Flask\ntags: [Flask, Flask-SQLAlchemy, relationship, backref]\n---\n\n今天重看 Flask 时，发现对`backref`仍然没有理解透彻。查阅[文档](http://flask-sqlalchemy.pocoo.org/2.1/models/)后发现，以前试图孤立地理解`backref`是问题之源，`backref`是与`relationship`配合使用的。\n\n# 一对多关系\n\n`db.relationship()`用于在两个表之间建立`一对多关系`。例如书中 roles 表中一个 User 角色，可以对应 users 表中多个实际的普通用户。实现这种关系时，要在“多”这一侧加入一个外键，指向“一”这一侧联接的记录。\n\n```py\nclass Role(db.Model):\n\t# ...\n\tusers = db.relationship('User', backref='role')\n\nclass User(db.Model):\n\t# ...\n\trole_id = db.Column(db.Integer, db.ForeignKey('roles.id'))\n```\n\n## relationship & ForeighKey\n\n大多数情况下, db.relationship() 都能自行找到关系中的外键, 但有时却无法决定把 哪一列作为外键。 例如, 如果 User 模型中有两个或以上的列定义为 Role 模型的外键, SQLAlchemy 就不知道该使用哪列。如果无法决定外键,你就要为 db.relationship() 提供额外参数,从而确定所用外键。（见书 P49）\n\n## relationship & backref\n通过`db.relationship()`，Role 模型有了一个可以获得对应角色所有用户的属性`users`。默认是列表形式，`lazy='dynamic'`时返回的是一个 query 对象。即`relationship`提供了 Role 对 User 的访问。\n\n而`backref`正好相反，提供了 User 对 Role 的访问。\n\n不妨设一个 Role 实例为 `user_role`，一个 User 实例为 `u`。relationship 使 `user_role.users` 可以访问所有符合角色的用户，而 backref 使 `u.role` 可以获得用户对应的角色。\n\n### 示例\n\n```\n$ p manage.py shell\n\n>>> user_role = Role.query.filter_by(name='User').all()\n>>> user_role\n[<Role u'User'>]\n\n>>> user_role = Role.query.filter_by(name='User').first()\n>>> user_role\n<Role u'User'>\n\n>>> user_role.users\n<sqlalchemy.orm.dynamic.AppenderBaseQuery object at 0x1087c1050>\n\n>>> user_role.users.order_by(User.username).all()\n[<User u'alice78'>, <User u'andrea86'>, <User u'hmr'>]\n\n>>> Role.query.all()\n[<Role u'Moderator'>, <Role u'Administrator'>, <Role u'User'>]\n\n>>> user_role.users.count()\n3\n\n>>> u = User.query.filter_by(username='hmr').first()\n>>> u\n<User u'hmr'>\n\n>>> u.role\n<Role u'User'>\n>>>\n```\n\n# 一对一关系\n\n除了一对多之外, 还有几种其他的关系类型。一对一关系可以用前面介绍的一对多关系表示, 但调用 db.relationship() 时要把 uselist 设为 False , 把“多”变成“一”。 \n\n\n# 多对多关系\n\n`多对多关系`在书 P131 讲得很清楚。\n\n在 P134 的实际例子中，使用两个一对多关系实现多对多关系。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Flask-relationship-backref","published":1,"updated":"2016-08-16T08:15:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fth00033npxjw5rmm54","content":"<p>今天重看 Flask 时，发现对<code>backref</code>仍然没有理解透彻。查阅<a href=\"http://flask-sqlalchemy.pocoo.org/2.1/models/\" target=\"_blank\" rel=\"external\">文档</a>后发现，以前试图孤立地理解<code>backref</code>是问题之源，<code>backref</code>是与<code>relationship</code>配合使用的。</p>\n<h1 id=\"一对多关系\"><a href=\"#一对多关系\" class=\"headerlink\" title=\"一对多关系\"></a>一对多关系</h1><p><code>db.relationship()</code>用于在两个表之间建立<code>一对多关系</code>。例如书中 roles 表中一个 User 角色，可以对应 users 表中多个实际的普通用户。实现这种关系时，要在“多”这一侧加入一个外键，指向“一”这一侧联接的记录。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span><span class=\"params\">(db.Model)</span>:</span></div><div class=\"line\">\t<span class=\"comment\"># ...</span></div><div class=\"line\">\tusers = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'role'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></div><div class=\"line\">\t<span class=\"comment\"># ...</span></div><div class=\"line\">\trole_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">'roles.id'</span>))</div></pre></td></tr></table></figure>\n<h2 id=\"relationship-amp-ForeighKey\"><a href=\"#relationship-amp-ForeighKey\" class=\"headerlink\" title=\"relationship &amp; ForeighKey\"></a>relationship &amp; ForeighKey</h2><p>大多数情况下, db.relationship() 都能自行找到关系中的外键, 但有时却无法决定把 哪一列作为外键。 例如, 如果 User 模型中有两个或以上的列定义为 Role 模型的外键, SQLAlchemy 就不知道该使用哪列。如果无法决定外键,你就要为 db.relationship() 提供额外参数,从而确定所用外键。（见书 P49）</p>\n<h2 id=\"relationship-amp-backref\"><a href=\"#relationship-amp-backref\" class=\"headerlink\" title=\"relationship &amp; backref\"></a>relationship &amp; backref</h2><p>通过<code>db.relationship()</code>，Role 模型有了一个可以获得对应角色所有用户的属性<code>users</code>。默认是列表形式，<code>lazy=&#39;dynamic&#39;</code>时返回的是一个 query 对象。即<code>relationship</code>提供了 Role 对 User 的访问。</p>\n<p>而<code>backref</code>正好相反，提供了 User 对 Role 的访问。</p>\n<p>不妨设一个 Role 实例为 <code>user_role</code>，一个 User 实例为 <code>u</code>。relationship 使 <code>user_role.users</code> 可以访问所有符合角色的用户，而 backref 使 <code>u.role</code> 可以获得用户对应的角色。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ p manage.py shell</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role = Role.query.filter_by(name=<span class=\"string\">'User'</span>).all()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role</div><div class=\"line\">[&lt;Role <span class=\"string\">u'User'</span>&gt;]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role = Role.query.filter_by(name=<span class=\"string\">'User'</span>).first()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role</div><div class=\"line\">&lt;Role <span class=\"string\">u'User'</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role.users</div><div class=\"line\">&lt;sqlalchemy.orm.dynamic.AppenderBaseQuery object at <span class=\"number\">0x1087c1050</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role.users.order_by(User.username).all()</div><div class=\"line\">[&lt;User <span class=\"string\">u'alice78'</span>&gt;, &lt;User <span class=\"string\">u'andrea86'</span>&gt;, &lt;User <span class=\"string\">u'hmr'</span>&gt;]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Role.query.all()</div><div class=\"line\">[&lt;Role <span class=\"string\">u'Moderator'</span>&gt;, &lt;Role <span class=\"string\">u'Administrator'</span>&gt;, &lt;Role <span class=\"string\">u'User'</span>&gt;]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role.users.count()</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u = User.query.filter_by(username=<span class=\"string\">'hmr'</span>).first()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u</div><div class=\"line\">&lt;User <span class=\"string\">u'hmr'</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u.role</div><div class=\"line\">&lt;Role <span class=\"string\">u'User'</span>&gt;</div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"一对一关系\"><a href=\"#一对一关系\" class=\"headerlink\" title=\"一对一关系\"></a>一对一关系</h1><p>除了一对多之外, 还有几种其他的关系类型。一对一关系可以用前面介绍的一对多关系表示, 但调用 db.relationship() 时要把 uselist 设为 False , 把“多”变成“一”。 </p>\n<h1 id=\"多对多关系\"><a href=\"#多对多关系\" class=\"headerlink\" title=\"多对多关系\"></a>多对多关系</h1><p><code>多对多关系</code>在书 P131 讲得很清楚。</p>\n<p>在 P134 的实际例子中，使用两个一对多关系实现多对多关系。</p>\n","excerpt":"","more":"<p>今天重看 Flask 时，发现对<code>backref</code>仍然没有理解透彻。查阅<a href=\"http://flask-sqlalchemy.pocoo.org/2.1/models/\">文档</a>后发现，以前试图孤立地理解<code>backref</code>是问题之源，<code>backref</code>是与<code>relationship</code>配合使用的。</p>\n<h1 id=\"一对多关系\"><a href=\"#一对多关系\" class=\"headerlink\" title=\"一对多关系\"></a>一对多关系</h1><p><code>db.relationship()</code>用于在两个表之间建立<code>一对多关系</code>。例如书中 roles 表中一个 User 角色，可以对应 users 表中多个实际的普通用户。实现这种关系时，要在“多”这一侧加入一个外键，指向“一”这一侧联接的记录。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span><span class=\"params\">(db.Model)</span>:</span></div><div class=\"line\">\t<span class=\"comment\"># ...</span></div><div class=\"line\">\tusers = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'role'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></div><div class=\"line\">\t<span class=\"comment\"># ...</span></div><div class=\"line\">\trole_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">'roles.id'</span>))</div></pre></td></tr></table></figure>\n<h2 id=\"relationship-amp-ForeighKey\"><a href=\"#relationship-amp-ForeighKey\" class=\"headerlink\" title=\"relationship &amp; ForeighKey\"></a>relationship &amp; ForeighKey</h2><p>大多数情况下, db.relationship() 都能自行找到关系中的外键, 但有时却无法决定把 哪一列作为外键。 例如, 如果 User 模型中有两个或以上的列定义为 Role 模型的外键, SQLAlchemy 就不知道该使用哪列。如果无法决定外键,你就要为 db.relationship() 提供额外参数,从而确定所用外键。（见书 P49）</p>\n<h2 id=\"relationship-amp-backref\"><a href=\"#relationship-amp-backref\" class=\"headerlink\" title=\"relationship &amp; backref\"></a>relationship &amp; backref</h2><p>通过<code>db.relationship()</code>，Role 模型有了一个可以获得对应角色所有用户的属性<code>users</code>。默认是列表形式，<code>lazy=&#39;dynamic&#39;</code>时返回的是一个 query 对象。即<code>relationship</code>提供了 Role 对 User 的访问。</p>\n<p>而<code>backref</code>正好相反，提供了 User 对 Role 的访问。</p>\n<p>不妨设一个 Role 实例为 <code>user_role</code>，一个 User 实例为 <code>u</code>。relationship 使 <code>user_role.users</code> 可以访问所有符合角色的用户，而 backref 使 <code>u.role</code> 可以获得用户对应的角色。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ p manage.py shell</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role = Role.query.filter_by(name=<span class=\"string\">'User'</span>).all()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role</div><div class=\"line\">[&lt;Role <span class=\"string\">u'User'</span>&gt;]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role = Role.query.filter_by(name=<span class=\"string\">'User'</span>).first()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role</div><div class=\"line\">&lt;Role <span class=\"string\">u'User'</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role.users</div><div class=\"line\">&lt;sqlalchemy.orm.dynamic.AppenderBaseQuery object at <span class=\"number\">0x1087c1050</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role.users.order_by(User.username).all()</div><div class=\"line\">[&lt;User <span class=\"string\">u'alice78'</span>&gt;, &lt;User <span class=\"string\">u'andrea86'</span>&gt;, &lt;User <span class=\"string\">u'hmr'</span>&gt;]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Role.query.all()</div><div class=\"line\">[&lt;Role <span class=\"string\">u'Moderator'</span>&gt;, &lt;Role <span class=\"string\">u'Administrator'</span>&gt;, &lt;Role <span class=\"string\">u'User'</span>&gt;]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>user_role.users.count()</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u = User.query.filter_by(username=<span class=\"string\">'hmr'</span>).first()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u</div><div class=\"line\">&lt;User <span class=\"string\">u'hmr'</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u.role</div><div class=\"line\">&lt;Role <span class=\"string\">u'User'</span>&gt;</div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"一对一关系\"><a href=\"#一对一关系\" class=\"headerlink\" title=\"一对一关系\"></a>一对一关系</h1><p>除了一对多之外, 还有几种其他的关系类型。一对一关系可以用前面介绍的一对多关系表示, 但调用 db.relationship() 时要把 uselist 设为 False , 把“多”变成“一”。 </p>\n<h1 id=\"多对多关系\"><a href=\"#多对多关系\" class=\"headerlink\" title=\"多对多关系\"></a>多对多关系</h1><p><code>多对多关系</code>在书 P131 讲得很清楚。</p>\n<p>在 P134 的实际例子中，使用两个一对多关系实现多对多关系。</p>\n"},{"title":"Flask 数据库更新问题","date":"2016-05-16T13:52:45.000Z","_content":"\n\n\n# 更新列\n\n## 遇到的问题\n\n学习到 8.4.6 测试登录时\n\n```\n(venv) $ python manage.py shell \n>>> u = User(email='john@example.com', username='john', password='cat') \n>>> db.session.add(u) \n>>> db.session.commit()\n```\n报错说表中无 email 列\n\n确认代码无误后，判断应该是没有成功更新 models.py 中新建的 email 列，简单尝试无果，决定重新看一遍相关内容加深理解，再着手解决\n\n## 粗暴的更新方法\n\n如果数据库表已经存在于数据库中， 那么 db.create_all() 不会重新创建或者更新这个表。如果修改模型后要把改动应用到现有的数据库中，这一特 性会带来不便。更新现有数据库表的粗暴方式是先删除旧表再重新创建：\n\n```\n>>> db.drop_all() \n>>> db.create_all()\n```\n\n## 使用 Flask-Migrate 实现数据库迁移\n\n> 更新表的更好方法是使用数据库迁移框架。源码版本控制工具可以跟踪源码文件的变化， 类似地，数据库迁移框架能跟踪数据库模式的变化，然后增量式的把变化应用到数据库中。\n\n> SQLAlchemy 的主力开发人员编写了一个迁移框架，称为 Alembic（https://alembic.readthedocs. org/en/latest/index.html） 。 除 了 直 接 使 用 Alembic 之 外， Flask 程 序 还 可 使 用 Flask-Migrate （http://flask-migrate.readthedocs.org/en/latest/）扩展。这个扩展对 Alembic 做了轻量级包装，并 集成到 Flask-Script 中，所有操作都通过 Flask-Script 命令完成。\n\n安装与配置略过不提   \n几次尝试后，方才对几个主要命令的实际作用有了正确的理解\n\n### init\n\n创建迁移仓库和脚本，并不会生成或更新数据库文件，`migrations/versions/`中为空，如果此时`upgrade`会生成一个只包含`alembic_version`表的数据库\n\n```\n$ sqlite3 data-dev.sqlite\nSQLite version 3.8.10.2 2015-05-20 18:17:19\nEnter \".help\" for usage hints.\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL\n);\nCOMMIT;\nsqlite>\n```\n\n### migrate\n\n检测对数据库的操作，生成迁移脚本保存到`migrations/versions/`中，用于数据库迁移\n\n不过按[官方文档](http://flask-migrate.readthedocs.io/en/latest/)所说，不一定能检测到所有对数据库的修改，所有需要自己对生成的迁移脚本进行检查，加上可能有遗漏的地方\n\n### upgrade\n\n用于把上述迁移运用到数据库中，即至此才会真正对数据库进行更新\n\n```\n$ sqlite3 data-dev.sqlite\nSQLite version 3.8.10.2 2015-05-20 18:17:19\nEnter \".help\" for usage hints.\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL\n);\nINSERT INTO \"alembic_version\" VALUES('bb488872a057');\nCREATE TABLE roles (\n\tid INTEGER NOT NULL,\n\tname VARCHAR(64),\n\tPRIMARY KEY (id),\n\tUNIQUE (name)\n);\nCREATE TABLE users (\n\tid INTEGER NOT NULL,\n\temail VARCHAR(64),\n\tusername VARCHAR(64),\n\trole_id INTEGER,\n\tpassword_hash VARCHAR(128),\n\tPRIMARY KEY (id),\n\tFOREIGN KEY(role_id) REFERENCES roles (id)\n);\nCREATE UNIQUE INDEX ix_users_email ON users (email);\nCREATE UNIQUE INDEX ix_users_username ON users (username);\nCOMMIT;\nsqlite>\n```\n\n\n\n# 管理员角色\n\n## 遇到的问题\n\n学习到 10.3.2后，发现以管理员邮箱注册的帐号并不能打开`管理员级别的资料编辑器`   \n手动查看数据库：\n```\nINSERT INTO \"users\" VALUES(1,'huamingrui@163.com','huamingrui',NULL,'pbkdf2:sha1:1000$wpqGMEz8$a3bf86fcb0be120a7510a8f702077eb2fdfa1980',1,NULL,NULL,NULL,'2016-05-17 14:17:48.930851','2016-05-17 14:19:00.735339');\n```\n发现`role_id`项为空，即角色没有被成功赋予\n\n## Role.insert_roles()\n\n回去翻书，找到 9.3 最后的部分说到\n> 在你阅读下一章之前，最好重新创建或者更新开发数据库，如此一来，那些在实现角色和 权限之前创建的用户账户就被赋予了角色。\n\n然而实测发现，对于管理员用户，必须在注册之前就完成 9.1 最后的`Role.insert_roles()`步骤，才能成功为管理员邮箱用户赋予`管理员角色`\n\n```\n$ rm data-dev.sqlite\n$ python manage.py db upgrade\nINFO  [alembic.runtime.migration] Context impl SQLiteImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade  -> 02ccb3e6a553, empty message\n$ sqlite3 data-dev.sqlite\nSQLite version 3.8.10.2 2015-05-20 18:17:19\nEnter \".help\" for usage hints.\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL\n);\nINSERT INTO \"alembic_version\" VALUES('02ccb3e6a553');\nCREATE TABLE roles (\n\tid INTEGER NOT NULL,\n\tname VARCHAR(64),\n\t\"default\" BOOLEAN,\n\tpermissions INTEGER,\n\tPRIMARY KEY (id),\n\tUNIQUE (name),\n\tCHECK (\"default\" IN (0, 1))\n);\nCREATE TABLE users (\n\tid INTEGER NOT NULL,\n\temail VARCHAR(64),\n\tusername VARCHAR(64),\n\trole_id INTEGER,\n\tpassword_hash VARCHAR(128),\n\tconfirmed BOOLEAN,\n\tname VARCHAR(64),\n\tlocation VARCHAR(64),\n\tabout_me TEXT,\n\tmember_since DATETIME,\n\tlast_seen DATETIME,\n\tPRIMARY KEY (id),\n\tFOREIGN KEY(role_id) REFERENCES roles (id),\n\tCHECK (confirmed IN (0, 1))\n);\nCREATE INDEX ix_roles_default ON roles (\"default\");\nCREATE UNIQUE INDEX ix_users_email ON users (email);\nCREATE UNIQUE INDEX ix_users_username ON users (username);\nCOMMIT;\nsqlite> ^D\n$ python manage.py shell\n>>> Role.insert_roles()\n>>> Role.query.all()\n[<Role u'Moderator'>, <Role u'Administrator'>, <Role u'User'>]\n>>> ^D\n$ sqlite3 data-dev.sqlite\nSQLite version 3.8.10.2 2015-05-20 18:17:19\nEnter \".help\" for usage hints.\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL\n);\nINSERT INTO \"alembic_version\" VALUES('02ccb3e6a553');\nCREATE TABLE roles (\n\tid INTEGER NOT NULL,\n\tname VARCHAR(64),\n\t\"default\" BOOLEAN,\n\tpermissions INTEGER,\n\tPRIMARY KEY (id),\n\tUNIQUE (name),\n\tCHECK (\"default\" IN (0, 1))\n);\nINSERT INTO \"roles\" VALUES(1,'Moderator',0,15);\nINSERT INTO \"roles\" VALUES(2,'Administrator',0,255);\nINSERT INTO \"roles\" VALUES(3,'User',1,7);\nCREATE TABLE users (\n\tid INTEGER NOT NULL,\n\temail VARCHAR(64),\n\tusername VARCHAR(64),\n\trole_id INTEGER,\n\tpassword_hash VARCHAR(128),\n\tconfirmed BOOLEAN,\n\tname VARCHAR(64),\n\tlocation VARCHAR(64),\n\tabout_me TEXT,\n\tmember_since DATETIME,\n\tlast_seen DATETIME,\n\tPRIMARY KEY (id),\n\tFOREIGN KEY(role_id) REFERENCES roles (id),\n\tCHECK (confirmed IN (0, 1))\n);\nCREATE INDEX ix_roles_default ON roles (\"default\");\nCREATE UNIQUE INDEX ix_users_email ON users (email);\nCREATE UNIQUE INDEX ix_users_username ON users (username);\nCOMMIT;\nsqlite> ^D\n$ python manage.py runserver\n```\n注册管理员邮箱\n```\n$ sqlite3 data-dev.sqlite\nSQLite version 3.8.10.2 2015-05-20 18:17:19\nEnter \".help\" for usage hints.\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL\n);\nINSERT INTO \"alembic_version\" VALUES('02ccb3e6a553');\nCREATE TABLE roles (\n\tid INTEGER NOT NULL,\n\tname VARCHAR(64),\n\t\"default\" BOOLEAN,\n\tpermissions INTEGER,\n\tPRIMARY KEY (id),\n\tUNIQUE (name),\n\tCHECK (\"default\" IN (0, 1))\n);\nINSERT INTO \"roles\" VALUES(1,'Moderator',0,15);\nINSERT INTO \"roles\" VALUES(2,'Administrator',0,255);\nINSERT INTO \"roles\" VALUES(3,'User',1,7);\nCREATE TABLE users (\n\tid INTEGER NOT NULL,\n\temail VARCHAR(64),\n\tusername VARCHAR(64),\n\trole_id INTEGER,\n\tpassword_hash VARCHAR(128),\n\tconfirmed BOOLEAN,\n\tname VARCHAR(64),\n\tlocation VARCHAR(64),\n\tabout_me TEXT,\n\tmember_since DATETIME,\n\tlast_seen DATETIME,\n\tPRIMARY KEY (id),\n\tFOREIGN KEY(role_id) REFERENCES roles (id),\n\tCHECK (confirmed IN (0, 1))\n);\nINSERT INTO \"users\" VALUES(1,'huamingrui@163.com','MrHua',2,'pbkdf2:sha1:1000$tSmBVC7j$6f3d994eb5b6b455347b56d3112a4cac26fc97e1',1,NULL,NULL,NULL,'2016-05-17 14:34:36.781740','2016-05-17 14:52:08.764862');\nCREATE INDEX ix_roles_default ON roles (\"default\");\nCREATE UNIQUE INDEX ix_users_email ON users (email);\nCREATE UNIQUE INDEX ix_users_username ON users (username);\nCOMMIT;\nsqlite>\n```\n","source":"_posts/Flask-数据库更新问题.md","raw":"---\ntitle: Flask 数据库更新问题\ndate: 2016-05-16 21:52:45\ncategory: Flask\ntags: [Python, Flask-SQLAlchemy, Alembic, Flask-Migrate]\n---\n\n\n\n# 更新列\n\n## 遇到的问题\n\n学习到 8.4.6 测试登录时\n\n```\n(venv) $ python manage.py shell \n>>> u = User(email='john@example.com', username='john', password='cat') \n>>> db.session.add(u) \n>>> db.session.commit()\n```\n报错说表中无 email 列\n\n确认代码无误后，判断应该是没有成功更新 models.py 中新建的 email 列，简单尝试无果，决定重新看一遍相关内容加深理解，再着手解决\n\n## 粗暴的更新方法\n\n如果数据库表已经存在于数据库中， 那么 db.create_all() 不会重新创建或者更新这个表。如果修改模型后要把改动应用到现有的数据库中，这一特 性会带来不便。更新现有数据库表的粗暴方式是先删除旧表再重新创建：\n\n```\n>>> db.drop_all() \n>>> db.create_all()\n```\n\n## 使用 Flask-Migrate 实现数据库迁移\n\n> 更新表的更好方法是使用数据库迁移框架。源码版本控制工具可以跟踪源码文件的变化， 类似地，数据库迁移框架能跟踪数据库模式的变化，然后增量式的把变化应用到数据库中。\n\n> SQLAlchemy 的主力开发人员编写了一个迁移框架，称为 Alembic（https://alembic.readthedocs. org/en/latest/index.html） 。 除 了 直 接 使 用 Alembic 之 外， Flask 程 序 还 可 使 用 Flask-Migrate （http://flask-migrate.readthedocs.org/en/latest/）扩展。这个扩展对 Alembic 做了轻量级包装，并 集成到 Flask-Script 中，所有操作都通过 Flask-Script 命令完成。\n\n安装与配置略过不提   \n几次尝试后，方才对几个主要命令的实际作用有了正确的理解\n\n### init\n\n创建迁移仓库和脚本，并不会生成或更新数据库文件，`migrations/versions/`中为空，如果此时`upgrade`会生成一个只包含`alembic_version`表的数据库\n\n```\n$ sqlite3 data-dev.sqlite\nSQLite version 3.8.10.2 2015-05-20 18:17:19\nEnter \".help\" for usage hints.\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL\n);\nCOMMIT;\nsqlite>\n```\n\n### migrate\n\n检测对数据库的操作，生成迁移脚本保存到`migrations/versions/`中，用于数据库迁移\n\n不过按[官方文档](http://flask-migrate.readthedocs.io/en/latest/)所说，不一定能检测到所有对数据库的修改，所有需要自己对生成的迁移脚本进行检查，加上可能有遗漏的地方\n\n### upgrade\n\n用于把上述迁移运用到数据库中，即至此才会真正对数据库进行更新\n\n```\n$ sqlite3 data-dev.sqlite\nSQLite version 3.8.10.2 2015-05-20 18:17:19\nEnter \".help\" for usage hints.\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL\n);\nINSERT INTO \"alembic_version\" VALUES('bb488872a057');\nCREATE TABLE roles (\n\tid INTEGER NOT NULL,\n\tname VARCHAR(64),\n\tPRIMARY KEY (id),\n\tUNIQUE (name)\n);\nCREATE TABLE users (\n\tid INTEGER NOT NULL,\n\temail VARCHAR(64),\n\tusername VARCHAR(64),\n\trole_id INTEGER,\n\tpassword_hash VARCHAR(128),\n\tPRIMARY KEY (id),\n\tFOREIGN KEY(role_id) REFERENCES roles (id)\n);\nCREATE UNIQUE INDEX ix_users_email ON users (email);\nCREATE UNIQUE INDEX ix_users_username ON users (username);\nCOMMIT;\nsqlite>\n```\n\n\n\n# 管理员角色\n\n## 遇到的问题\n\n学习到 10.3.2后，发现以管理员邮箱注册的帐号并不能打开`管理员级别的资料编辑器`   \n手动查看数据库：\n```\nINSERT INTO \"users\" VALUES(1,'huamingrui@163.com','huamingrui',NULL,'pbkdf2:sha1:1000$wpqGMEz8$a3bf86fcb0be120a7510a8f702077eb2fdfa1980',1,NULL,NULL,NULL,'2016-05-17 14:17:48.930851','2016-05-17 14:19:00.735339');\n```\n发现`role_id`项为空，即角色没有被成功赋予\n\n## Role.insert_roles()\n\n回去翻书，找到 9.3 最后的部分说到\n> 在你阅读下一章之前，最好重新创建或者更新开发数据库，如此一来，那些在实现角色和 权限之前创建的用户账户就被赋予了角色。\n\n然而实测发现，对于管理员用户，必须在注册之前就完成 9.1 最后的`Role.insert_roles()`步骤，才能成功为管理员邮箱用户赋予`管理员角色`\n\n```\n$ rm data-dev.sqlite\n$ python manage.py db upgrade\nINFO  [alembic.runtime.migration] Context impl SQLiteImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade  -> 02ccb3e6a553, empty message\n$ sqlite3 data-dev.sqlite\nSQLite version 3.8.10.2 2015-05-20 18:17:19\nEnter \".help\" for usage hints.\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL\n);\nINSERT INTO \"alembic_version\" VALUES('02ccb3e6a553');\nCREATE TABLE roles (\n\tid INTEGER NOT NULL,\n\tname VARCHAR(64),\n\t\"default\" BOOLEAN,\n\tpermissions INTEGER,\n\tPRIMARY KEY (id),\n\tUNIQUE (name),\n\tCHECK (\"default\" IN (0, 1))\n);\nCREATE TABLE users (\n\tid INTEGER NOT NULL,\n\temail VARCHAR(64),\n\tusername VARCHAR(64),\n\trole_id INTEGER,\n\tpassword_hash VARCHAR(128),\n\tconfirmed BOOLEAN,\n\tname VARCHAR(64),\n\tlocation VARCHAR(64),\n\tabout_me TEXT,\n\tmember_since DATETIME,\n\tlast_seen DATETIME,\n\tPRIMARY KEY (id),\n\tFOREIGN KEY(role_id) REFERENCES roles (id),\n\tCHECK (confirmed IN (0, 1))\n);\nCREATE INDEX ix_roles_default ON roles (\"default\");\nCREATE UNIQUE INDEX ix_users_email ON users (email);\nCREATE UNIQUE INDEX ix_users_username ON users (username);\nCOMMIT;\nsqlite> ^D\n$ python manage.py shell\n>>> Role.insert_roles()\n>>> Role.query.all()\n[<Role u'Moderator'>, <Role u'Administrator'>, <Role u'User'>]\n>>> ^D\n$ sqlite3 data-dev.sqlite\nSQLite version 3.8.10.2 2015-05-20 18:17:19\nEnter \".help\" for usage hints.\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL\n);\nINSERT INTO \"alembic_version\" VALUES('02ccb3e6a553');\nCREATE TABLE roles (\n\tid INTEGER NOT NULL,\n\tname VARCHAR(64),\n\t\"default\" BOOLEAN,\n\tpermissions INTEGER,\n\tPRIMARY KEY (id),\n\tUNIQUE (name),\n\tCHECK (\"default\" IN (0, 1))\n);\nINSERT INTO \"roles\" VALUES(1,'Moderator',0,15);\nINSERT INTO \"roles\" VALUES(2,'Administrator',0,255);\nINSERT INTO \"roles\" VALUES(3,'User',1,7);\nCREATE TABLE users (\n\tid INTEGER NOT NULL,\n\temail VARCHAR(64),\n\tusername VARCHAR(64),\n\trole_id INTEGER,\n\tpassword_hash VARCHAR(128),\n\tconfirmed BOOLEAN,\n\tname VARCHAR(64),\n\tlocation VARCHAR(64),\n\tabout_me TEXT,\n\tmember_since DATETIME,\n\tlast_seen DATETIME,\n\tPRIMARY KEY (id),\n\tFOREIGN KEY(role_id) REFERENCES roles (id),\n\tCHECK (confirmed IN (0, 1))\n);\nCREATE INDEX ix_roles_default ON roles (\"default\");\nCREATE UNIQUE INDEX ix_users_email ON users (email);\nCREATE UNIQUE INDEX ix_users_username ON users (username);\nCOMMIT;\nsqlite> ^D\n$ python manage.py runserver\n```\n注册管理员邮箱\n```\n$ sqlite3 data-dev.sqlite\nSQLite version 3.8.10.2 2015-05-20 18:17:19\nEnter \".help\" for usage hints.\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL\n);\nINSERT INTO \"alembic_version\" VALUES('02ccb3e6a553');\nCREATE TABLE roles (\n\tid INTEGER NOT NULL,\n\tname VARCHAR(64),\n\t\"default\" BOOLEAN,\n\tpermissions INTEGER,\n\tPRIMARY KEY (id),\n\tUNIQUE (name),\n\tCHECK (\"default\" IN (0, 1))\n);\nINSERT INTO \"roles\" VALUES(1,'Moderator',0,15);\nINSERT INTO \"roles\" VALUES(2,'Administrator',0,255);\nINSERT INTO \"roles\" VALUES(3,'User',1,7);\nCREATE TABLE users (\n\tid INTEGER NOT NULL,\n\temail VARCHAR(64),\n\tusername VARCHAR(64),\n\trole_id INTEGER,\n\tpassword_hash VARCHAR(128),\n\tconfirmed BOOLEAN,\n\tname VARCHAR(64),\n\tlocation VARCHAR(64),\n\tabout_me TEXT,\n\tmember_since DATETIME,\n\tlast_seen DATETIME,\n\tPRIMARY KEY (id),\n\tFOREIGN KEY(role_id) REFERENCES roles (id),\n\tCHECK (confirmed IN (0, 1))\n);\nINSERT INTO \"users\" VALUES(1,'huamingrui@163.com','MrHua',2,'pbkdf2:sha1:1000$tSmBVC7j$6f3d994eb5b6b455347b56d3112a4cac26fc97e1',1,NULL,NULL,NULL,'2016-05-17 14:34:36.781740','2016-05-17 14:52:08.764862');\nCREATE INDEX ix_roles_default ON roles (\"default\");\nCREATE UNIQUE INDEX ix_users_email ON users (email);\nCREATE UNIQUE INDEX ix_users_username ON users (username);\nCOMMIT;\nsqlite>\n```\n","slug":"Flask-数据库更新问题","published":1,"updated":"2016-06-26T06:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fti00043npxcpiwbri0","content":"<h1 id=\"更新列\"><a href=\"#更新列\" class=\"headerlink\" title=\"更新列\"></a>更新列</h1><h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>学习到 8.4.6 测试登录时</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">(venv) $ python manage<span class=\"selector-class\">.py</span> shell </div><div class=\"line\">&gt;&gt;&gt; u = User(email=<span class=\"string\">'john@example.com'</span>, username=<span class=\"string\">'john'</span>, password=<span class=\"string\">'cat'</span>) </div><div class=\"line\">&gt;&gt;&gt; db<span class=\"selector-class\">.session</span><span class=\"selector-class\">.add</span>(u) </div><div class=\"line\">&gt;&gt;&gt; db<span class=\"selector-class\">.session</span><span class=\"selector-class\">.commit</span>()</div></pre></td></tr></table></figure>\n<p>报错说表中无 email 列</p>\n<p>确认代码无误后，判断应该是没有成功更新 models.py 中新建的 email 列，简单尝试无果，决定重新看一遍相关内容加深理解，再着手解决</p>\n<h2 id=\"粗暴的更新方法\"><a href=\"#粗暴的更新方法\" class=\"headerlink\" title=\"粗暴的更新方法\"></a>粗暴的更新方法</h2><p>如果数据库表已经存在于数据库中， 那么 db.create_all() 不会重新创建或者更新这个表。如果修改模型后要把改动应用到现有的数据库中，这一特 性会带来不便。更新现有数据库表的粗暴方式是先删除旧表再重新创建：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; db.drop_all() </div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; db.create_all()</div></pre></td></tr></table></figure>\n<h2 id=\"使用-Flask-Migrate-实现数据库迁移\"><a href=\"#使用-Flask-Migrate-实现数据库迁移\" class=\"headerlink\" title=\"使用 Flask-Migrate 实现数据库迁移\"></a>使用 Flask-Migrate 实现数据库迁移</h2><blockquote>\n<p>更新表的更好方法是使用数据库迁移框架。源码版本控制工具可以跟踪源码文件的变化， 类似地，数据库迁移框架能跟踪数据库模式的变化，然后增量式的把变化应用到数据库中。</p>\n<p>SQLAlchemy 的主力开发人员编写了一个迁移框架，称为 Alembic（<a href=\"https://alembic.readthedocs\" target=\"_blank\" rel=\"external\">https://alembic.readthedocs</a>. org/en/latest/index.html） 。 除 了 直 接 使 用 Alembic 之 外， Flask 程 序 还 可 使 用 Flask-Migrate （<a href=\"http://flask-migrate.readthedocs.org/en/latest/）扩展。这个扩展对\" target=\"_blank\" rel=\"external\">http://flask-migrate.readthedocs.org/en/latest/）扩展。这个扩展对</a> Alembic 做了轻量级包装，并 集成到 Flask-Script 中，所有操作都通过 Flask-Script 命令完成。</p>\n</blockquote>\n<p>安装与配置略过不提<br>几次尝试后，方才对几个主要命令的实际作用有了正确的理解</p>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p>创建迁移仓库和脚本，并不会生成或更新数据库文件，<code>migrations/versions/</code>中为空，如果此时<code>upgrade</code>会生成一个只包含<code>alembic_version</code>表的数据库</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$</span> sqlite3 data-dev.sqlite</div><div class=\"line\">SQLite version <span class=\"number\">3.8</span><span class=\"number\">.10</span><span class=\"number\">.2</span> <span class=\"number\">2015</span><span class=\"number\">-05</span><span class=\"number\">-20</span> <span class=\"number\">18</span>:<span class=\"number\">17</span>:<span class=\"number\">19</span></div><div class=\"line\">Enter <span class=\"string\">\".help\"</span> <span class=\"keyword\">for</span> usage hints.</div><div class=\"line\">sqlite&gt; .dump</div><div class=\"line\">PRAGMA foreign_keys=OFF;</div><div class=\"line\">BEGIN TRANSACTION;</div><div class=\"line\">CREATE <span class=\"keyword\">TABLE</span> alembic_version <span class=\"comment\">(</span></div><div class=\"line\">\tversion_num VARCHAR(<span class=\"number\">32</span>) NOT NULL</div><div class=\"line\">);</div><div class=\"line\">COMMIT;</div><div class=\"line\">sqlite&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h3><p>检测对数据库的操作，生成迁移脚本保存到<code>migrations/versions/</code>中，用于数据库迁移</p>\n<p>不过按<a href=\"http://flask-migrate.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"external\">官方文档</a>所说，不一定能检测到所有对数据库的修改，所有需要自己对生成的迁移脚本进行检查，加上可能有遗漏的地方</p>\n<h3 id=\"upgrade\"><a href=\"#upgrade\" class=\"headerlink\" title=\"upgrade\"></a>upgrade</h3><p>用于把上述迁移运用到数据库中，即至此才会真正对数据库进行更新</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sqlite3 data-dev.sqlite</div><div class=\"line\">SQLite version 3.8.10.2 2015-05-20 18:17:19</div><div class=\"line\">Enter \".help\" for usage hints.</div><div class=\"line\">sqlite&gt; .dump</div><div class=\"line\">PRAGMA foreign_keys=OFF;</div><div class=\"line\">BEGIN TRANSACTION;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE alembic_version (</div><div class=\"line\">\tversion_num VARCHAR(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"alembic_version\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"string\">'bb488872a057'</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE roles (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\t<span class=\"keyword\">UNIQUE</span> (name)</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE users (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\temail VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tusername VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\trole_id INTEGER,</div><div class=\"line\">\tpassword_hash VARCHAR(<span class=\"number\">128</span>),</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\tFOREIGN <span class=\"keyword\">KEY</span>(role_id) REFERENCES roles (id)</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_email <span class=\"keyword\">ON</span> users (email);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_username <span class=\"keyword\">ON</span> users (username);</div><div class=\"line\">COMMIT;</div><div class=\"line\">sqlite&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"管理员角色\"><a href=\"#管理员角色\" class=\"headerlink\" title=\"管理员角色\"></a>管理员角色</h1><h2 id=\"遇到的问题-1\"><a href=\"#遇到的问题-1\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>学习到 10.3.2后，发现以管理员邮箱注册的帐号并不能打开<code>管理员级别的资料编辑器</code><br>手动查看数据库：<br><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"users\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'huamingrui@163.com'</span>,<span class=\"string\">'huamingrui'</span>,<span class=\"literal\">NULL</span>,<span class=\"string\">'pbkdf2:sha1:1000$wpqGMEz8$a3bf86fcb0be120a7510a8f702077eb2fdfa1980'</span>,<span class=\"number\">1</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"string\">'2016-05-17 14:17:48.930851'</span>,<span class=\"string\">'2016-05-17 14:19:00.735339'</span>);</div></pre></td></tr></table></figure></p>\n<p>发现<code>role_id</code>项为空，即角色没有被成功赋予</p>\n<h2 id=\"Role-insert-roles\"><a href=\"#Role-insert-roles\" class=\"headerlink\" title=\"Role.insert_roles()\"></a>Role.insert_roles()</h2><p>回去翻书，找到 9.3 最后的部分说到</p>\n<blockquote>\n<p>在你阅读下一章之前，最好重新创建或者更新开发数据库，如此一来，那些在实现角色和 权限之前创建的用户账户就被赋予了角色。</p>\n</blockquote>\n<p>然而实测发现，对于管理员用户，必须在注册之前就完成 9.1 最后的<code>Role.insert_roles()</code>步骤，才能成功为管理员邮箱用户赋予<code>管理员角色</code></p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ rm data-dev.sqlite</div><div class=\"line\">$ python manage.py db upgrade</div><div class=\"line\">INFO  [alembic.runtime.migration] Context impl SQLiteImpl.</div><div class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</div><div class=\"line\">INFO  [alembic.runtime.migration] Running upgrade  -&gt; 02ccb3e6a553, empty message</div><div class=\"line\">$ sqlite3 data-dev.sqlite</div><div class=\"line\">SQLite version 3.8.10.2 2015-05-20 18:17:19</div><div class=\"line\">Enter \".help\" for usage hints.</div><div class=\"line\">sqlite&gt; .dump</div><div class=\"line\">PRAGMA foreign_keys=OFF;</div><div class=\"line\">BEGIN TRANSACTION;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE alembic_version (</div><div class=\"line\">\tversion_num VARCHAR(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"alembic_version\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"string\">'02ccb3e6a553'</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE roles (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\t<span class=\"string\">\"default\"</span> <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tpermissions INTEGER,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\t<span class=\"keyword\">UNIQUE</span> (name),</div><div class=\"line\">\tCHECK (<span class=\"string\">\"default\"</span> <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE users (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\temail VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tusername VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\trole_id INTEGER,</div><div class=\"line\">\tpassword_hash VARCHAR(<span class=\"number\">128</span>),</div><div class=\"line\">\tconfirmed <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tlocation VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tabout_me TEXT,</div><div class=\"line\">\tmember_since DATETIME,</div><div class=\"line\">\tlast_seen DATETIME,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\tFOREIGN <span class=\"keyword\">KEY</span>(role_id) REFERENCES roles (id),</div><div class=\"line\">\tCHECK (confirmed <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> ix_roles_default <span class=\"keyword\">ON</span> roles (<span class=\"string\">\"default\"</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_email <span class=\"keyword\">ON</span> users (email);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_username <span class=\"keyword\">ON</span> users (username);</div><div class=\"line\">COMMIT;</div><div class=\"line\">sqlite&gt; ^D</div><div class=\"line\">$ python manage.py shell</div><div class=\"line\">&gt;&gt;&gt; Role.insert_roles()</div><div class=\"line\">&gt;&gt;&gt; Role.query.all()</div><div class=\"line\">[&lt;Role u'Moderator'&gt;, &lt;Role u'Administrator'&gt;, &lt;Role u'User'&gt;]</div><div class=\"line\">&gt;&gt;&gt; ^D</div><div class=\"line\">$ sqlite3 data-dev.sqlite</div><div class=\"line\">SQLite version 3.8.10.2 2015-05-20 18:17:19</div><div class=\"line\">Enter \".help\" for usage hints.</div><div class=\"line\">sqlite&gt; .dump</div><div class=\"line\">PRAGMA foreign_keys=OFF;</div><div class=\"line\">BEGIN TRANSACTION;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE alembic_version (</div><div class=\"line\">\tversion_num VARCHAR(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"alembic_version\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"string\">'02ccb3e6a553'</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE roles (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\t<span class=\"string\">\"default\"</span> <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tpermissions INTEGER,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\t<span class=\"keyword\">UNIQUE</span> (name),</div><div class=\"line\">\tCHECK (<span class=\"string\">\"default\"</span> <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'Moderator'</span>,<span class=\"number\">0</span>,<span class=\"number\">15</span>);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">2</span>,<span class=\"string\">'Administrator'</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">3</span>,<span class=\"string\">'User'</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE users (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\temail VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tusername VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\trole_id INTEGER,</div><div class=\"line\">\tpassword_hash VARCHAR(<span class=\"number\">128</span>),</div><div class=\"line\">\tconfirmed <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tlocation VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tabout_me TEXT,</div><div class=\"line\">\tmember_since DATETIME,</div><div class=\"line\">\tlast_seen DATETIME,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\tFOREIGN <span class=\"keyword\">KEY</span>(role_id) REFERENCES roles (id),</div><div class=\"line\">\tCHECK (confirmed <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> ix_roles_default <span class=\"keyword\">ON</span> roles (<span class=\"string\">\"default\"</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_email <span class=\"keyword\">ON</span> users (email);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_username <span class=\"keyword\">ON</span> users (username);</div><div class=\"line\">COMMIT;</div><div class=\"line\">sqlite&gt; ^D</div><div class=\"line\">$ python manage.py runserver</div></pre></td></tr></table></figure>\n<p>注册管理员邮箱<br><figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sqlite3 data-dev.sqlite</div><div class=\"line\">SQLite version 3.8.10.2 2015-05-20 18:17:19</div><div class=\"line\">Enter \".help\" for usage hints.</div><div class=\"line\">sqlite&gt; .dump</div><div class=\"line\">PRAGMA foreign_keys=OFF;</div><div class=\"line\">BEGIN TRANSACTION;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE alembic_version (</div><div class=\"line\">\tversion_num VARCHAR(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"alembic_version\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"string\">'02ccb3e6a553'</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE roles (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\t<span class=\"string\">\"default\"</span> <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tpermissions INTEGER,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\t<span class=\"keyword\">UNIQUE</span> (name),</div><div class=\"line\">\tCHECK (<span class=\"string\">\"default\"</span> <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'Moderator'</span>,<span class=\"number\">0</span>,<span class=\"number\">15</span>);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">2</span>,<span class=\"string\">'Administrator'</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">3</span>,<span class=\"string\">'User'</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE users (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\temail VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tusername VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\trole_id INTEGER,</div><div class=\"line\">\tpassword_hash VARCHAR(<span class=\"number\">128</span>),</div><div class=\"line\">\tconfirmed <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tlocation VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tabout_me TEXT,</div><div class=\"line\">\tmember_since DATETIME,</div><div class=\"line\">\tlast_seen DATETIME,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\tFOREIGN <span class=\"keyword\">KEY</span>(role_id) REFERENCES roles (id),</div><div class=\"line\">\tCHECK (confirmed <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"users\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'huamingrui@163.com'</span>,<span class=\"string\">'MrHua'</span>,<span class=\"number\">2</span>,<span class=\"string\">'pbkdf2:sha1:1000$tSmBVC7j$6f3d994eb5b6b455347b56d3112a4cac26fc97e1'</span>,<span class=\"number\">1</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"string\">'2016-05-17 14:34:36.781740'</span>,<span class=\"string\">'2016-05-17 14:52:08.764862'</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> ix_roles_default <span class=\"keyword\">ON</span> roles (<span class=\"string\">\"default\"</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_email <span class=\"keyword\">ON</span> users (email);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_username <span class=\"keyword\">ON</span> users (username);</div><div class=\"line\">COMMIT;</div><div class=\"line\">sqlite&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"更新列\"><a href=\"#更新列\" class=\"headerlink\" title=\"更新列\"></a>更新列</h1><h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>学习到 8.4.6 测试登录时</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">(venv) $ python manage<span class=\"selector-class\">.py</span> shell </div><div class=\"line\">&gt;&gt;&gt; u = User(email=<span class=\"string\">'john@example.com'</span>, username=<span class=\"string\">'john'</span>, password=<span class=\"string\">'cat'</span>) </div><div class=\"line\">&gt;&gt;&gt; db<span class=\"selector-class\">.session</span><span class=\"selector-class\">.add</span>(u) </div><div class=\"line\">&gt;&gt;&gt; db<span class=\"selector-class\">.session</span><span class=\"selector-class\">.commit</span>()</div></pre></td></tr></table></figure>\n<p>报错说表中无 email 列</p>\n<p>确认代码无误后，判断应该是没有成功更新 models.py 中新建的 email 列，简单尝试无果，决定重新看一遍相关内容加深理解，再着手解决</p>\n<h2 id=\"粗暴的更新方法\"><a href=\"#粗暴的更新方法\" class=\"headerlink\" title=\"粗暴的更新方法\"></a>粗暴的更新方法</h2><p>如果数据库表已经存在于数据库中， 那么 db.create_all() 不会重新创建或者更新这个表。如果修改模型后要把改动应用到现有的数据库中，这一特 性会带来不便。更新现有数据库表的粗暴方式是先删除旧表再重新创建：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; db.drop_all() </div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; db.create_all()</div></pre></td></tr></table></figure>\n<h2 id=\"使用-Flask-Migrate-实现数据库迁移\"><a href=\"#使用-Flask-Migrate-实现数据库迁移\" class=\"headerlink\" title=\"使用 Flask-Migrate 实现数据库迁移\"></a>使用 Flask-Migrate 实现数据库迁移</h2><blockquote>\n<p>更新表的更好方法是使用数据库迁移框架。源码版本控制工具可以跟踪源码文件的变化， 类似地，数据库迁移框架能跟踪数据库模式的变化，然后增量式的把变化应用到数据库中。</p>\n<p>SQLAlchemy 的主力开发人员编写了一个迁移框架，称为 Alembic（<a href=\"https://alembic.readthedocs\">https://alembic.readthedocs</a>. org/en/latest/index.html） 。 除 了 直 接 使 用 Alembic 之 外， Flask 程 序 还 可 使 用 Flask-Migrate （<a href=\"http://flask-migrate.readthedocs.org/en/latest/）扩展。这个扩展对\">http://flask-migrate.readthedocs.org/en/latest/）扩展。这个扩展对</a> Alembic 做了轻量级包装，并 集成到 Flask-Script 中，所有操作都通过 Flask-Script 命令完成。</p>\n</blockquote>\n<p>安装与配置略过不提<br>几次尝试后，方才对几个主要命令的实际作用有了正确的理解</p>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p>创建迁移仓库和脚本，并不会生成或更新数据库文件，<code>migrations/versions/</code>中为空，如果此时<code>upgrade</code>会生成一个只包含<code>alembic_version</code>表的数据库</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$</span> sqlite3 data-dev.sqlite</div><div class=\"line\">SQLite version <span class=\"number\">3.8</span><span class=\"number\">.10</span><span class=\"number\">.2</span> <span class=\"number\">2015</span><span class=\"number\">-05</span><span class=\"number\">-20</span> <span class=\"number\">18</span>:<span class=\"number\">17</span>:<span class=\"number\">19</span></div><div class=\"line\">Enter <span class=\"string\">\".help\"</span> <span class=\"keyword\">for</span> usage hints.</div><div class=\"line\">sqlite&gt; .dump</div><div class=\"line\">PRAGMA foreign_keys=OFF;</div><div class=\"line\">BEGIN TRANSACTION;</div><div class=\"line\">CREATE <span class=\"keyword\">TABLE</span> alembic_version <span class=\"comment\">(</span></div><div class=\"line\">\tversion_num VARCHAR(<span class=\"number\">32</span>) NOT NULL</div><div class=\"line\">);</div><div class=\"line\">COMMIT;</div><div class=\"line\">sqlite&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h3><p>检测对数据库的操作，生成迁移脚本保存到<code>migrations/versions/</code>中，用于数据库迁移</p>\n<p>不过按<a href=\"http://flask-migrate.readthedocs.io/en/latest/\">官方文档</a>所说，不一定能检测到所有对数据库的修改，所有需要自己对生成的迁移脚本进行检查，加上可能有遗漏的地方</p>\n<h3 id=\"upgrade\"><a href=\"#upgrade\" class=\"headerlink\" title=\"upgrade\"></a>upgrade</h3><p>用于把上述迁移运用到数据库中，即至此才会真正对数据库进行更新</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sqlite3 data-dev.sqlite</div><div class=\"line\">SQLite version 3.8.10.2 2015-05-20 18:17:19</div><div class=\"line\">Enter \".help\" for usage hints.</div><div class=\"line\">sqlite&gt; .dump</div><div class=\"line\">PRAGMA foreign_keys=OFF;</div><div class=\"line\">BEGIN TRANSACTION;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE alembic_version (</div><div class=\"line\">\tversion_num VARCHAR(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"alembic_version\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"string\">'bb488872a057'</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE roles (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\t<span class=\"keyword\">UNIQUE</span> (name)</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE users (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\temail VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tusername VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\trole_id INTEGER,</div><div class=\"line\">\tpassword_hash VARCHAR(<span class=\"number\">128</span>),</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\tFOREIGN <span class=\"keyword\">KEY</span>(role_id) REFERENCES roles (id)</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_email <span class=\"keyword\">ON</span> users (email);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_username <span class=\"keyword\">ON</span> users (username);</div><div class=\"line\">COMMIT;</div><div class=\"line\">sqlite&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"管理员角色\"><a href=\"#管理员角色\" class=\"headerlink\" title=\"管理员角色\"></a>管理员角色</h1><h2 id=\"遇到的问题-1\"><a href=\"#遇到的问题-1\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>学习到 10.3.2后，发现以管理员邮箱注册的帐号并不能打开<code>管理员级别的资料编辑器</code><br>手动查看数据库：<br><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"users\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'huamingrui@163.com'</span>,<span class=\"string\">'huamingrui'</span>,<span class=\"literal\">NULL</span>,<span class=\"string\">'pbkdf2:sha1:1000$wpqGMEz8$a3bf86fcb0be120a7510a8f702077eb2fdfa1980'</span>,<span class=\"number\">1</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"string\">'2016-05-17 14:17:48.930851'</span>,<span class=\"string\">'2016-05-17 14:19:00.735339'</span>);</div></pre></td></tr></table></figure></p>\n<p>发现<code>role_id</code>项为空，即角色没有被成功赋予</p>\n<h2 id=\"Role-insert-roles\"><a href=\"#Role-insert-roles\" class=\"headerlink\" title=\"Role.insert_roles()\"></a>Role.insert_roles()</h2><p>回去翻书，找到 9.3 最后的部分说到</p>\n<blockquote>\n<p>在你阅读下一章之前，最好重新创建或者更新开发数据库，如此一来，那些在实现角色和 权限之前创建的用户账户就被赋予了角色。</p>\n</blockquote>\n<p>然而实测发现，对于管理员用户，必须在注册之前就完成 9.1 最后的<code>Role.insert_roles()</code>步骤，才能成功为管理员邮箱用户赋予<code>管理员角色</code></p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ rm data-dev.sqlite</div><div class=\"line\">$ python manage.py db upgrade</div><div class=\"line\">INFO  [alembic.runtime.migration] Context impl SQLiteImpl.</div><div class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</div><div class=\"line\">INFO  [alembic.runtime.migration] Running upgrade  -&gt; 02ccb3e6a553, empty message</div><div class=\"line\">$ sqlite3 data-dev.sqlite</div><div class=\"line\">SQLite version 3.8.10.2 2015-05-20 18:17:19</div><div class=\"line\">Enter \".help\" for usage hints.</div><div class=\"line\">sqlite&gt; .dump</div><div class=\"line\">PRAGMA foreign_keys=OFF;</div><div class=\"line\">BEGIN TRANSACTION;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE alembic_version (</div><div class=\"line\">\tversion_num VARCHAR(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"alembic_version\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"string\">'02ccb3e6a553'</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE roles (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\t<span class=\"string\">\"default\"</span> <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tpermissions INTEGER,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\t<span class=\"keyword\">UNIQUE</span> (name),</div><div class=\"line\">\tCHECK (<span class=\"string\">\"default\"</span> <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE users (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\temail VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tusername VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\trole_id INTEGER,</div><div class=\"line\">\tpassword_hash VARCHAR(<span class=\"number\">128</span>),</div><div class=\"line\">\tconfirmed <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tlocation VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tabout_me TEXT,</div><div class=\"line\">\tmember_since DATETIME,</div><div class=\"line\">\tlast_seen DATETIME,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\tFOREIGN <span class=\"keyword\">KEY</span>(role_id) REFERENCES roles (id),</div><div class=\"line\">\tCHECK (confirmed <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> ix_roles_default <span class=\"keyword\">ON</span> roles (<span class=\"string\">\"default\"</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_email <span class=\"keyword\">ON</span> users (email);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_username <span class=\"keyword\">ON</span> users (username);</div><div class=\"line\">COMMIT;</div><div class=\"line\">sqlite&gt; ^D</div><div class=\"line\">$ python manage.py shell</div><div class=\"line\">&gt;&gt;&gt; Role.insert_roles()</div><div class=\"line\">&gt;&gt;&gt; Role.query.all()</div><div class=\"line\">[&lt;Role u'Moderator'&gt;, &lt;Role u'Administrator'&gt;, &lt;Role u'User'&gt;]</div><div class=\"line\">&gt;&gt;&gt; ^D</div><div class=\"line\">$ sqlite3 data-dev.sqlite</div><div class=\"line\">SQLite version 3.8.10.2 2015-05-20 18:17:19</div><div class=\"line\">Enter \".help\" for usage hints.</div><div class=\"line\">sqlite&gt; .dump</div><div class=\"line\">PRAGMA foreign_keys=OFF;</div><div class=\"line\">BEGIN TRANSACTION;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE alembic_version (</div><div class=\"line\">\tversion_num VARCHAR(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"alembic_version\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"string\">'02ccb3e6a553'</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE roles (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\t<span class=\"string\">\"default\"</span> <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tpermissions INTEGER,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\t<span class=\"keyword\">UNIQUE</span> (name),</div><div class=\"line\">\tCHECK (<span class=\"string\">\"default\"</span> <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'Moderator'</span>,<span class=\"number\">0</span>,<span class=\"number\">15</span>);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">2</span>,<span class=\"string\">'Administrator'</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">3</span>,<span class=\"string\">'User'</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE users (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\temail VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tusername VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\trole_id INTEGER,</div><div class=\"line\">\tpassword_hash VARCHAR(<span class=\"number\">128</span>),</div><div class=\"line\">\tconfirmed <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tlocation VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tabout_me TEXT,</div><div class=\"line\">\tmember_since DATETIME,</div><div class=\"line\">\tlast_seen DATETIME,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\tFOREIGN <span class=\"keyword\">KEY</span>(role_id) REFERENCES roles (id),</div><div class=\"line\">\tCHECK (confirmed <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> ix_roles_default <span class=\"keyword\">ON</span> roles (<span class=\"string\">\"default\"</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_email <span class=\"keyword\">ON</span> users (email);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_username <span class=\"keyword\">ON</span> users (username);</div><div class=\"line\">COMMIT;</div><div class=\"line\">sqlite&gt; ^D</div><div class=\"line\">$ python manage.py runserver</div></pre></td></tr></table></figure>\n<p>注册管理员邮箱<br><figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sqlite3 data-dev.sqlite</div><div class=\"line\">SQLite version 3.8.10.2 2015-05-20 18:17:19</div><div class=\"line\">Enter \".help\" for usage hints.</div><div class=\"line\">sqlite&gt; .dump</div><div class=\"line\">PRAGMA foreign_keys=OFF;</div><div class=\"line\">BEGIN TRANSACTION;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE alembic_version (</div><div class=\"line\">\tversion_num VARCHAR(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"alembic_version\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"string\">'02ccb3e6a553'</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE roles (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\t<span class=\"string\">\"default\"</span> <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tpermissions INTEGER,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\t<span class=\"keyword\">UNIQUE</span> (name),</div><div class=\"line\">\tCHECK (<span class=\"string\">\"default\"</span> <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'Moderator'</span>,<span class=\"number\">0</span>,<span class=\"number\">15</span>);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">2</span>,<span class=\"string\">'Administrator'</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"roles\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">3</span>,<span class=\"string\">'User'</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> TABLE users (</div><div class=\"line\">\tid INTEGER <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\temail VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tusername VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\trole_id INTEGER,</div><div class=\"line\">\tpassword_hash VARCHAR(<span class=\"number\">128</span>),</div><div class=\"line\">\tconfirmed <span class=\"keyword\">BOOLEAN</span>,</div><div class=\"line\">\tname VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tlocation VARCHAR(<span class=\"number\">64</span>),</div><div class=\"line\">\tabout_me TEXT,</div><div class=\"line\">\tmember_since DATETIME,</div><div class=\"line\">\tlast_seen DATETIME,</div><div class=\"line\">\t<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (id),</div><div class=\"line\">\tFOREIGN <span class=\"keyword\">KEY</span>(role_id) REFERENCES roles (id),</div><div class=\"line\">\tCHECK (confirmed <span class=\"keyword\">IN</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">\"users\"</span> <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">'huamingrui@163.com'</span>,<span class=\"string\">'MrHua'</span>,<span class=\"number\">2</span>,<span class=\"string\">'pbkdf2:sha1:1000$tSmBVC7j$6f3d994eb5b6b455347b56d3112a4cac26fc97e1'</span>,<span class=\"number\">1</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"string\">'2016-05-17 14:34:36.781740'</span>,<span class=\"string\">'2016-05-17 14:52:08.764862'</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> ix_roles_default <span class=\"keyword\">ON</span> roles (<span class=\"string\">\"default\"</span>);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_email <span class=\"keyword\">ON</span> users (email);</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> ix_users_username <span class=\"keyword\">ON</span> users (username);</div><div class=\"line\">COMMIT;</div><div class=\"line\">sqlite&gt;</div></pre></td></tr></table></figure></p>\n"},{"title":"Python-sorted函数中key的用法","date":"2016-05-19T01:02:08.000Z","_content":"\nsorted函数的可用参数如下\n> sorted(iterable[, cmp[, key[, reverse]]])\n\n其它几个还好理解，就是`key`的用法经常会忘记，所以记录一下备用\n\n[文档](http://devdocs.io/python~2.7/library/functions#sorted)中说：\n> key specifies a function of one argument that is used to extract a comparison key from each list element: key=str.lower. The default value is None (compare the elements directly).\n\n我的理解是   \n`key`提供了一个函数，以`iterable`对象中的元素为唯一参数，返回一个与原元素一一对应的 key 值   \n然后再对以这些 key 值为元素的`iterable`进行排序   \n最后将这些 key 值替换回对应的原元素   \n排序完成\n   \n需要注意的就是`False < True`\n\n然后是实例（参考https://segmentfault.com/q/1010000005111826/a-1020000005112829）\n\n\n\n```py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ns = 'aB23'\n\ndef sorted_with_key(s, key):\n    s = sorted(s, key=key)\n    print s\n    print 'keys: ',\n    print [key(x) for x in s]\n\nprint '\\nstr.lower'\nsorted_with_key(s, str.lower)\n\nprint '\\nstr.islower'\nsorted_with_key(s, str.islower)\n\nprint '\\nlambda x: x.isdigit() and int(x) % 2 == 0'\nsorted_with_key(s, lambda x: x.isdigit() and int(x) % 2 == 0)\n\nprint '\\nlambda x: x.isdigit(), x.isdigit() and int(x) % 2==0, x.isupper(), x.islower(), x'\n# 排序:小写-大写-奇数-偶数\nsorted_with_key(s, lambda x: (x.isdigit(), x.isdigit() and int(x) %\n                              2 == 0, x.isupper(), x.islower(), x))\n```\n\noutput\n\n```\n\nstr.lower\n['2', '3', 'a', 'B']\nkeys:  ['2', '3', 'a', 'b']\n\nstr.islower\n['B', '2', '3', 'a']\nkeys:  [False, False, False, True]\n\nlambda x: x.isdigit() and int(x) % 2 == 0\n['a', 'B', '3', '2']\nkeys:  [False, False, False, True]\n\nlambda x: (x.isdigit(), x.isdigit() and int(x) % 2==0, x.isupper(), x.islower(), x)\n['a', 'B', '3', '2']\nkeys:  [(False, False, False, True, 'a'), (False, False, True, False, 'B'), (True, False, False, False, '3'), (True, True, False, False, '2')]\n\n```\n\n\n# 2016.7.9 补充\n\n今天看了 cookbook 5.2，Python 2.4 之前是不支持`key`的，书中提供了一个类似的思路，感觉对理解`key`的实现很有帮助，摘录如下：\n\n```\ndef case_insensitive_sorted(string_list):\n    auxiliary_list = [(x.lower(), x) for x in string_list] # decorate\n    auxiliary_list.sort()                                  # sort\n    return [x[1] for x in auxiliary_list]                  # undecorate\n```","source":"_posts/Python-sorted函数中key的用法.md","raw":"---\ntitle: Python-sorted函数中key的用法\ndate: 2016-05-19 09:02:08\ncategory: Python\ntags: [Python, sorted, key]\n---\n\nsorted函数的可用参数如下\n> sorted(iterable[, cmp[, key[, reverse]]])\n\n其它几个还好理解，就是`key`的用法经常会忘记，所以记录一下备用\n\n[文档](http://devdocs.io/python~2.7/library/functions#sorted)中说：\n> key specifies a function of one argument that is used to extract a comparison key from each list element: key=str.lower. The default value is None (compare the elements directly).\n\n我的理解是   \n`key`提供了一个函数，以`iterable`对象中的元素为唯一参数，返回一个与原元素一一对应的 key 值   \n然后再对以这些 key 值为元素的`iterable`进行排序   \n最后将这些 key 值替换回对应的原元素   \n排序完成\n   \n需要注意的就是`False < True`\n\n然后是实例（参考https://segmentfault.com/q/1010000005111826/a-1020000005112829）\n\n\n\n```py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ns = 'aB23'\n\ndef sorted_with_key(s, key):\n    s = sorted(s, key=key)\n    print s\n    print 'keys: ',\n    print [key(x) for x in s]\n\nprint '\\nstr.lower'\nsorted_with_key(s, str.lower)\n\nprint '\\nstr.islower'\nsorted_with_key(s, str.islower)\n\nprint '\\nlambda x: x.isdigit() and int(x) % 2 == 0'\nsorted_with_key(s, lambda x: x.isdigit() and int(x) % 2 == 0)\n\nprint '\\nlambda x: x.isdigit(), x.isdigit() and int(x) % 2==0, x.isupper(), x.islower(), x'\n# 排序:小写-大写-奇数-偶数\nsorted_with_key(s, lambda x: (x.isdigit(), x.isdigit() and int(x) %\n                              2 == 0, x.isupper(), x.islower(), x))\n```\n\noutput\n\n```\n\nstr.lower\n['2', '3', 'a', 'B']\nkeys:  ['2', '3', 'a', 'b']\n\nstr.islower\n['B', '2', '3', 'a']\nkeys:  [False, False, False, True]\n\nlambda x: x.isdigit() and int(x) % 2 == 0\n['a', 'B', '3', '2']\nkeys:  [False, False, False, True]\n\nlambda x: (x.isdigit(), x.isdigit() and int(x) % 2==0, x.isupper(), x.islower(), x)\n['a', 'B', '3', '2']\nkeys:  [(False, False, False, True, 'a'), (False, False, True, False, 'B'), (True, False, False, False, '3'), (True, True, False, False, '2')]\n\n```\n\n\n# 2016.7.9 补充\n\n今天看了 cookbook 5.2，Python 2.4 之前是不支持`key`的，书中提供了一个类似的思路，感觉对理解`key`的实现很有帮助，摘录如下：\n\n```\ndef case_insensitive_sorted(string_list):\n    auxiliary_list = [(x.lower(), x) for x in string_list] # decorate\n    auxiliary_list.sort()                                  # sort\n    return [x[1] for x in auxiliary_list]                  # undecorate\n```","slug":"Python-sorted函数中key的用法","published":1,"updated":"2016-07-09T09:56:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5ftk00053npxvgtwcdg7","content":"<p>sorted函数的可用参数如下</p>\n<blockquote>\n<p>sorted(iterable[, cmp[, key[, reverse]]])</p>\n</blockquote>\n<p>其它几个还好理解，就是<code>key</code>的用法经常会忘记，所以记录一下备用</p>\n<p><a href=\"http://devdocs.io/python~2.7/library/functions#sorted\" target=\"_blank\" rel=\"external\">文档</a>中说：</p>\n<blockquote>\n<p>key specifies a function of one argument that is used to extract a comparison key from each list element: key=str.lower. The default value is None (compare the elements directly).</p>\n</blockquote>\n<p>我的理解是<br><code>key</code>提供了一个函数，以<code>iterable</code>对象中的元素为唯一参数，返回一个与原元素一一对应的 key 值<br>然后再对以这些 key 值为元素的<code>iterable</code>进行排序<br>最后将这些 key 值替换回对应的原元素<br>排序完成</p>\n<p>需要注意的就是<code>False &lt; True</code></p>\n<p>然后是实例（参考<a href=\"https://segmentfault.com/q/1010000005111826/a-1020000005112829）\" target=\"_blank\" rel=\"external\">https://segmentfault.com/q/1010000005111826/a-1020000005112829）</a></p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">s = <span class=\"string\">'aB23'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sorted_with_key</span><span class=\"params\">(s, key)</span>:</span></div><div class=\"line\">    s = sorted(s, key=key)</div><div class=\"line\">    <span class=\"keyword\">print</span> s</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'keys: '</span>,</div><div class=\"line\">    <span class=\"keyword\">print</span> [key(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> s]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'\\nstr.lower'</span></div><div class=\"line\">sorted_with_key(s, str.lower)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'\\nstr.islower'</span></div><div class=\"line\">sorted_with_key(s, str.islower)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'\\nlambda x: x.isdigit() and int(x) % 2 == 0'</span></div><div class=\"line\">sorted_with_key(s, <span class=\"keyword\">lambda</span> x: x.isdigit() <span class=\"keyword\">and</span> int(x) % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'\\nlambda x: x.isdigit(), x.isdigit() and int(x) % 2==0, x.isupper(), x.islower(), x'</span></div><div class=\"line\"><span class=\"comment\"># 排序:小写-大写-奇数-偶数</span></div><div class=\"line\">sorted_with_key(s, <span class=\"keyword\">lambda</span> x: (x.isdigit(), x.isdigit() <span class=\"keyword\">and</span> int(x) %</div><div class=\"line\">                              <span class=\"number\">2</span> == <span class=\"number\">0</span>, x.isupper(), x.islower(), x))</div></pre></td></tr></table></figure>\n<p>output</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">str.lower</div><div class=\"line\">[<span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'B'</span>]</div><div class=\"line\">keys:  [<span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]</div><div class=\"line\"></div><div class=\"line\">str.islower</div><div class=\"line\">[<span class=\"string\">'B'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'a'</span>]</div><div class=\"line\">keys:  [<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">True</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">lambda</span> x: x.isdigit() <span class=\"keyword\">and</span> int(x) % <span class=\"number\">2</span> == <span class=\"number\">0</span></div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'2'</span>]</div><div class=\"line\">keys:  [<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">True</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">lambda</span> x: (x.isdigit(), x.isdigit() <span class=\"keyword\">and</span> int(x) % <span class=\"number\">2</span>==<span class=\"number\">0</span>, x.isupper(), x.islower(), x)</div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'2'</span>]</div><div class=\"line\">keys:  [(<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">True</span>, <span class=\"string\">'a'</span>), (<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">True</span>, <span class=\"keyword\">False</span>, <span class=\"string\">'B'</span>), (<span class=\"keyword\">True</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"string\">'3'</span>), (<span class=\"keyword\">True</span>, <span class=\"keyword\">True</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"string\">'2'</span>)]</div></pre></td></tr></table></figure>\n<h1 id=\"2016-7-9-补充\"><a href=\"#2016-7-9-补充\" class=\"headerlink\" title=\"2016.7.9 补充\"></a>2016.7.9 补充</h1><p>今天看了 cookbook 5.2，Python 2.4 之前是不支持<code>key</code>的，书中提供了一个类似的思路，感觉对理解<code>key</code>的实现很有帮助，摘录如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">case_insensitive_sorted</span><span class=\"params\">(string_list)</span>:</span></div><div class=\"line\">    auxiliary_list = [(x.lower(), x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> string_list] <span class=\"comment\"># decorate</span></div><div class=\"line\">    auxiliary_list.sort()                                  <span class=\"comment\"># sort</span></div><div class=\"line\">    <span class=\"keyword\">return</span> [x[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> auxiliary_list]                  <span class=\"comment\"># undecorate</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p>sorted函数的可用参数如下</p>\n<blockquote>\n<p>sorted(iterable[, cmp[, key[, reverse]]])</p>\n</blockquote>\n<p>其它几个还好理解，就是<code>key</code>的用法经常会忘记，所以记录一下备用</p>\n<p><a href=\"http://devdocs.io/python~2.7/library/functions#sorted\">文档</a>中说：</p>\n<blockquote>\n<p>key specifies a function of one argument that is used to extract a comparison key from each list element: key=str.lower. The default value is None (compare the elements directly).</p>\n</blockquote>\n<p>我的理解是<br><code>key</code>提供了一个函数，以<code>iterable</code>对象中的元素为唯一参数，返回一个与原元素一一对应的 key 值<br>然后再对以这些 key 值为元素的<code>iterable</code>进行排序<br>最后将这些 key 值替换回对应的原元素<br>排序完成</p>\n<p>需要注意的就是<code>False &lt; True</code></p>\n<p>然后是实例（参考<a href=\"https://segmentfault.com/q/1010000005111826/a-1020000005112829）\">https://segmentfault.com/q/1010000005111826/a-1020000005112829）</a></p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">s = <span class=\"string\">'aB23'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sorted_with_key</span><span class=\"params\">(s, key)</span>:</span></div><div class=\"line\">    s = sorted(s, key=key)</div><div class=\"line\">    <span class=\"keyword\">print</span> s</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'keys: '</span>,</div><div class=\"line\">    <span class=\"keyword\">print</span> [key(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> s]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'\\nstr.lower'</span></div><div class=\"line\">sorted_with_key(s, str.lower)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'\\nstr.islower'</span></div><div class=\"line\">sorted_with_key(s, str.islower)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'\\nlambda x: x.isdigit() and int(x) % 2 == 0'</span></div><div class=\"line\">sorted_with_key(s, <span class=\"keyword\">lambda</span> x: x.isdigit() <span class=\"keyword\">and</span> int(x) % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'\\nlambda x: x.isdigit(), x.isdigit() and int(x) % 2==0, x.isupper(), x.islower(), x'</span></div><div class=\"line\"><span class=\"comment\"># 排序:小写-大写-奇数-偶数</span></div><div class=\"line\">sorted_with_key(s, <span class=\"keyword\">lambda</span> x: (x.isdigit(), x.isdigit() <span class=\"keyword\">and</span> int(x) %</div><div class=\"line\">                              <span class=\"number\">2</span> == <span class=\"number\">0</span>, x.isupper(), x.islower(), x))</div></pre></td></tr></table></figure>\n<p>output</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">str.lower</div><div class=\"line\">[<span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'B'</span>]</div><div class=\"line\">keys:  [<span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]</div><div class=\"line\"></div><div class=\"line\">str.islower</div><div class=\"line\">[<span class=\"string\">'B'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'a'</span>]</div><div class=\"line\">keys:  [<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">True</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">lambda</span> x: x.isdigit() <span class=\"keyword\">and</span> int(x) % <span class=\"number\">2</span> == <span class=\"number\">0</span></div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'2'</span>]</div><div class=\"line\">keys:  [<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">True</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">lambda</span> x: (x.isdigit(), x.isdigit() <span class=\"keyword\">and</span> int(x) % <span class=\"number\">2</span>==<span class=\"number\">0</span>, x.isupper(), x.islower(), x)</div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'2'</span>]</div><div class=\"line\">keys:  [(<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">True</span>, <span class=\"string\">'a'</span>), (<span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">True</span>, <span class=\"keyword\">False</span>, <span class=\"string\">'B'</span>), (<span class=\"keyword\">True</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"string\">'3'</span>), (<span class=\"keyword\">True</span>, <span class=\"keyword\">True</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"string\">'2'</span>)]</div></pre></td></tr></table></figure>\n<h1 id=\"2016-7-9-补充\"><a href=\"#2016-7-9-补充\" class=\"headerlink\" title=\"2016.7.9 补充\"></a>2016.7.9 补充</h1><p>今天看了 cookbook 5.2，Python 2.4 之前是不支持<code>key</code>的，书中提供了一个类似的思路，感觉对理解<code>key</code>的实现很有帮助，摘录如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">case_insensitive_sorted</span><span class=\"params\">(string_list)</span>:</span></div><div class=\"line\">    auxiliary_list = [(x.lower(), x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> string_list] <span class=\"comment\"># decorate</span></div><div class=\"line\">    auxiliary_list.sort()                                  <span class=\"comment\"># sort</span></div><div class=\"line\">    <span class=\"keyword\">return</span> [x[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> auxiliary_list]                  <span class=\"comment\"># undecorate</span></div></pre></td></tr></table></figure>"},{"title":"Linux x86 elf 程序启动过程","date":"2017-03-16T07:37:27.000Z","_content":"\n\n\nKali rolling x86-64 环境，默认动态链接    \n参考 32 位： http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html \n\n流程图如下：\n\n![流程图](http://dbp-consulting.com/tutorials/debugging/images/callgraph.png)\n\n64 位草图\n\n![](https://ww3.sinaimg.cn/large/006tNbRwly1fdunwuca6tj31120kuwro.jpg)\n\n# 最简单的 main\n\n```prog1.c\nint main()\n{\n}\n```\n\n`gcc -ggdb -o prog1 prog1.c`\n\n# execve\n\n运行程序时，shell 或者 gui 调用 execve() 函数触发系统调用：\n\n- 系统会分配栈区并将 argc, argv, envp 压栈\n- 按照 shell 设定 FD\n- 装载器负责重定位和调用`preinitializers`（图中`preinitarray1..n`）\n- 从程序代码段中 _start 位置开始执行程序\n\n# _start\n\n`_start` 是程序执行的初始位置，通过`objdump -d prog1`查看汇编\n\n```assembly\n00000000004003b0 <_start>:\n  4003b0:       31 ed                   xor    %ebp,%ebp\n  4003b2:       49 89 d1                mov    %rdx,%r9                 # argv\n  4003b5:       5e                      pop    %rsi                     # argc\n  4003b6:       48 89 e2                mov    %rsp,%rdx                # linker destructor\n  4003b9:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n  4003bd:       50                      push   %rax\n  4003be:       54                      push   %rsp\n  4003bf:       49 c7 c0 30 05 40 00    mov    $0x400530,%r8            # <__libc_csu_fini>\n  4003c6:       48 c7 c1 c0 04 40 00    mov    $0x4004c0,%rcx           # <__libc_csu_init>\n  4003cd:       48 c7 c7 a6 04 40 00    mov    $0x4004a6,%rdi           # <main>\n  4003d4:       ff 15 16 0c 20 00       callq  *0x200c16(%rip)        # 600ff0 <__libc_start_main@GLIBC_2.2.5>\n  4003da:       f4                      hlt\n  4003db:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n```\n\n`_start`的作用就是配置`__libc_start_main`的参数并进行调用：\n\n- `xor %ebp, %ebp`用于将 `%ebp` 清零，同时作为最外层标记\n\n- 对 `%rdi`, `%rsi`, `%rdx`, `%rcx`, `%r8`, `%r9` 的操作均为传参，因为共 7 个参数，还用到了栈来传递第一个参数\n    1. `main`地址, 由`__libc_start_main`调用, 另外在程序终止后`main`的返回值会由`__libc_start_main`传递给`exit`\n    2. `argc`\n    3. `argv`\n    4. `__libc_csu_init`\n    5. `__libc_csu_fini`\n    6. Destructor of dynamic linker. Registered by __libc_start_main with __cxat_exit()\n       to call the FINI for dynamic libraries that got loaded before us.\n    7. 栈 - 函数调用前的`%rsp`\n\n- 为了[提升访存效率](http://coolshell.cn/articles/11377.html)，编译器通常采用 16B 对齐。为了保证函数调用时的新栈帧是 16B 对齐的，使用`and`指令将 %esp 对齐。\n\n- 同时，为了将 %esp 保存在 16B 对齐的位置，使用`push %rax`提前填充 8B\n\n`_start`调用`__libc_start_main`前的状态:\n\n![before __libc_start_main](https://ww3.sinaimg.cn/large/006tNbRwly1fdu8v5ggcqj30ze138n64.jpg)\n\n# __libc_start_main\n\n`__libc_start_main`定义如下：\n\n```csu/libc-start.c\nint __libc_start_main(  \n    int (*main) (int, char * *, char * *),\n    int argc, \n    char * * ubp_av,\n    void (*init) (void),\n    void (*fini) (void),\n    void (*rtld_fini) (void),\n    void (* stack_end)\n );\n```\n\n\n`main`的完整参数调用应该是`int main(int argc, char** argv, char** envp)`, 但是`__libc_start_main`中却并不包含 `envp`, 因为`envp`可以由`argc`和`argv`计算得到\n\n## ELF auxiliary vector\n\n使用 gdb 调试 prog1, 在`_start`处下断点, 运行初始状态如下:\n![_start](https://ww4.sinaimg.cn/large/006tNbRwly1fdtk4hiplwj30za13u145.jpg)\n可以看到从栈顶向栈底依次放置的是: argc, argv, 0x0, 环境变量等, 即[`ELF 辅助向量`](http://articles.manugarg.com/aboutelfauxiliaryvectors.html). \n\n## __libc_start_main 的主要功能\n\n- setuid, setgid\n\n- 启动线程\n\n- 寄存`fini`和`rtld_fini`的参数, 等待`at_exit`调用\n\n- 调用`__libc_csu_init`\n\n- 调用`main`\n\n- 调用`exit`\n\n  ​\n\n# __libc_csu_init\n\n![调用__libc_csu_init之前](https://ww2.sinaimg.cn/large/006tNbRwly1fdua01wgboj30zg124tj5.jpg)\n\n```csu/elf-init.c\nvoid __libc_csu_init (int argc, char **argv, char **envp)\n{\n\n  _init ();\n\n  const size_t size = __init_array_end - __init_array_start;\n  for (size_t i = 0; i < size; i++)\n      (*__init_array_start [i]) (argc, argv, envp);\n}\n```\n```assembly\n00000000004004c0 <__libc_csu_init>:\n  4004c0:\t41 57                \tpush   %r15\n  4004c2:\t41 56                \tpush   %r14\n  4004c4:\t41 89 ff             \tmov    %edi,%r15d\n  4004c7:\t41 55                \tpush   %r13\n  4004c9:\t41 54                \tpush   %r12\n  4004cb:\t4c 8d 25 76 09 20 00 \tlea    0x200976(%rip),%r12        # 600e48 <__frame_dummy_init_array_entry>\n  4004d2:\t55                   \tpush   %rbp\n  4004d3:\t48 8d 2d 76 09 20 00 \tlea    0x200976(%rip),%rbp        # 600e50 <__init_array_end>\n  4004da:\t53                   \tpush   %rbx\n  4004db:\t49 89 f6             \tmov    %rsi,%r14\n  4004de:\t49 89 d5             \tmov    %rdx,%r13\n  4004e1:\t4c 29 e5             \tsub    %r12,%rbp\n  4004e4:\t48 83 ec 08          \tsub    $0x8,%rsp\n  4004e8:\t48 c1 fd 03          \tsar    $0x3,%rbp\n  4004ec:\te8 9f fe ff ff       \tcallq  400390 <_init>\n  4004f1:\t48 85 ed             \ttest   %rbp,%rbp\n  4004f4:\t74 20                \tje     400516 <__libc_csu_init+0x56>\n  4004f6:\t31 db                \txor    %ebx,%ebx\n  4004f8:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n  4004ff:\t00\n  400500:\t4c 89 ea             \tmov    %r13,%rdx\n  400503:\t4c 89 f6             \tmov    %r14,%rsi\n  400506:\t44 89 ff             \tmov    %r15d,%edi\n  400509:\t41 ff 14 dc          \tcallq  *(%r12,%rbx,8)\n  40050d:\t48 83 c3 01          \tadd    $0x1,%rbx\n  400511:\t48 39 dd             \tcmp    %rbx,%rbp\n  400514:\t75 ea                \tjne    400500 <__libc_csu_init+0x40>\n  400516:\t48 83 c4 08          \tadd    $0x8,%rsp\n  40051a:\t5b                   \tpop    %rbx\n  40051b:\t5d                   \tpop    %rbp\n  40051c:\t41 5c                \tpop    %r12\n  40051e:\t41 5d                \tpop    %r13\n  400520:\t41 5e                \tpop    %r14\n  400522:\t41 5f                \tpop    %r15\n  400524:\tc3                   \tretq\n  400525:\t90                   \tnop\n  400526:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  40052d:\t00 00 00\n\n```\n\n```assembly\n0000000000400390 <_init>:\n  400390:\t48 83 ec 08          \tsub    $0x8,%rsp\n  400394:\t48 8b 05 5d 0c 20 00 \tmov    0x200c5d(%rip),%rax        # 600ff8 <__gmon_start__>\n  40039b:\t48 85 c0             \ttest   %rax,%rax\n  40039e:\t74 02                \tje     4003a2 <_init+0x12>\n  4003a0:\tff d0                \tcallq  *%rax\n  4003a2:\t48 83 c4 08          \tadd    $0x8,%rsp\n  4003a6:\tc3                   \tretq\n```\n`__libc_csu_init`返回`__libc_start_main`前:\n\n![](https://ww2.sinaimg.cn/large/006tNbRwly1fduntp9dfcj30z412caip.jpg)\n\n","source":"_posts/Linux程序启动过程.md","raw":"---\ntitle: Linux x86 elf 程序启动过程\ndate: 2017-03-16 15:37:27\ncategory: Linux\ntags:\n- Linux\n- x86\n- elf\n- main\n- libc\n- start\n- init\n- gdb\n---\n\n\n\nKali rolling x86-64 环境，默认动态链接    \n参考 32 位： http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html \n\n流程图如下：\n\n![流程图](http://dbp-consulting.com/tutorials/debugging/images/callgraph.png)\n\n64 位草图\n\n![](https://ww3.sinaimg.cn/large/006tNbRwly1fdunwuca6tj31120kuwro.jpg)\n\n# 最简单的 main\n\n```prog1.c\nint main()\n{\n}\n```\n\n`gcc -ggdb -o prog1 prog1.c`\n\n# execve\n\n运行程序时，shell 或者 gui 调用 execve() 函数触发系统调用：\n\n- 系统会分配栈区并将 argc, argv, envp 压栈\n- 按照 shell 设定 FD\n- 装载器负责重定位和调用`preinitializers`（图中`preinitarray1..n`）\n- 从程序代码段中 _start 位置开始执行程序\n\n# _start\n\n`_start` 是程序执行的初始位置，通过`objdump -d prog1`查看汇编\n\n```assembly\n00000000004003b0 <_start>:\n  4003b0:       31 ed                   xor    %ebp,%ebp\n  4003b2:       49 89 d1                mov    %rdx,%r9                 # argv\n  4003b5:       5e                      pop    %rsi                     # argc\n  4003b6:       48 89 e2                mov    %rsp,%rdx                # linker destructor\n  4003b9:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n  4003bd:       50                      push   %rax\n  4003be:       54                      push   %rsp\n  4003bf:       49 c7 c0 30 05 40 00    mov    $0x400530,%r8            # <__libc_csu_fini>\n  4003c6:       48 c7 c1 c0 04 40 00    mov    $0x4004c0,%rcx           # <__libc_csu_init>\n  4003cd:       48 c7 c7 a6 04 40 00    mov    $0x4004a6,%rdi           # <main>\n  4003d4:       ff 15 16 0c 20 00       callq  *0x200c16(%rip)        # 600ff0 <__libc_start_main@GLIBC_2.2.5>\n  4003da:       f4                      hlt\n  4003db:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n```\n\n`_start`的作用就是配置`__libc_start_main`的参数并进行调用：\n\n- `xor %ebp, %ebp`用于将 `%ebp` 清零，同时作为最外层标记\n\n- 对 `%rdi`, `%rsi`, `%rdx`, `%rcx`, `%r8`, `%r9` 的操作均为传参，因为共 7 个参数，还用到了栈来传递第一个参数\n    1. `main`地址, 由`__libc_start_main`调用, 另外在程序终止后`main`的返回值会由`__libc_start_main`传递给`exit`\n    2. `argc`\n    3. `argv`\n    4. `__libc_csu_init`\n    5. `__libc_csu_fini`\n    6. Destructor of dynamic linker. Registered by __libc_start_main with __cxat_exit()\n       to call the FINI for dynamic libraries that got loaded before us.\n    7. 栈 - 函数调用前的`%rsp`\n\n- 为了[提升访存效率](http://coolshell.cn/articles/11377.html)，编译器通常采用 16B 对齐。为了保证函数调用时的新栈帧是 16B 对齐的，使用`and`指令将 %esp 对齐。\n\n- 同时，为了将 %esp 保存在 16B 对齐的位置，使用`push %rax`提前填充 8B\n\n`_start`调用`__libc_start_main`前的状态:\n\n![before __libc_start_main](https://ww3.sinaimg.cn/large/006tNbRwly1fdu8v5ggcqj30ze138n64.jpg)\n\n# __libc_start_main\n\n`__libc_start_main`定义如下：\n\n```csu/libc-start.c\nint __libc_start_main(  \n    int (*main) (int, char * *, char * *),\n    int argc, \n    char * * ubp_av,\n    void (*init) (void),\n    void (*fini) (void),\n    void (*rtld_fini) (void),\n    void (* stack_end)\n );\n```\n\n\n`main`的完整参数调用应该是`int main(int argc, char** argv, char** envp)`, 但是`__libc_start_main`中却并不包含 `envp`, 因为`envp`可以由`argc`和`argv`计算得到\n\n## ELF auxiliary vector\n\n使用 gdb 调试 prog1, 在`_start`处下断点, 运行初始状态如下:\n![_start](https://ww4.sinaimg.cn/large/006tNbRwly1fdtk4hiplwj30za13u145.jpg)\n可以看到从栈顶向栈底依次放置的是: argc, argv, 0x0, 环境变量等, 即[`ELF 辅助向量`](http://articles.manugarg.com/aboutelfauxiliaryvectors.html). \n\n## __libc_start_main 的主要功能\n\n- setuid, setgid\n\n- 启动线程\n\n- 寄存`fini`和`rtld_fini`的参数, 等待`at_exit`调用\n\n- 调用`__libc_csu_init`\n\n- 调用`main`\n\n- 调用`exit`\n\n  ​\n\n# __libc_csu_init\n\n![调用__libc_csu_init之前](https://ww2.sinaimg.cn/large/006tNbRwly1fdua01wgboj30zg124tj5.jpg)\n\n```csu/elf-init.c\nvoid __libc_csu_init (int argc, char **argv, char **envp)\n{\n\n  _init ();\n\n  const size_t size = __init_array_end - __init_array_start;\n  for (size_t i = 0; i < size; i++)\n      (*__init_array_start [i]) (argc, argv, envp);\n}\n```\n```assembly\n00000000004004c0 <__libc_csu_init>:\n  4004c0:\t41 57                \tpush   %r15\n  4004c2:\t41 56                \tpush   %r14\n  4004c4:\t41 89 ff             \tmov    %edi,%r15d\n  4004c7:\t41 55                \tpush   %r13\n  4004c9:\t41 54                \tpush   %r12\n  4004cb:\t4c 8d 25 76 09 20 00 \tlea    0x200976(%rip),%r12        # 600e48 <__frame_dummy_init_array_entry>\n  4004d2:\t55                   \tpush   %rbp\n  4004d3:\t48 8d 2d 76 09 20 00 \tlea    0x200976(%rip),%rbp        # 600e50 <__init_array_end>\n  4004da:\t53                   \tpush   %rbx\n  4004db:\t49 89 f6             \tmov    %rsi,%r14\n  4004de:\t49 89 d5             \tmov    %rdx,%r13\n  4004e1:\t4c 29 e5             \tsub    %r12,%rbp\n  4004e4:\t48 83 ec 08          \tsub    $0x8,%rsp\n  4004e8:\t48 c1 fd 03          \tsar    $0x3,%rbp\n  4004ec:\te8 9f fe ff ff       \tcallq  400390 <_init>\n  4004f1:\t48 85 ed             \ttest   %rbp,%rbp\n  4004f4:\t74 20                \tje     400516 <__libc_csu_init+0x56>\n  4004f6:\t31 db                \txor    %ebx,%ebx\n  4004f8:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n  4004ff:\t00\n  400500:\t4c 89 ea             \tmov    %r13,%rdx\n  400503:\t4c 89 f6             \tmov    %r14,%rsi\n  400506:\t44 89 ff             \tmov    %r15d,%edi\n  400509:\t41 ff 14 dc          \tcallq  *(%r12,%rbx,8)\n  40050d:\t48 83 c3 01          \tadd    $0x1,%rbx\n  400511:\t48 39 dd             \tcmp    %rbx,%rbp\n  400514:\t75 ea                \tjne    400500 <__libc_csu_init+0x40>\n  400516:\t48 83 c4 08          \tadd    $0x8,%rsp\n  40051a:\t5b                   \tpop    %rbx\n  40051b:\t5d                   \tpop    %rbp\n  40051c:\t41 5c                \tpop    %r12\n  40051e:\t41 5d                \tpop    %r13\n  400520:\t41 5e                \tpop    %r14\n  400522:\t41 5f                \tpop    %r15\n  400524:\tc3                   \tretq\n  400525:\t90                   \tnop\n  400526:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  40052d:\t00 00 00\n\n```\n\n```assembly\n0000000000400390 <_init>:\n  400390:\t48 83 ec 08          \tsub    $0x8,%rsp\n  400394:\t48 8b 05 5d 0c 20 00 \tmov    0x200c5d(%rip),%rax        # 600ff8 <__gmon_start__>\n  40039b:\t48 85 c0             \ttest   %rax,%rax\n  40039e:\t74 02                \tje     4003a2 <_init+0x12>\n  4003a0:\tff d0                \tcallq  *%rax\n  4003a2:\t48 83 c4 08          \tadd    $0x8,%rsp\n  4003a6:\tc3                   \tretq\n```\n`__libc_csu_init`返回`__libc_start_main`前:\n\n![](https://ww2.sinaimg.cn/large/006tNbRwly1fduntp9dfcj30z412caip.jpg)\n\n","slug":"Linux程序启动过程","published":1,"updated":"2017-03-21T14:43:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5ftm00063npxcglv3fb2","content":"<p>Kali rolling x86-64 环境，默认动态链接<br>参考 32 位： <a href=\"http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html\" target=\"_blank\" rel=\"external\">http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html</a> </p>\n<p>流程图如下：</p>\n<p><img src=\"http://dbp-consulting.com/tutorials/debugging/images/callgraph.png\" alt=\"流程图\"></p>\n<p>64 位草图</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNbRwly1fdunwuca6tj31120kuwro.jpg\" alt=\"\"></p>\n<h1 id=\"最简单的-main\"><a href=\"#最简单的-main\" class=\"headerlink\" title=\"最简单的 main\"></a>最简单的 main</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>gcc -ggdb -o prog1 prog1.c</code></p>\n<h1 id=\"execve\"><a href=\"#execve\" class=\"headerlink\" title=\"execve\"></a>execve</h1><p>运行程序时，shell 或者 gui 调用 execve() 函数触发系统调用：</p>\n<ul>\n<li>系统会分配栈区并将 argc, argv, envp 压栈</li>\n<li>按照 shell 设定 FD</li>\n<li>装载器负责重定位和调用<code>preinitializers</code>（图中<code>preinitarray1..n</code>）</li>\n<li>从程序代码段中 _start 位置开始执行程序</li>\n</ul>\n<h1 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"_start\"></a>_start</h1><p><code>_start</code> 是程序执行的初始位置，通过<code>objdump -d prog1</code>查看汇编</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">00000000004003b0 &lt;_start&gt;:</div><div class=\"line\">  4003b0:       31 ed                   xor    %ebp,%ebp</div><div class=\"line\">  4003b2:       49 89 d1                mov    %rdx,%r9                 # argv</div><div class=\"line\">  4003b5:       5e                      pop    %rsi                     # argc</div><div class=\"line\">  4003b6:       48 89 e2                mov    %rsp,%rdx                # linker destructor</div><div class=\"line\">  4003b9:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp</div><div class=\"line\">  4003bd:       50                      push   %rax</div><div class=\"line\">  4003be:       54                      push   %rsp</div><div class=\"line\">  4003bf:       49 c7 c0 30 05 40 00    mov    $0x400530,%r8            # &lt;__libc_csu_fini&gt;</div><div class=\"line\">  4003c6:       48 c7 c1 c0 04 40 00    mov    $0x4004c0,%rcx           # &lt;__libc_csu_init&gt;</div><div class=\"line\">  4003cd:       48 c7 c7 a6 04 40 00    mov    $0x4004a6,%rdi           # &lt;main&gt;</div><div class=\"line\">  4003d4:       ff 15 16 0c 20 00       callq  *0x200c16(%rip)        # 600ff0 &lt;__libc_start_main@GLIBC_2.2.5&gt;</div><div class=\"line\">  4003da:       f4                      hlt</div><div class=\"line\">  4003db:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</div></pre></td></tr></table></figure>\n<p><code>_start</code>的作用就是配置<code>__libc_start_main</code>的参数并进行调用：</p>\n<ul>\n<li><p><code>xor %ebp, %ebp</code>用于将 <code>%ebp</code> 清零，同时作为最外层标记</p>\n</li>\n<li><p>对 <code>%rdi</code>, <code>%rsi</code>, <code>%rdx</code>, <code>%rcx</code>, <code>%r8</code>, <code>%r9</code> 的操作均为传参，因为共 7 个参数，还用到了栈来传递第一个参数</p>\n<ol>\n<li><code>main</code>地址, 由<code>__libc_start_main</code>调用, 另外在程序终止后<code>main</code>的返回值会由<code>__libc_start_main</code>传递给<code>exit</code></li>\n<li><code>argc</code></li>\n<li><code>argv</code></li>\n<li><code>__libc_csu_init</code></li>\n<li><code>__libc_csu_fini</code></li>\n<li>Destructor of dynamic linker. Registered by <strong>libc_start_main with </strong>cxat_exit()<br>to call the FINI for dynamic libraries that got loaded before us.</li>\n<li>栈 - 函数调用前的<code>%rsp</code></li>\n</ol>\n</li>\n<li><p>为了<a href=\"http://coolshell.cn/articles/11377.html\" target=\"_blank\" rel=\"external\">提升访存效率</a>，编译器通常采用 16B 对齐。为了保证函数调用时的新栈帧是 16B 对齐的，使用<code>and</code>指令将 %esp 对齐。</p>\n</li>\n<li><p>同时，为了将 %esp 保存在 16B 对齐的位置，使用<code>push %rax</code>提前填充 8B</p>\n</li>\n</ul>\n<p><code>_start</code>调用<code>__libc_start_main</code>前的状态:</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNbRwly1fdu8v5ggcqj30ze138n64.jpg\" alt=\"before __libc_start_main\"></p>\n<h1 id=\"libc-start-main\"><a href=\"#libc-start-main\" class=\"headerlink\" title=\"__libc_start_main\"></a>__libc_start_main</h1><p><code>__libc_start_main</code>定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int __libc_start_main(  </div><div class=\"line\">    int (*main) (int, char * *, char * *),</div><div class=\"line\">    int argc, </div><div class=\"line\">    char * * ubp_av,</div><div class=\"line\">    void (*init) (void),</div><div class=\"line\">    void (*fini) (void),</div><div class=\"line\">    void (*rtld_fini) (void),</div><div class=\"line\">    void (* stack_end)</div><div class=\"line\"> );</div></pre></td></tr></table></figure>\n<p><code>main</code>的完整参数调用应该是<code>int main(int argc, char** argv, char** envp)</code>, 但是<code>__libc_start_main</code>中却并不包含 <code>envp</code>, 因为<code>envp</code>可以由<code>argc</code>和<code>argv</code>计算得到</p>\n<h2 id=\"ELF-auxiliary-vector\"><a href=\"#ELF-auxiliary-vector\" class=\"headerlink\" title=\"ELF auxiliary vector\"></a>ELF auxiliary vector</h2><p>使用 gdb 调试 prog1, 在<code>_start</code>处下断点, 运行初始状态如下:<br><img src=\"https://ww4.sinaimg.cn/large/006tNbRwly1fdtk4hiplwj30za13u145.jpg\" alt=\"_start\"><br>可以看到从栈顶向栈底依次放置的是: argc, argv, 0x0, 环境变量等, 即<a href=\"http://articles.manugarg.com/aboutelfauxiliaryvectors.html\" target=\"_blank\" rel=\"external\"><code>ELF 辅助向量</code></a>. </p>\n<h2 id=\"libc-start-main-的主要功能\"><a href=\"#libc-start-main-的主要功能\" class=\"headerlink\" title=\"__libc_start_main 的主要功能\"></a>__libc_start_main 的主要功能</h2><ul>\n<li><p>setuid, setgid</p>\n</li>\n<li><p>启动线程</p>\n</li>\n<li><p>寄存<code>fini</code>和<code>rtld_fini</code>的参数, 等待<code>at_exit</code>调用</p>\n</li>\n<li><p>调用<code>__libc_csu_init</code></p>\n</li>\n<li><p>调用<code>main</code></p>\n</li>\n<li><p>调用<code>exit</code></p>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"libc-csu-init\"><a href=\"#libc-csu-init\" class=\"headerlink\" title=\"__libc_csu_init\"></a>__libc_csu_init</h1><p><img src=\"https://ww2.sinaimg.cn/large/006tNbRwly1fdua01wgboj30zg124tj5.jpg\" alt=\"调用__libc_csu_init之前\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void __libc_csu_init (int argc, char **argv, char **envp)</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">  _init ();</div><div class=\"line\"></div><div class=\"line\">  const size_t size = __init_array_end - __init_array_start;</div><div class=\"line\">  for (size_t i = 0; i &lt; size; i++)</div><div class=\"line\">      (*__init_array_start [i]) (argc, argv, envp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">00000000004004c0 &lt;__libc_csu_init&gt;:</div><div class=\"line\">  4004c0:\t41 57                \tpush   %r15</div><div class=\"line\">  4004c2:\t41 56                \tpush   %r14</div><div class=\"line\">  4004c4:\t41 89 ff             \tmov    %edi,%r15d</div><div class=\"line\">  4004c7:\t41 55                \tpush   %r13</div><div class=\"line\">  4004c9:\t41 54                \tpush   %r12</div><div class=\"line\">  4004cb:\t4c 8d 25 76 09 20 00 \tlea    0x200976(%rip),%r12        # 600e48 &lt;__frame_dummy_init_array_entry&gt;</div><div class=\"line\">  4004d2:\t55                   \tpush   %rbp</div><div class=\"line\">  4004d3:\t48 8d 2d 76 09 20 00 \tlea    0x200976(%rip),%rbp        # 600e50 &lt;__init_array_end&gt;</div><div class=\"line\">  4004da:\t53                   \tpush   %rbx</div><div class=\"line\">  4004db:\t49 89 f6             \tmov    %rsi,%r14</div><div class=\"line\">  4004de:\t49 89 d5             \tmov    %rdx,%r13</div><div class=\"line\">  4004e1:\t4c 29 e5             \tsub    %r12,%rbp</div><div class=\"line\">  4004e4:\t48 83 ec 08          \tsub    $0x8,%rsp</div><div class=\"line\">  4004e8:\t48 c1 fd 03          \tsar    $0x3,%rbp</div><div class=\"line\">  4004ec:\te8 9f fe ff ff       \tcallq  400390 &lt;_init&gt;</div><div class=\"line\">  4004f1:\t48 85 ed             \ttest   %rbp,%rbp</div><div class=\"line\">  4004f4:\t74 20                \tje     400516 &lt;__libc_csu_init+0x56&gt;</div><div class=\"line\">  4004f6:\t31 db                \txor    %ebx,%ebx</div><div class=\"line\">  4004f8:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)</div><div class=\"line\">  4004ff:\t00</div><div class=\"line\">  400500:\t4c 89 ea             \tmov    %r13,%rdx</div><div class=\"line\">  400503:\t4c 89 f6             \tmov    %r14,%rsi</div><div class=\"line\">  400506:\t44 89 ff             \tmov    %r15d,%edi</div><div class=\"line\">  400509:\t41 ff 14 dc          \tcallq  *(%r12,%rbx,8)</div><div class=\"line\">  40050d:\t48 83 c3 01          \tadd    $0x1,%rbx</div><div class=\"line\">  400511:\t48 39 dd             \tcmp    %rbx,%rbp</div><div class=\"line\">  400514:\t75 ea                \tjne    400500 &lt;__libc_csu_init+0x40&gt;</div><div class=\"line\">  400516:\t48 83 c4 08          \tadd    $0x8,%rsp</div><div class=\"line\">  40051a:\t5b                   \tpop    %rbx</div><div class=\"line\">  40051b:\t5d                   \tpop    %rbp</div><div class=\"line\">  40051c:\t41 5c                \tpop    %r12</div><div class=\"line\">  40051e:\t41 5d                \tpop    %r13</div><div class=\"line\">  400520:\t41 5e                \tpop    %r14</div><div class=\"line\">  400522:\t41 5f                \tpop    %r15</div><div class=\"line\">  400524:\tc3                   \tretq</div><div class=\"line\">  400525:\t90                   \tnop</div><div class=\"line\">  400526:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)</div><div class=\"line\">  40052d:\t00 00 00</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">0000000000400390 &lt;_init&gt;:</div><div class=\"line\">  400390:\t48 83 ec 08          \tsub    $0x8,%rsp</div><div class=\"line\">  400394:\t48 8b 05 5d 0c 20 00 \tmov    0x200c5d(%rip),%rax        # 600ff8 &lt;__gmon_start__&gt;</div><div class=\"line\">  40039b:\t48 85 c0             \ttest   %rax,%rax</div><div class=\"line\">  40039e:\t74 02                \tje     4003a2 &lt;_init+0x12&gt;</div><div class=\"line\">  4003a0:\tff d0                \tcallq  *%rax</div><div class=\"line\">  4003a2:\t48 83 c4 08          \tadd    $0x8,%rsp</div><div class=\"line\">  4003a6:\tc3                   \tretq</div></pre></td></tr></table></figure>\n<p><code>__libc_csu_init</code>返回<code>__libc_start_main</code>前:</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tNbRwly1fduntp9dfcj30z412caip.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p>Kali rolling x86-64 环境，默认动态链接<br>参考 32 位： <a href=\"http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html\">http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html</a> </p>\n<p>流程图如下：</p>\n<p><img src=\"http://dbp-consulting.com/tutorials/debugging/images/callgraph.png\" alt=\"流程图\"></p>\n<p>64 位草图</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNbRwly1fdunwuca6tj31120kuwro.jpg\" alt=\"\"></p>\n<h1 id=\"最简单的-main\"><a href=\"#最简单的-main\" class=\"headerlink\" title=\"最简单的 main\"></a>最简单的 main</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>gcc -ggdb -o prog1 prog1.c</code></p>\n<h1 id=\"execve\"><a href=\"#execve\" class=\"headerlink\" title=\"execve\"></a>execve</h1><p>运行程序时，shell 或者 gui 调用 execve() 函数触发系统调用：</p>\n<ul>\n<li>系统会分配栈区并将 argc, argv, envp 压栈</li>\n<li>按照 shell 设定 FD</li>\n<li>装载器负责重定位和调用<code>preinitializers</code>（图中<code>preinitarray1..n</code>）</li>\n<li>从程序代码段中 _start 位置开始执行程序</li>\n</ul>\n<h1 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"_start\"></a>_start</h1><p><code>_start</code> 是程序执行的初始位置，通过<code>objdump -d prog1</code>查看汇编</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">00000000004003b0 &lt;_start&gt;:</div><div class=\"line\">  4003b0:       31 ed                   xor    %ebp,%ebp</div><div class=\"line\">  4003b2:       49 89 d1                mov    %rdx,%r9                 # argv</div><div class=\"line\">  4003b5:       5e                      pop    %rsi                     # argc</div><div class=\"line\">  4003b6:       48 89 e2                mov    %rsp,%rdx                # linker destructor</div><div class=\"line\">  4003b9:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp</div><div class=\"line\">  4003bd:       50                      push   %rax</div><div class=\"line\">  4003be:       54                      push   %rsp</div><div class=\"line\">  4003bf:       49 c7 c0 30 05 40 00    mov    $0x400530,%r8            # &lt;__libc_csu_fini&gt;</div><div class=\"line\">  4003c6:       48 c7 c1 c0 04 40 00    mov    $0x4004c0,%rcx           # &lt;__libc_csu_init&gt;</div><div class=\"line\">  4003cd:       48 c7 c7 a6 04 40 00    mov    $0x4004a6,%rdi           # &lt;main&gt;</div><div class=\"line\">  4003d4:       ff 15 16 0c 20 00       callq  *0x200c16(%rip)        # 600ff0 &lt;__libc_start_main@GLIBC_2.2.5&gt;</div><div class=\"line\">  4003da:       f4                      hlt</div><div class=\"line\">  4003db:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</div></pre></td></tr></table></figure>\n<p><code>_start</code>的作用就是配置<code>__libc_start_main</code>的参数并进行调用：</p>\n<ul>\n<li><p><code>xor %ebp, %ebp</code>用于将 <code>%ebp</code> 清零，同时作为最外层标记</p>\n</li>\n<li><p>对 <code>%rdi</code>, <code>%rsi</code>, <code>%rdx</code>, <code>%rcx</code>, <code>%r8</code>, <code>%r9</code> 的操作均为传参，因为共 7 个参数，还用到了栈来传递第一个参数</p>\n<ol>\n<li><code>main</code>地址, 由<code>__libc_start_main</code>调用, 另外在程序终止后<code>main</code>的返回值会由<code>__libc_start_main</code>传递给<code>exit</code></li>\n<li><code>argc</code></li>\n<li><code>argv</code></li>\n<li><code>__libc_csu_init</code></li>\n<li><code>__libc_csu_fini</code></li>\n<li>Destructor of dynamic linker. Registered by <strong>libc_start_main with </strong>cxat_exit()<br>to call the FINI for dynamic libraries that got loaded before us.</li>\n<li>栈 - 函数调用前的<code>%rsp</code></li>\n</ol>\n</li>\n<li><p>为了<a href=\"http://coolshell.cn/articles/11377.html\">提升访存效率</a>，编译器通常采用 16B 对齐。为了保证函数调用时的新栈帧是 16B 对齐的，使用<code>and</code>指令将 %esp 对齐。</p>\n</li>\n<li><p>同时，为了将 %esp 保存在 16B 对齐的位置，使用<code>push %rax</code>提前填充 8B</p>\n</li>\n</ul>\n<p><code>_start</code>调用<code>__libc_start_main</code>前的状态:</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNbRwly1fdu8v5ggcqj30ze138n64.jpg\" alt=\"before __libc_start_main\"></p>\n<h1 id=\"libc-start-main\"><a href=\"#libc-start-main\" class=\"headerlink\" title=\"__libc_start_main\"></a>__libc_start_main</h1><p><code>__libc_start_main</code>定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">int __libc_start_main(  </div><div class=\"line\">    int (*main) (int, char * *, char * *),</div><div class=\"line\">    int argc, </div><div class=\"line\">    char * * ubp_av,</div><div class=\"line\">    void (*init) (void),</div><div class=\"line\">    void (*fini) (void),</div><div class=\"line\">    void (*rtld_fini) (void),</div><div class=\"line\">    void (* stack_end)</div><div class=\"line\"> );</div></pre></td></tr></table></figure>\n<p><code>main</code>的完整参数调用应该是<code>int main(int argc, char** argv, char** envp)</code>, 但是<code>__libc_start_main</code>中却并不包含 <code>envp</code>, 因为<code>envp</code>可以由<code>argc</code>和<code>argv</code>计算得到</p>\n<h2 id=\"ELF-auxiliary-vector\"><a href=\"#ELF-auxiliary-vector\" class=\"headerlink\" title=\"ELF auxiliary vector\"></a>ELF auxiliary vector</h2><p>使用 gdb 调试 prog1, 在<code>_start</code>处下断点, 运行初始状态如下:<br><img src=\"https://ww4.sinaimg.cn/large/006tNbRwly1fdtk4hiplwj30za13u145.jpg\" alt=\"_start\"><br>可以看到从栈顶向栈底依次放置的是: argc, argv, 0x0, 环境变量等, 即<a href=\"http://articles.manugarg.com/aboutelfauxiliaryvectors.html\"><code>ELF 辅助向量</code></a>. </p>\n<h2 id=\"libc-start-main-的主要功能\"><a href=\"#libc-start-main-的主要功能\" class=\"headerlink\" title=\"__libc_start_main 的主要功能\"></a>__libc_start_main 的主要功能</h2><ul>\n<li><p>setuid, setgid</p>\n</li>\n<li><p>启动线程</p>\n</li>\n<li><p>寄存<code>fini</code>和<code>rtld_fini</code>的参数, 等待<code>at_exit</code>调用</p>\n</li>\n<li><p>调用<code>__libc_csu_init</code></p>\n</li>\n<li><p>调用<code>main</code></p>\n</li>\n<li><p>调用<code>exit</code></p>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"libc-csu-init\"><a href=\"#libc-csu-init\" class=\"headerlink\" title=\"__libc_csu_init\"></a>__libc_csu_init</h1><p><img src=\"https://ww2.sinaimg.cn/large/006tNbRwly1fdua01wgboj30zg124tj5.jpg\" alt=\"调用__libc_csu_init之前\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">void __libc_csu_init (int argc, char **argv, char **envp)</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">  _init ();</div><div class=\"line\"></div><div class=\"line\">  const size_t size = __init_array_end - __init_array_start;</div><div class=\"line\">  for (size_t i = 0; i &lt; size; i++)</div><div class=\"line\">      (*__init_array_start [i]) (argc, argv, envp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">00000000004004c0 &lt;__libc_csu_init&gt;:</div><div class=\"line\">  4004c0:\t41 57                \tpush   %r15</div><div class=\"line\">  4004c2:\t41 56                \tpush   %r14</div><div class=\"line\">  4004c4:\t41 89 ff             \tmov    %edi,%r15d</div><div class=\"line\">  4004c7:\t41 55                \tpush   %r13</div><div class=\"line\">  4004c9:\t41 54                \tpush   %r12</div><div class=\"line\">  4004cb:\t4c 8d 25 76 09 20 00 \tlea    0x200976(%rip),%r12        # 600e48 &lt;__frame_dummy_init_array_entry&gt;</div><div class=\"line\">  4004d2:\t55                   \tpush   %rbp</div><div class=\"line\">  4004d3:\t48 8d 2d 76 09 20 00 \tlea    0x200976(%rip),%rbp        # 600e50 &lt;__init_array_end&gt;</div><div class=\"line\">  4004da:\t53                   \tpush   %rbx</div><div class=\"line\">  4004db:\t49 89 f6             \tmov    %rsi,%r14</div><div class=\"line\">  4004de:\t49 89 d5             \tmov    %rdx,%r13</div><div class=\"line\">  4004e1:\t4c 29 e5             \tsub    %r12,%rbp</div><div class=\"line\">  4004e4:\t48 83 ec 08          \tsub    $0x8,%rsp</div><div class=\"line\">  4004e8:\t48 c1 fd 03          \tsar    $0x3,%rbp</div><div class=\"line\">  4004ec:\te8 9f fe ff ff       \tcallq  400390 &lt;_init&gt;</div><div class=\"line\">  4004f1:\t48 85 ed             \ttest   %rbp,%rbp</div><div class=\"line\">  4004f4:\t74 20                \tje     400516 &lt;__libc_csu_init+0x56&gt;</div><div class=\"line\">  4004f6:\t31 db                \txor    %ebx,%ebx</div><div class=\"line\">  4004f8:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)</div><div class=\"line\">  4004ff:\t00</div><div class=\"line\">  400500:\t4c 89 ea             \tmov    %r13,%rdx</div><div class=\"line\">  400503:\t4c 89 f6             \tmov    %r14,%rsi</div><div class=\"line\">  400506:\t44 89 ff             \tmov    %r15d,%edi</div><div class=\"line\">  400509:\t41 ff 14 dc          \tcallq  *(%r12,%rbx,8)</div><div class=\"line\">  40050d:\t48 83 c3 01          \tadd    $0x1,%rbx</div><div class=\"line\">  400511:\t48 39 dd             \tcmp    %rbx,%rbp</div><div class=\"line\">  400514:\t75 ea                \tjne    400500 &lt;__libc_csu_init+0x40&gt;</div><div class=\"line\">  400516:\t48 83 c4 08          \tadd    $0x8,%rsp</div><div class=\"line\">  40051a:\t5b                   \tpop    %rbx</div><div class=\"line\">  40051b:\t5d                   \tpop    %rbp</div><div class=\"line\">  40051c:\t41 5c                \tpop    %r12</div><div class=\"line\">  40051e:\t41 5d                \tpop    %r13</div><div class=\"line\">  400520:\t41 5e                \tpop    %r14</div><div class=\"line\">  400522:\t41 5f                \tpop    %r15</div><div class=\"line\">  400524:\tc3                   \tretq</div><div class=\"line\">  400525:\t90                   \tnop</div><div class=\"line\">  400526:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)</div><div class=\"line\">  40052d:\t00 00 00</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">0000000000400390 &lt;_init&gt;:</div><div class=\"line\">  400390:\t48 83 ec 08          \tsub    $0x8,%rsp</div><div class=\"line\">  400394:\t48 8b 05 5d 0c 20 00 \tmov    0x200c5d(%rip),%rax        # 600ff8 &lt;__gmon_start__&gt;</div><div class=\"line\">  40039b:\t48 85 c0             \ttest   %rax,%rax</div><div class=\"line\">  40039e:\t74 02                \tje     4003a2 &lt;_init+0x12&gt;</div><div class=\"line\">  4003a0:\tff d0                \tcallq  *%rax</div><div class=\"line\">  4003a2:\t48 83 c4 08          \tadd    $0x8,%rsp</div><div class=\"line\">  4003a6:\tc3                   \tretq</div></pre></td></tr></table></figure>\n<p><code>__libc_csu_init</code>返回<code>__libc_start_main</code>前:</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tNbRwly1fduntp9dfcj30z412caip.jpg\" alt=\"\"></p>\n"},{"title":"Python 中的闭包与装饰器","date":"2016-07-25T02:18:09.000Z","_content":"\n# Closure(闭包)\n\n什么是闭包?简单说,闭包就是根据不同的配置信息得到不同的结果。\n\n专业的解释:闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。\n\n概念总是有点抽象，下面结合示例说下我自己的理解。\n\n## 特点\n\n- 外部函数包裹内部函数\n- 外部函数最终返回一个函数对象，即一个内部函数实例\n- 外部函数传入的参数不同时，会返回不同的内部函数实例\n- 外部函数用于`绑定`，内部函数用于`处理`\n- 外部函数绑定的参数为`函数`时，即为`装饰器`\n\n## 示例\n\n```py\ndef plus(augend):\n    print 'augend:', augend\n\n    def plus_inside(addend):\n        print 'addend:', addend\n        result = augend + addend\n        print 'result:', result\n        return result\n\n    return plus_inside\n\np20 = plus(20)\n# -> augend: 20\n# 只打印 augend 说明内部处理函数尚未执行\n# 只是完成了将 augend 与处理函数绑定的操作\n\np20(1)\n# -> addend: 1\n# -> result: 21\n```\n\n# Decorator(装饰器)\n\n前面已经提到，装饰器本质就是外部函数绑定参数为函数的闭包。\n\n另外 Python 给它添加了一个更优雅的调用方式，用在被绑定函数`f`之前添加`@wrapper`的方式，代替在被绑定函数`f`定义后使用`f = wrapper(f)`手动赋值的方式，来进行绑定。\n\n## 示例\n```py\ndef makebold(fn):\n    def wrapped():\n        return \"<b>\" + fn() + \"</b>\"\n    return wrapped\n\ndef makeitalic(fn):\n    def wrapped():\n        return \"<i>\" + fn() + \"</i>\"\n    return wrapped\n\n@makebold\n@makeitalic\ndef hello():\n    return \"hello world\"\n\nprint hello() \n# -> <b><i>hello world</i></b>\n# 注意<b>和<i>的顺序\n```\n\n## 保持函数默认参数常新的装饰器\n\nCookbook 20.1 里有个特别的例子。\n\nPython 里函数的默认参数只在函数定义时求值一次，然后存入函数内建的 func_defaults 元组内。如果是不可变参数（如 1、'qwe'、None 等），完全没有问题；但如果是类似列表这样的可变参数，重新调用函数时默认的列表可能已经面目全非。\n\n书中提供了两种解决该问题的方法：\n\n### 标准方法\n```py\ndef packitem(item, pkg=None):\n    if pkg is None:\n        pkg = []\n    pkg.append(item)\n    return pkg\n```\n\n### 装饰器方法\n```py\nimport copy\ndef freshdefaults(f):\n    \"a decorator to wrap f and keep its default values fresh between calls\"\n    fdefaults = f.func_defaults\n    def refresher(*args, **kwds):\n        f.func_defaults = deepcopy(fdefaults)\n        return f(*args, **kwds)\n        \n    # 用于在 print 时区别不同的被绑定函数，2.4 后有效，见 Cookbook 20.1 \n    refresher.__name__ = f.__name__\n    \n    return refresher\n\n# usage as a decorator, in python 2.4:\n@freshdefaults\ndef packitem(item, pkg=[]):\n    pkg.append(item)\n    return pkg\n# usage in python 2.3: after the function definition, explicitly assign:\n# f = freshdefaults(f)\n```\n\n### Ref.\n\n- http://www.cnblogs.com/ma6174/archive/2013/04/15/3022548.html\n- Cookbook 20.1\n\n\n","source":"_posts/Python闭包.md","raw":"---\ntitle: Python 中的闭包与装饰器\ndate: 2016-07-25 10:18:09\ncategory: Python\ntags: [Python, Closure, Decorator, func_defaults]\n---\n\n# Closure(闭包)\n\n什么是闭包?简单说,闭包就是根据不同的配置信息得到不同的结果。\n\n专业的解释:闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。\n\n概念总是有点抽象，下面结合示例说下我自己的理解。\n\n## 特点\n\n- 外部函数包裹内部函数\n- 外部函数最终返回一个函数对象，即一个内部函数实例\n- 外部函数传入的参数不同时，会返回不同的内部函数实例\n- 外部函数用于`绑定`，内部函数用于`处理`\n- 外部函数绑定的参数为`函数`时，即为`装饰器`\n\n## 示例\n\n```py\ndef plus(augend):\n    print 'augend:', augend\n\n    def plus_inside(addend):\n        print 'addend:', addend\n        result = augend + addend\n        print 'result:', result\n        return result\n\n    return plus_inside\n\np20 = plus(20)\n# -> augend: 20\n# 只打印 augend 说明内部处理函数尚未执行\n# 只是完成了将 augend 与处理函数绑定的操作\n\np20(1)\n# -> addend: 1\n# -> result: 21\n```\n\n# Decorator(装饰器)\n\n前面已经提到，装饰器本质就是外部函数绑定参数为函数的闭包。\n\n另外 Python 给它添加了一个更优雅的调用方式，用在被绑定函数`f`之前添加`@wrapper`的方式，代替在被绑定函数`f`定义后使用`f = wrapper(f)`手动赋值的方式，来进行绑定。\n\n## 示例\n```py\ndef makebold(fn):\n    def wrapped():\n        return \"<b>\" + fn() + \"</b>\"\n    return wrapped\n\ndef makeitalic(fn):\n    def wrapped():\n        return \"<i>\" + fn() + \"</i>\"\n    return wrapped\n\n@makebold\n@makeitalic\ndef hello():\n    return \"hello world\"\n\nprint hello() \n# -> <b><i>hello world</i></b>\n# 注意<b>和<i>的顺序\n```\n\n## 保持函数默认参数常新的装饰器\n\nCookbook 20.1 里有个特别的例子。\n\nPython 里函数的默认参数只在函数定义时求值一次，然后存入函数内建的 func_defaults 元组内。如果是不可变参数（如 1、'qwe'、None 等），完全没有问题；但如果是类似列表这样的可变参数，重新调用函数时默认的列表可能已经面目全非。\n\n书中提供了两种解决该问题的方法：\n\n### 标准方法\n```py\ndef packitem(item, pkg=None):\n    if pkg is None:\n        pkg = []\n    pkg.append(item)\n    return pkg\n```\n\n### 装饰器方法\n```py\nimport copy\ndef freshdefaults(f):\n    \"a decorator to wrap f and keep its default values fresh between calls\"\n    fdefaults = f.func_defaults\n    def refresher(*args, **kwds):\n        f.func_defaults = deepcopy(fdefaults)\n        return f(*args, **kwds)\n        \n    # 用于在 print 时区别不同的被绑定函数，2.4 后有效，见 Cookbook 20.1 \n    refresher.__name__ = f.__name__\n    \n    return refresher\n\n# usage as a decorator, in python 2.4:\n@freshdefaults\ndef packitem(item, pkg=[]):\n    pkg.append(item)\n    return pkg\n# usage in python 2.3: after the function definition, explicitly assign:\n# f = freshdefaults(f)\n```\n\n### Ref.\n\n- http://www.cnblogs.com/ma6174/archive/2013/04/15/3022548.html\n- Cookbook 20.1\n\n\n","slug":"Python闭包","published":1,"updated":"2016-09-30T08:27:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5ftq00073npx2t14e9k1","content":"<h1 id=\"Closure-闭包\"><a href=\"#Closure-闭包\" class=\"headerlink\" title=\"Closure(闭包)\"></a>Closure(闭包)</h1><p>什么是闭包?简单说,闭包就是根据不同的配置信息得到不同的结果。</p>\n<p>专业的解释:闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。</p>\n<p>概念总是有点抽象，下面结合示例说下我自己的理解。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>外部函数包裹内部函数</li>\n<li>外部函数最终返回一个函数对象，即一个内部函数实例</li>\n<li>外部函数传入的参数不同时，会返回不同的内部函数实例</li>\n<li>外部函数用于<code>绑定</code>，内部函数用于<code>处理</code></li>\n<li>外部函数绑定的参数为<code>函数</code>时，即为<code>装饰器</code></li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plus</span><span class=\"params\">(augend)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'augend:'</span>, augend</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plus_inside</span><span class=\"params\">(addend)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'addend:'</span>, addend</div><div class=\"line\">        result = augend + addend</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'result:'</span>, result</div><div class=\"line\">        <span class=\"keyword\">return</span> result</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> plus_inside</div><div class=\"line\"></div><div class=\"line\">p20 = plus(<span class=\"number\">20</span>)</div><div class=\"line\"><span class=\"comment\"># -&gt; augend: 20</span></div><div class=\"line\"><span class=\"comment\"># 只打印 augend 说明内部处理函数尚未执行</span></div><div class=\"line\"><span class=\"comment\"># 只是完成了将 augend 与处理函数绑定的操作</span></div><div class=\"line\"></div><div class=\"line\">p20(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\"># -&gt; addend: 1</span></div><div class=\"line\"><span class=\"comment\"># -&gt; result: 21</span></div></pre></td></tr></table></figure>\n<h1 id=\"Decorator-装饰器\"><a href=\"#Decorator-装饰器\" class=\"headerlink\" title=\"Decorator(装饰器)\"></a>Decorator(装饰器)</h1><p>前面已经提到，装饰器本质就是外部函数绑定参数为函数的闭包。</p>\n<p>另外 Python 给它添加了一个更优雅的调用方式，用在被绑定函数<code>f</code>之前添加<code>@wrapper</code>的方式，代替在被绑定函数<code>f</code>定义后使用<code>f = wrapper(f)</code>手动赋值的方式，来进行绑定。</p>\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makebold</span><span class=\"params\">(fn)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapped</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;b&gt;\"</span> + fn() + <span class=\"string\">\"&lt;/b&gt;\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> wrapped</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeitalic</span><span class=\"params\">(fn)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapped</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;i&gt;\"</span> + fn() + <span class=\"string\">\"&lt;/i&gt;\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> wrapped</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@makebold</span></div><div class=\"line\"><span class=\"meta\">@makeitalic</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello world\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> hello() </div><div class=\"line\"><span class=\"comment\"># -&gt; &lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;</span></div><div class=\"line\"><span class=\"comment\"># 注意&lt;b&gt;和&lt;i&gt;的顺序</span></div></pre></td></tr></table></figure>\n<h2 id=\"保持函数默认参数常新的装饰器\"><a href=\"#保持函数默认参数常新的装饰器\" class=\"headerlink\" title=\"保持函数默认参数常新的装饰器\"></a>保持函数默认参数常新的装饰器</h2><p>Cookbook 20.1 里有个特别的例子。</p>\n<p>Python 里函数的默认参数只在函数定义时求值一次，然后存入函数内建的 func_defaults 元组内。如果是不可变参数（如 1、’qwe’、None 等），完全没有问题；但如果是类似列表这样的可变参数，重新调用函数时默认的列表可能已经面目全非。</p>\n<p>书中提供了两种解决该问题的方法：</p>\n<h3 id=\"标准方法\"><a href=\"#标准方法\" class=\"headerlink\" title=\"标准方法\"></a>标准方法</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">packitem</span><span class=\"params\">(item, pkg=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> pkg <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        pkg = []</div><div class=\"line\">    pkg.append(item)</div><div class=\"line\">    <span class=\"keyword\">return</span> pkg</div></pre></td></tr></table></figure>\n<h3 id=\"装饰器方法\"><a href=\"#装饰器方法\" class=\"headerlink\" title=\"装饰器方法\"></a>装饰器方法</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> copy</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">freshdefaults</span><span class=\"params\">(f)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"a decorator to wrap f and keep its default values fresh between calls\"</span></div><div class=\"line\">    fdefaults = f.func_defaults</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">refresher</span><span class=\"params\">(*args, **kwds)</span>:</span></div><div class=\"line\">        f.func_defaults = deepcopy(fdefaults)</div><div class=\"line\">        <span class=\"keyword\">return</span> f(*args, **kwds)</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\"># 用于在 print 时区别不同的被绑定函数，2.4 后有效，见 Cookbook 20.1 </span></div><div class=\"line\">    refresher.__name__ = f.__name__</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> refresher</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># usage as a decorator, in python 2.4:</span></div><div class=\"line\"><span class=\"meta\">@freshdefaults</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">packitem</span><span class=\"params\">(item, pkg=[])</span>:</span></div><div class=\"line\">    pkg.append(item)</div><div class=\"line\">    <span class=\"keyword\">return</span> pkg</div><div class=\"line\"><span class=\"comment\"># usage in python 2.3: after the function definition, explicitly assign:</span></div><div class=\"line\"><span class=\"comment\"># f = freshdefaults(f)</span></div></pre></td></tr></table></figure>\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref.\"></a>Ref.</h3><ul>\n<li><a href=\"http://www.cnblogs.com/ma6174/archive/2013/04/15/3022548.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/ma6174/archive/2013/04/15/3022548.html</a></li>\n<li>Cookbook 20.1</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Closure-闭包\"><a href=\"#Closure-闭包\" class=\"headerlink\" title=\"Closure(闭包)\"></a>Closure(闭包)</h1><p>什么是闭包?简单说,闭包就是根据不同的配置信息得到不同的结果。</p>\n<p>专业的解释:闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。</p>\n<p>概念总是有点抽象，下面结合示例说下我自己的理解。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>外部函数包裹内部函数</li>\n<li>外部函数最终返回一个函数对象，即一个内部函数实例</li>\n<li>外部函数传入的参数不同时，会返回不同的内部函数实例</li>\n<li>外部函数用于<code>绑定</code>，内部函数用于<code>处理</code></li>\n<li>外部函数绑定的参数为<code>函数</code>时，即为<code>装饰器</code></li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plus</span><span class=\"params\">(augend)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'augend:'</span>, augend</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plus_inside</span><span class=\"params\">(addend)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'addend:'</span>, addend</div><div class=\"line\">        result = augend + addend</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'result:'</span>, result</div><div class=\"line\">        <span class=\"keyword\">return</span> result</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> plus_inside</div><div class=\"line\"></div><div class=\"line\">p20 = plus(<span class=\"number\">20</span>)</div><div class=\"line\"><span class=\"comment\"># -&gt; augend: 20</span></div><div class=\"line\"><span class=\"comment\"># 只打印 augend 说明内部处理函数尚未执行</span></div><div class=\"line\"><span class=\"comment\"># 只是完成了将 augend 与处理函数绑定的操作</span></div><div class=\"line\"></div><div class=\"line\">p20(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\"># -&gt; addend: 1</span></div><div class=\"line\"><span class=\"comment\"># -&gt; result: 21</span></div></pre></td></tr></table></figure>\n<h1 id=\"Decorator-装饰器\"><a href=\"#Decorator-装饰器\" class=\"headerlink\" title=\"Decorator(装饰器)\"></a>Decorator(装饰器)</h1><p>前面已经提到，装饰器本质就是外部函数绑定参数为函数的闭包。</p>\n<p>另外 Python 给它添加了一个更优雅的调用方式，用在被绑定函数<code>f</code>之前添加<code>@wrapper</code>的方式，代替在被绑定函数<code>f</code>定义后使用<code>f = wrapper(f)</code>手动赋值的方式，来进行绑定。</p>\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makebold</span><span class=\"params\">(fn)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapped</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;b&gt;\"</span> + fn() + <span class=\"string\">\"&lt;/b&gt;\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> wrapped</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeitalic</span><span class=\"params\">(fn)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapped</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;i&gt;\"</span> + fn() + <span class=\"string\">\"&lt;/i&gt;\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> wrapped</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@makebold</span></div><div class=\"line\"><span class=\"meta\">@makeitalic</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello world\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> hello() </div><div class=\"line\"><span class=\"comment\"># -&gt; &lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;</span></div><div class=\"line\"><span class=\"comment\"># 注意&lt;b&gt;和&lt;i&gt;的顺序</span></div></pre></td></tr></table></figure>\n<h2 id=\"保持函数默认参数常新的装饰器\"><a href=\"#保持函数默认参数常新的装饰器\" class=\"headerlink\" title=\"保持函数默认参数常新的装饰器\"></a>保持函数默认参数常新的装饰器</h2><p>Cookbook 20.1 里有个特别的例子。</p>\n<p>Python 里函数的默认参数只在函数定义时求值一次，然后存入函数内建的 func_defaults 元组内。如果是不可变参数（如 1、’qwe’、None 等），完全没有问题；但如果是类似列表这样的可变参数，重新调用函数时默认的列表可能已经面目全非。</p>\n<p>书中提供了两种解决该问题的方法：</p>\n<h3 id=\"标准方法\"><a href=\"#标准方法\" class=\"headerlink\" title=\"标准方法\"></a>标准方法</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">packitem</span><span class=\"params\">(item, pkg=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> pkg <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        pkg = []</div><div class=\"line\">    pkg.append(item)</div><div class=\"line\">    <span class=\"keyword\">return</span> pkg</div></pre></td></tr></table></figure>\n<h3 id=\"装饰器方法\"><a href=\"#装饰器方法\" class=\"headerlink\" title=\"装饰器方法\"></a>装饰器方法</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> copy</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">freshdefaults</span><span class=\"params\">(f)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"a decorator to wrap f and keep its default values fresh between calls\"</span></div><div class=\"line\">    fdefaults = f.func_defaults</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">refresher</span><span class=\"params\">(*args, **kwds)</span>:</span></div><div class=\"line\">        f.func_defaults = deepcopy(fdefaults)</div><div class=\"line\">        <span class=\"keyword\">return</span> f(*args, **kwds)</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\"># 用于在 print 时区别不同的被绑定函数，2.4 后有效，见 Cookbook 20.1 </span></div><div class=\"line\">    refresher.__name__ = f.__name__</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> refresher</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># usage as a decorator, in python 2.4:</span></div><div class=\"line\"><span class=\"meta\">@freshdefaults</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">packitem</span><span class=\"params\">(item, pkg=[])</span>:</span></div><div class=\"line\">    pkg.append(item)</div><div class=\"line\">    <span class=\"keyword\">return</span> pkg</div><div class=\"line\"><span class=\"comment\"># usage in python 2.3: after the function definition, explicitly assign:</span></div><div class=\"line\"><span class=\"comment\"># f = freshdefaults(f)</span></div></pre></td></tr></table></figure>\n<h3 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref.\"></a>Ref.</h3><ul>\n<li><a href=\"http://www.cnblogs.com/ma6174/archive/2013/04/15/3022548.html\">http://www.cnblogs.com/ma6174/archive/2013/04/15/3022548.html</a></li>\n<li>Cookbook 20.1</li>\n</ul>\n"},{"title":"Q 判断 Gadget 时遇到 align 伪指令的问题","date":"2016-08-23T05:13:57.000Z","_content":"\n今天在利用 Q 判断 Gadget 时发现，在 IDA 中静态分析时显示如下的指令片段：\n\n```\nalign 10h\nret\n```\n\n会被判断为 Gadget，并且还莫名其妙扯上了 esi\n\n```\n8d7600c3\nMoveReg(Address: 0x40000, Complexity 0.67, Stack 0x4, Ip 0x0, Output: esi, Inputs [esi])\nAndGadget(Address: 0x40000, Complexity 0.67, Stack 0x4, Ip 0x0, Output: esi, Inputs [esi, esi])\nOrGadget(Address: 0x40000, Complexity 0.67, Stack 0x4, Ip 0x0, Output: esi, Inputs [esi, esi])\n```\n\n实在百思不得其解   \n\n按理说`伪指令`并没有实际的机器码与之对应，但是`ret`对应`c3`，那么只能解释为`align 10h`对应`8d7600`了\n\n好在 Google 到了[一篇文章](http://www.codingnow.com/2000/frame.htm?http://www.codingnow.com/2000/essay/align.htm)，提到了汇编器处理`align`伪指令的原理\n\n>我原来以为, VC 将插入 NOP 来对齐代码, 结果发现, 为了提高效率, VC 按情况填入了单字节,双字节, 三字节指令做空操作, 使空操作的时间最短. 当需要插入 1 字节时, 理所当然的插入一个 0x90 (NOP); 需要插入 2 字节时则是 0x8b 0xff (MOV DI,DI) 这也无可厚非, 此指令不破坏任何寄存器, 也不影响标志位; 可需要填入 3 个字节的时候, 我用的 VC6 却令人费解的填入了 0x8d 0x49 0x00 (LEA CX,[BX+DI+00]), 很明显它影响了 CX, 而风魂的代码就是受到了它的影响.\n\n我这才恍然大悟，拿 capstone 反汇编了一下`8d7600`得到\n\n```\nlea\tesi, dword ptr [esi]\n```\n\n果然，汇编器在处理`align`时，插入了这样一个`不破坏任何寄存器也不影响标志位`的指令来实现对齐效果\n\n而 Q（使用 capstone 反汇编）接收到传入的指令时，自然会按照实际的机器指令而不是`align 10h`来进行 Gadget 判断，所以出现了上面的结果\n\n大致如此...","source":"_posts/Q判断Gadget时遇到align伪指令的问题.md","raw":"---\ntitle: Q 判断 Gadget 时遇到 align 伪指令的问题\ndate: 2016-08-23 13:13:57\ncategory: rop\ntags:\t[Q, asm, align, capstone, ida]\n---\n\n今天在利用 Q 判断 Gadget 时发现，在 IDA 中静态分析时显示如下的指令片段：\n\n```\nalign 10h\nret\n```\n\n会被判断为 Gadget，并且还莫名其妙扯上了 esi\n\n```\n8d7600c3\nMoveReg(Address: 0x40000, Complexity 0.67, Stack 0x4, Ip 0x0, Output: esi, Inputs [esi])\nAndGadget(Address: 0x40000, Complexity 0.67, Stack 0x4, Ip 0x0, Output: esi, Inputs [esi, esi])\nOrGadget(Address: 0x40000, Complexity 0.67, Stack 0x4, Ip 0x0, Output: esi, Inputs [esi, esi])\n```\n\n实在百思不得其解   \n\n按理说`伪指令`并没有实际的机器码与之对应，但是`ret`对应`c3`，那么只能解释为`align 10h`对应`8d7600`了\n\n好在 Google 到了[一篇文章](http://www.codingnow.com/2000/frame.htm?http://www.codingnow.com/2000/essay/align.htm)，提到了汇编器处理`align`伪指令的原理\n\n>我原来以为, VC 将插入 NOP 来对齐代码, 结果发现, 为了提高效率, VC 按情况填入了单字节,双字节, 三字节指令做空操作, 使空操作的时间最短. 当需要插入 1 字节时, 理所当然的插入一个 0x90 (NOP); 需要插入 2 字节时则是 0x8b 0xff (MOV DI,DI) 这也无可厚非, 此指令不破坏任何寄存器, 也不影响标志位; 可需要填入 3 个字节的时候, 我用的 VC6 却令人费解的填入了 0x8d 0x49 0x00 (LEA CX,[BX+DI+00]), 很明显它影响了 CX, 而风魂的代码就是受到了它的影响.\n\n我这才恍然大悟，拿 capstone 反汇编了一下`8d7600`得到\n\n```\nlea\tesi, dword ptr [esi]\n```\n\n果然，汇编器在处理`align`时，插入了这样一个`不破坏任何寄存器也不影响标志位`的指令来实现对齐效果\n\n而 Q（使用 capstone 反汇编）接收到传入的指令时，自然会按照实际的机器指令而不是`align 10h`来进行 Gadget 判断，所以出现了上面的结果\n\n大致如此...","slug":"Q判断Gadget时遇到align伪指令的问题","published":1,"updated":"2017-06-01T15:30:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fts00083npxvf13djbg","content":"<p>今天在利用 Q 判断 Gadget 时发现，在 IDA 中静态分析时显示如下的指令片段：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">align</span> <span class=\"number\">10h</span></div><div class=\"line\"><span class=\"keyword\">ret</span></div></pre></td></tr></table></figure>\n<p>会被判断为 Gadget，并且还莫名其妙扯上了 esi</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><div class=\"line\">8d7600c3</div><div class=\"line\">MoveReg(Address: <span class=\"number\">0x40000</span>, Complexity <span class=\"number\">0.67</span>, Stack <span class=\"number\">0x4</span>, <span class=\"built_in\">Ip</span> <span class=\"number\">0x0</span>, Output: <span class=\"built_in\">esi</span>, Inputs [<span class=\"built_in\">esi</span>])</div><div class=\"line\">AndGadget(Address: <span class=\"number\">0x40000</span>, Complexity <span class=\"number\">0.67</span>, Stack <span class=\"number\">0x4</span>, <span class=\"built_in\">Ip</span> <span class=\"number\">0x0</span>, Output: <span class=\"built_in\">esi</span>, Inputs [<span class=\"built_in\">esi</span>, <span class=\"built_in\">esi</span>])</div><div class=\"line\">OrGadget(Address: <span class=\"number\">0x40000</span>, Complexity <span class=\"number\">0.67</span>, Stack <span class=\"number\">0x4</span>, <span class=\"built_in\">Ip</span> <span class=\"number\">0x0</span>, Output: <span class=\"built_in\">esi</span>, Inputs [<span class=\"built_in\">esi</span>, <span class=\"built_in\">esi</span>])</div></pre></td></tr></table></figure>\n<p>实在百思不得其解   </p>\n<p>按理说<code>伪指令</code>并没有实际的机器码与之对应，但是<code>ret</code>对应<code>c3</code>，那么只能解释为<code>align 10h</code>对应<code>8d7600</code>了</p>\n<p>好在 Google 到了<a href=\"http://www.codingnow.com/2000/frame.htm?http://www.codingnow.com/2000/essay/align.htm\" target=\"_blank\" rel=\"external\">一篇文章</a>，提到了汇编器处理<code>align</code>伪指令的原理</p>\n<blockquote>\n<p>我原来以为, VC 将插入 NOP 来对齐代码, 结果发现, 为了提高效率, VC 按情况填入了单字节,双字节, 三字节指令做空操作, 使空操作的时间最短. 当需要插入 1 字节时, 理所当然的插入一个 0x90 (NOP); 需要插入 2 字节时则是 0x8b 0xff (MOV DI,DI) 这也无可厚非, 此指令不破坏任何寄存器, 也不影响标志位; 可需要填入 3 个字节的时候, 我用的 VC6 却令人费解的填入了 0x8d 0x49 0x00 (LEA CX,[BX+DI+00]), 很明显它影响了 CX, 而风魂的代码就是受到了它的影响.</p>\n</blockquote>\n<p>我这才恍然大悟，拿 capstone 反汇编了一下<code>8d7600</code>得到</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">lea</span>\t<span class=\"built_in\">esi</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">esi</span>]</div></pre></td></tr></table></figure>\n<p>果然，汇编器在处理<code>align</code>时，插入了这样一个<code>不破坏任何寄存器也不影响标志位</code>的指令来实现对齐效果</p>\n<p>而 Q（使用 capstone 反汇编）接收到传入的指令时，自然会按照实际的机器指令而不是<code>align 10h</code>来进行 Gadget 判断，所以出现了上面的结果</p>\n<p>大致如此…</p>\n","excerpt":"","more":"<p>今天在利用 Q 判断 Gadget 时发现，在 IDA 中静态分析时显示如下的指令片段：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">align</span> <span class=\"number\">10h</span></div><div class=\"line\"><span class=\"keyword\">ret</span></div></pre></td></tr></table></figure>\n<p>会被判断为 Gadget，并且还莫名其妙扯上了 esi</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><div class=\"line\">8d7600c3</div><div class=\"line\">MoveReg(Address: <span class=\"number\">0x40000</span>, Complexity <span class=\"number\">0.67</span>, Stack <span class=\"number\">0x4</span>, <span class=\"built_in\">Ip</span> <span class=\"number\">0x0</span>, Output: <span class=\"built_in\">esi</span>, Inputs [<span class=\"built_in\">esi</span>])</div><div class=\"line\">AndGadget(Address: <span class=\"number\">0x40000</span>, Complexity <span class=\"number\">0.67</span>, Stack <span class=\"number\">0x4</span>, <span class=\"built_in\">Ip</span> <span class=\"number\">0x0</span>, Output: <span class=\"built_in\">esi</span>, Inputs [<span class=\"built_in\">esi</span>, <span class=\"built_in\">esi</span>])</div><div class=\"line\">OrGadget(Address: <span class=\"number\">0x40000</span>, Complexity <span class=\"number\">0.67</span>, Stack <span class=\"number\">0x4</span>, <span class=\"built_in\">Ip</span> <span class=\"number\">0x0</span>, Output: <span class=\"built_in\">esi</span>, Inputs [<span class=\"built_in\">esi</span>, <span class=\"built_in\">esi</span>])</div></pre></td></tr></table></figure>\n<p>实在百思不得其解   </p>\n<p>按理说<code>伪指令</code>并没有实际的机器码与之对应，但是<code>ret</code>对应<code>c3</code>，那么只能解释为<code>align 10h</code>对应<code>8d7600</code>了</p>\n<p>好在 Google 到了<a href=\"http://www.codingnow.com/2000/frame.htm?http://www.codingnow.com/2000/essay/align.htm\">一篇文章</a>，提到了汇编器处理<code>align</code>伪指令的原理</p>\n<blockquote>\n<p>我原来以为, VC 将插入 NOP 来对齐代码, 结果发现, 为了提高效率, VC 按情况填入了单字节,双字节, 三字节指令做空操作, 使空操作的时间最短. 当需要插入 1 字节时, 理所当然的插入一个 0x90 (NOP); 需要插入 2 字节时则是 0x8b 0xff (MOV DI,DI) 这也无可厚非, 此指令不破坏任何寄存器, 也不影响标志位; 可需要填入 3 个字节的时候, 我用的 VC6 却令人费解的填入了 0x8d 0x49 0x00 (LEA CX,[BX+DI+00]), 很明显它影响了 CX, 而风魂的代码就是受到了它的影响.</p>\n</blockquote>\n<p>我这才恍然大悟，拿 capstone 反汇编了一下<code>8d7600</code>得到</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">lea</span>\t<span class=\"built_in\">esi</span>, <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">esi</span>]</div></pre></td></tr></table></figure>\n<p>果然，汇编器在处理<code>align</code>时，插入了这样一个<code>不破坏任何寄存器也不影响标志位</code>的指令来实现对齐效果</p>\n<p>而 Q（使用 capstone 反汇编）接收到传入的指令时，自然会按照实际的机器指令而不是<code>align 10h</code>来进行 Gadget 判断，所以出现了上面的结果</p>\n<p>大致如此…</p>\n"},{"title":"Spider-01-MyThreadPool","date":"2016-04-02T08:08:14.000Z","_content":"\n# 知道创宇爬虫设计第一天：threadpool\n\n题目要求自己实现线程池，研究了好几篇博客之后，大致提取出几个要点：\n\n* 使用默认的`Thread()`创建线程时，通常都是直接绑定一个具体的`func `  \n但若使用线程池，初始化的线程数在有些时候可能会多于任务数   \n因此，在自定义`MyThread()`时，采用先绑定整个任务队列，然后逐条取出任务`func`执行的方式   \n* 使用`MyThreadPool`提前创建所需数目的线程，再分配给具体任务`func`\n* 自定义`MyThread()`中需设置`self.daemon = True`，否则完成所有任务后仍不会推出\n* `Queue()`提供了两个非常好用的方法\n\t* `task_done()`一条任务完成时通知整个队列，空闲下来的线程就可以被分配新任务\n\t* `join()`在所有任务执行完成之前阻塞主线程\n\n# 代码\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nfrom threading import Thread\nfrom Queue import Queue\n\n\nclass MyThreadPool(object):\n    def __init__(self, num_threads=20):\n        self.tasks = Queue(num_threads)\n        for _ in xrange(num_threads):\n            # Init the pool with the number of num_threads\n            MyThread(self.tasks)\n\n    def add_task(self, func, *args, **kwargs):\n        self.tasks.put((func, args, kwargs))\n\n    def wait_completion(self):\n        # Blocks until all items in the queue have been gotten and processed.\n        self.tasks.join()\n\n\nclass MyThread(Thread):\n    def __init__(self, tasks):\n        Thread.__init__(self)\n        self.tasks = tasks\n        # This must be set before start() is called. The entire Python program\n        # exits when no alive non-daemon threads are left.\n        self.daemon = True\n        self.start()\n\n    def run(self):\n        while True:\n            # Block until an item is available.\n            func, args, kwargs = self.tasks.get()\n            try:\n                func(*args, **kwargs)\n            except Exception as e:\n                print e\n            # Tells the queue that the processing on the task is complete.\n            self.tasks.task_done()\n\n\nif __name__ == '__main__':\n    ''' test task '''\n    from time import sleep\n\n    def nap(sec):\n        sleep(sec)\n        print 'Had a %ds nap...' % sec\n\n    tp = MyThreadPool(5)\n    nap_time = [i for i in xrange(1, 11)]\n    for i, t in enumerate(nap_time, 1):\n        print 'Worker No.%d needs a %ds nap.' % (i, t)\n        tp.add_task(nap, t)\n\n    tp.wait_completion()\n\n```\n\n\n# 参考\n1. [python线程池](http://www.the5fire.com/python-thread-pool.html)   \n2. [【Howie玩python】-多线程从0到1到澡堂子洗澡](http://github.howie.wang/2016/01/07/python-threading/)\n","source":"_posts/Spider-01-MyThreadPool.md","raw":"---\ntitle: Spider-01-MyThreadPool\ndate: 2016-04-02 16:08:14\ncategory: [Python]\ntags: [Python, Spider, ThreadPool]\n---\n\n# 知道创宇爬虫设计第一天：threadpool\n\n题目要求自己实现线程池，研究了好几篇博客之后，大致提取出几个要点：\n\n* 使用默认的`Thread()`创建线程时，通常都是直接绑定一个具体的`func `  \n但若使用线程池，初始化的线程数在有些时候可能会多于任务数   \n因此，在自定义`MyThread()`时，采用先绑定整个任务队列，然后逐条取出任务`func`执行的方式   \n* 使用`MyThreadPool`提前创建所需数目的线程，再分配给具体任务`func`\n* 自定义`MyThread()`中需设置`self.daemon = True`，否则完成所有任务后仍不会推出\n* `Queue()`提供了两个非常好用的方法\n\t* `task_done()`一条任务完成时通知整个队列，空闲下来的线程就可以被分配新任务\n\t* `join()`在所有任务执行完成之前阻塞主线程\n\n# 代码\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nfrom threading import Thread\nfrom Queue import Queue\n\n\nclass MyThreadPool(object):\n    def __init__(self, num_threads=20):\n        self.tasks = Queue(num_threads)\n        for _ in xrange(num_threads):\n            # Init the pool with the number of num_threads\n            MyThread(self.tasks)\n\n    def add_task(self, func, *args, **kwargs):\n        self.tasks.put((func, args, kwargs))\n\n    def wait_completion(self):\n        # Blocks until all items in the queue have been gotten and processed.\n        self.tasks.join()\n\n\nclass MyThread(Thread):\n    def __init__(self, tasks):\n        Thread.__init__(self)\n        self.tasks = tasks\n        # This must be set before start() is called. The entire Python program\n        # exits when no alive non-daemon threads are left.\n        self.daemon = True\n        self.start()\n\n    def run(self):\n        while True:\n            # Block until an item is available.\n            func, args, kwargs = self.tasks.get()\n            try:\n                func(*args, **kwargs)\n            except Exception as e:\n                print e\n            # Tells the queue that the processing on the task is complete.\n            self.tasks.task_done()\n\n\nif __name__ == '__main__':\n    ''' test task '''\n    from time import sleep\n\n    def nap(sec):\n        sleep(sec)\n        print 'Had a %ds nap...' % sec\n\n    tp = MyThreadPool(5)\n    nap_time = [i for i in xrange(1, 11)]\n    for i, t in enumerate(nap_time, 1):\n        print 'Worker No.%d needs a %ds nap.' % (i, t)\n        tp.add_task(nap, t)\n\n    tp.wait_completion()\n\n```\n\n\n# 参考\n1. [python线程池](http://www.the5fire.com/python-thread-pool.html)   \n2. [【Howie玩python】-多线程从0到1到澡堂子洗澡](http://github.howie.wang/2016/01/07/python-threading/)\n","slug":"Spider-01-MyThreadPool","published":1,"updated":"2016-07-06T14:06:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fu000093npx5bzt7wcv","content":"<h1 id=\"知道创宇爬虫设计第一天：threadpool\"><a href=\"#知道创宇爬虫设计第一天：threadpool\" class=\"headerlink\" title=\"知道创宇爬虫设计第一天：threadpool\"></a>知道创宇爬虫设计第一天：threadpool</h1><p>题目要求自己实现线程池，研究了好几篇博客之后，大致提取出几个要点：</p>\n<ul>\n<li>使用默认的<code>Thread()</code>创建线程时，通常都是直接绑定一个具体的<code>func</code><br>但若使用线程池，初始化的线程数在有些时候可能会多于任务数<br>因此，在自定义<code>MyThread()</code>时，采用先绑定整个任务队列，然后逐条取出任务<code>func</code>执行的方式   </li>\n<li>使用<code>MyThreadPool</code>提前创建所需数目的线程，再分配给具体任务<code>func</code></li>\n<li>自定义<code>MyThread()</code>中需设置<code>self.daemon = True</code>，否则完成所有任务后仍不会推出</li>\n<li><code>Queue()</code>提供了两个非常好用的方法<ul>\n<li><code>task_done()</code>一条任务完成时通知整个队列，空闲下来的线程就可以被分配新任务</li>\n<li><code>join()</code>在所有任务执行完成之前阻塞主线程</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</div><div class=\"line\"><span class=\"keyword\">from</span> Queue <span class=\"keyword\">import</span> Queue</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadPool</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, num_threads=<span class=\"number\">20</span>)</span>:</span></div><div class=\"line\">        self.tasks = Queue(num_threads)</div><div class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> xrange(num_threads):</div><div class=\"line\">            <span class=\"comment\"># Init the pool with the number of num_threads</span></div><div class=\"line\">            MyThread(self.tasks)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_task</span><span class=\"params\">(self, func, *args, **kwargs)</span>:</span></div><div class=\"line\">        self.tasks.put((func, args, kwargs))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wait_completion</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># Blocks until all items in the queue have been gotten and processed.</span></div><div class=\"line\">        self.tasks.join()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span><span class=\"params\">(Thread)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, tasks)</span>:</span></div><div class=\"line\">        Thread.__init__(self)</div><div class=\"line\">        self.tasks = tasks</div><div class=\"line\">        <span class=\"comment\"># This must be set before start() is called. The entire Python program</span></div><div class=\"line\">        <span class=\"comment\"># exits when no alive non-daemon threads are left.</span></div><div class=\"line\">        self.daemon = <span class=\"keyword\">True</span></div><div class=\"line\">        self.start()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">            <span class=\"comment\"># Block until an item is available.</span></div><div class=\"line\">            func, args, kwargs = self.tasks.get()</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                func(*args, **kwargs)</div><div class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">                <span class=\"keyword\">print</span> e</div><div class=\"line\">            <span class=\"comment\"># Tells the queue that the processing on the task is complete.</span></div><div class=\"line\">            self.tasks.task_done()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"string\">''' test task '''</span></div><div class=\"line\">    <span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nap</span><span class=\"params\">(sec)</span>:</span></div><div class=\"line\">        sleep(sec)</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Had a %ds nap...'</span> % sec</div><div class=\"line\"></div><div class=\"line\">    tp = MyThreadPool(<span class=\"number\">5</span>)</div><div class=\"line\">    nap_time = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">11</span>)]</div><div class=\"line\">    <span class=\"keyword\">for</span> i, t <span class=\"keyword\">in</span> enumerate(nap_time, <span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Worker No.%d needs a %ds nap.'</span> % (i, t)</div><div class=\"line\">        tp.add_task(nap, t)</div><div class=\"line\"></div><div class=\"line\">    tp.wait_completion()</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"http://www.the5fire.com/python-thread-pool.html\" target=\"_blank\" rel=\"external\">python线程池</a>   </li>\n<li><a href=\"http://github.howie.wang/2016/01/07/python-threading/\" target=\"_blank\" rel=\"external\">【Howie玩python】-多线程从0到1到澡堂子洗澡</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"知道创宇爬虫设计第一天：threadpool\"><a href=\"#知道创宇爬虫设计第一天：threadpool\" class=\"headerlink\" title=\"知道创宇爬虫设计第一天：threadpool\"></a>知道创宇爬虫设计第一天：threadpool</h1><p>题目要求自己实现线程池，研究了好几篇博客之后，大致提取出几个要点：</p>\n<ul>\n<li>使用默认的<code>Thread()</code>创建线程时，通常都是直接绑定一个具体的<code>func</code><br>但若使用线程池，初始化的线程数在有些时候可能会多于任务数<br>因此，在自定义<code>MyThread()</code>时，采用先绑定整个任务队列，然后逐条取出任务<code>func</code>执行的方式   </li>\n<li>使用<code>MyThreadPool</code>提前创建所需数目的线程，再分配给具体任务<code>func</code></li>\n<li>自定义<code>MyThread()</code>中需设置<code>self.daemon = True</code>，否则完成所有任务后仍不会推出</li>\n<li><code>Queue()</code>提供了两个非常好用的方法<ul>\n<li><code>task_done()</code>一条任务完成时通知整个队列，空闲下来的线程就可以被分配新任务</li>\n<li><code>join()</code>在所有任务执行完成之前阻塞主线程</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</div><div class=\"line\"><span class=\"keyword\">from</span> Queue <span class=\"keyword\">import</span> Queue</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadPool</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, num_threads=<span class=\"number\">20</span>)</span>:</span></div><div class=\"line\">        self.tasks = Queue(num_threads)</div><div class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> xrange(num_threads):</div><div class=\"line\">            <span class=\"comment\"># Init the pool with the number of num_threads</span></div><div class=\"line\">            MyThread(self.tasks)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_task</span><span class=\"params\">(self, func, *args, **kwargs)</span>:</span></div><div class=\"line\">        self.tasks.put((func, args, kwargs))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wait_completion</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># Blocks until all items in the queue have been gotten and processed.</span></div><div class=\"line\">        self.tasks.join()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span><span class=\"params\">(Thread)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, tasks)</span>:</span></div><div class=\"line\">        Thread.__init__(self)</div><div class=\"line\">        self.tasks = tasks</div><div class=\"line\">        <span class=\"comment\"># This must be set before start() is called. The entire Python program</span></div><div class=\"line\">        <span class=\"comment\"># exits when no alive non-daemon threads are left.</span></div><div class=\"line\">        self.daemon = <span class=\"keyword\">True</span></div><div class=\"line\">        self.start()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">            <span class=\"comment\"># Block until an item is available.</span></div><div class=\"line\">            func, args, kwargs = self.tasks.get()</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                func(*args, **kwargs)</div><div class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">                <span class=\"keyword\">print</span> e</div><div class=\"line\">            <span class=\"comment\"># Tells the queue that the processing on the task is complete.</span></div><div class=\"line\">            self.tasks.task_done()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"string\">''' test task '''</span></div><div class=\"line\">    <span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nap</span><span class=\"params\">(sec)</span>:</span></div><div class=\"line\">        sleep(sec)</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Had a %ds nap...'</span> % sec</div><div class=\"line\"></div><div class=\"line\">    tp = MyThreadPool(<span class=\"number\">5</span>)</div><div class=\"line\">    nap_time = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">11</span>)]</div><div class=\"line\">    <span class=\"keyword\">for</span> i, t <span class=\"keyword\">in</span> enumerate(nap_time, <span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Worker No.%d needs a %ds nap.'</span> % (i, t)</div><div class=\"line\">        tp.add_task(nap, t)</div><div class=\"line\"></div><div class=\"line\">    tp.wait_completion()</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"http://www.the5fire.com/python-thread-pool.html\">python线程池</a>   </li>\n<li><a href=\"http://github.howie.wang/2016/01/07/python-threading/\">【Howie玩python】-多线程从0到1到澡堂子洗澡</a></li>\n</ol>\n"},{"title":"Spider-02-logging","date":"2016-04-03T13:42:37.000Z","_content":"\n# 知道创宇爬虫设计第二天：logging\n\n[此文章](http://blog.chinaunix.net/uid-26000296-id-4372063.html)的测试用例详细实用，对logging模块的解析也很不错，现把自己理解的要点摘录如下\n\n- 只要logging.getLogger(name)中名称参数name相同则返回的Logger实例就是同一个，且仅有一个，也即name与Logger实例一一对应\n- 子孙既会将消息分发给他的handler进行处理，也会传递给所有的祖先Logger处理\n- 若为Handler加Filter则所有使用了该Handler的Logger都会受到影响。而为Logger添加Filter只会影响到自身\n- 典型的多模块场景下使用logging的方式，是在main模块中配置logging，这个配置会作用于其所有子模块\n- 使用配置文件`logging.config.fileConfig(\"logging.conf\")`([来源](http://my.oschina.net/leejun2005/blog/126713))\n\n```python logging.conf\n# 定义logger模块，root是父类，必需存在的，其它的是自定义。\n# logging.getLogger(NAME)便相当于向logging模块注册了一种日志打印\n# name 中用 . 表示 log 的继承关系\n[loggers]\nkeys=root,infoLogger,errorLogger\n \n# 定义handler\n[handlers]\nkeys=infoHandler,errorHandler\n \n# 定义格式化输出\n[formatters]\nkeys=infoFmt,errorFmt\n \n#--------------------------------------------------\n# 实现上面定义的logger模块，必需是[logger_xxxx]这样的形式\n#--------------------------------------------------\n# [logger_xxxx] logger_模块名称\n# level     级别，级别有DEBUG、INFO、WARNING、ERROR、CRITICAL\n# handlers  处理类，可以有多个，用逗号分开\n# qualname  logger名称，应用程序通过 logging.getLogger获取。对于不能获取的名称，则记录到root模块。\n# propagate 是否继承父类的log信息，0:否 1:是\n[logger_root]\nlevel=INFO\nhandlers=errorHandler\n \n[logger_errorLogger]\nlevel=ERROR\nhandlers=errorHandler\npropagate=0\nqualname=errorLogger\n \n[logger_infoLogger]\nlevel=INFO\nhandlers=infoHandler\npropagate=0\nqualname=infoLogger\n \n#--------------------------------------------------\n# handler\n#--------------------------------------------------\n# [handler_xxxx]\n# class handler类名\n# level 日志级别\n# formatter，上面定义的formatter\n# args handler初始化函数参数\n \n[handler_infoHandler]\nclass=StreamHandler\nlevel=INFO\nformatter=infoFmt\nargs=(sys.stdout,)\n \n[handler_errorHandler]\nclass=logging.handlers.TimedRotatingFileHandler\nlevel=ERROR\nformatter=errorFmt\n# When computing the next rollover time for the first time (when the handler is created),\n# the last modification time of an existing log file, or else the current time,\n# is used to compute when the next rotation will occur.\n# 这个功能太鸡肋了，是从handler被创建的时间算起，不能按自然时间 rotation 切分，除非程序一直运行，否则这个功能会有问题\n# 临时解决方案参考下面的链接：Python 多进程日志记录\n# http://blogread.cn/it/article/4175?f=wb2\nargs=('C:\\\\Users\\\\june\\\\Desktop\\\\error.log', 'M', 1, 5)\n \n#--------------------------------------------------\n# 日志格式\n#--------------------------------------------------\n# %(asctime)s       年-月-日 时-分-秒,毫秒 2013-04-26 20:10:43,745\n# %(filename)s      文件名，不含目录\n# %(pathname)s      目录名，完整路径\n# %(funcName)s      函数名\n# %(levelname)s     级别名\n# %(lineno)d        行号\n# %(module)s        模块名\n# %(message)s       消息体\n# %(name)s          日志模块名\n# %(process)d       进程id\n# %(processName)s   进程名\n# %(thread)d        线程id\n# %(threadName)s    线程名\n \n[formatter_infoFmt]\nformat=%(asctime)s %(levelname)s %(message)s\ndatefmt=\nclass=logging.Formatter\n \n[formatter_errorFmt]\nformat=%(asctime)s %(levelname)s %(message)s\ndatefmt=\nclass=logging.Formatter\n```\n\n# 测试用例\n\n```python main.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'Air9'\n\n\n\nimport logging\nimport logging.config\n\nlogging.config.fileConfig('main.conf')\nroot_logger = logging.getLogger('root')\nroot_logger.debug('test root logger')\n\nlogger = logging.getLogger('main')\nlogger.info('test main logger')\nlogger.info('start import mod')\nimport mod\n\nlogger.debug('test mod.testmod()')\nmod.testmod()\n\nroot_logger.info('finish test')\n```\n```python main.conf\n[loggers]\nkeys = root, main\n\n[handlers]\nkeys = consoleHandler\n\n[formatters]\nkeys = simpleFormatter\n\n[logger_root]\nlevel = DEBUG\nhandlers = consoleHandler\n\n[logger_main]\nlevel = DEBUG\nhandlers = consoleHandler\nqualname = main\npropagate = 0\n\n[handler_consoleHandler]\nclass = StreamHandler\nlevel = DEBUG\nformatter = simpleFormatter\nargs = (sys.stdout,)\n\n[formatter_simpleFormatter]\nformat = %(asctime)s - %(name)s - [line:%(lineno)d] - %(levelname)s - %(message)s\ndatefmt = \n```\n```python mod.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'Air9'\n\n\n\nimport logging\nimport submod\n\nlogger = logging.getLogger('main.mod')\nlogger.info('logger main.mod')\n\ndef testmod():\n    logger.debug('test mod.testmod()')\n    submod.testsubmod()\n```\n```python submod.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'Air9'\n\n\n\nimport logging\n\nlogger = logging.getLogger('main.mod.submod')\nlogger.info('submod.logger')\n\ndef testsubmod():\n    logger.debug('test submod.testsubmod()')\n```\n```shell output\n2016-04-04 14:46:24,148 - root - [line:13] - DEBUG - test root logger\n2016-04-04 14:46:24,148 - main - [line:16] - INFO - test main logger\n2016-04-04 14:46:24,148 - main - [line:17] - INFO - start import mod\n2016-04-04 14:46:24,148 - main.mod.submod - [line:11] - INFO - submod.logger\n2016-04-04 14:46:24,148 - main.mod - [line:12] - INFO - logger main.mod\n2016-04-04 14:46:24,149 - main - [line:20] - DEBUG - test mod.testmod()\n2016-04-04 14:46:24,149 - main.mod - [line:15] - DEBUG - test mod.testmod()\n2016-04-04 14:46:24,149 - main.mod.submod - [line:14] - DEBUG - test submod.looger\n2016-04-04 14:46:24,149 - root - [line:23] - INFO - finish test\n```\n\n# 参考\n\n- http://my.oschina.net/leejun2005/blog/126713\n- http://blog.chinaunix.net/uid-26000296-id-4372063.html\n- http://www.tuicool.com/articles/bmMfUfE","source":"_posts/Spider-02-logging.md","raw":"---\ntitle: Spider-02-logging\ndate: 2016-04-03 21:42:37\ncategory: [Python]\ntags: [Python, Spider, logging]\n---\n\n# 知道创宇爬虫设计第二天：logging\n\n[此文章](http://blog.chinaunix.net/uid-26000296-id-4372063.html)的测试用例详细实用，对logging模块的解析也很不错，现把自己理解的要点摘录如下\n\n- 只要logging.getLogger(name)中名称参数name相同则返回的Logger实例就是同一个，且仅有一个，也即name与Logger实例一一对应\n- 子孙既会将消息分发给他的handler进行处理，也会传递给所有的祖先Logger处理\n- 若为Handler加Filter则所有使用了该Handler的Logger都会受到影响。而为Logger添加Filter只会影响到自身\n- 典型的多模块场景下使用logging的方式，是在main模块中配置logging，这个配置会作用于其所有子模块\n- 使用配置文件`logging.config.fileConfig(\"logging.conf\")`([来源](http://my.oschina.net/leejun2005/blog/126713))\n\n```python logging.conf\n# 定义logger模块，root是父类，必需存在的，其它的是自定义。\n# logging.getLogger(NAME)便相当于向logging模块注册了一种日志打印\n# name 中用 . 表示 log 的继承关系\n[loggers]\nkeys=root,infoLogger,errorLogger\n \n# 定义handler\n[handlers]\nkeys=infoHandler,errorHandler\n \n# 定义格式化输出\n[formatters]\nkeys=infoFmt,errorFmt\n \n#--------------------------------------------------\n# 实现上面定义的logger模块，必需是[logger_xxxx]这样的形式\n#--------------------------------------------------\n# [logger_xxxx] logger_模块名称\n# level     级别，级别有DEBUG、INFO、WARNING、ERROR、CRITICAL\n# handlers  处理类，可以有多个，用逗号分开\n# qualname  logger名称，应用程序通过 logging.getLogger获取。对于不能获取的名称，则记录到root模块。\n# propagate 是否继承父类的log信息，0:否 1:是\n[logger_root]\nlevel=INFO\nhandlers=errorHandler\n \n[logger_errorLogger]\nlevel=ERROR\nhandlers=errorHandler\npropagate=0\nqualname=errorLogger\n \n[logger_infoLogger]\nlevel=INFO\nhandlers=infoHandler\npropagate=0\nqualname=infoLogger\n \n#--------------------------------------------------\n# handler\n#--------------------------------------------------\n# [handler_xxxx]\n# class handler类名\n# level 日志级别\n# formatter，上面定义的formatter\n# args handler初始化函数参数\n \n[handler_infoHandler]\nclass=StreamHandler\nlevel=INFO\nformatter=infoFmt\nargs=(sys.stdout,)\n \n[handler_errorHandler]\nclass=logging.handlers.TimedRotatingFileHandler\nlevel=ERROR\nformatter=errorFmt\n# When computing the next rollover time for the first time (when the handler is created),\n# the last modification time of an existing log file, or else the current time,\n# is used to compute when the next rotation will occur.\n# 这个功能太鸡肋了，是从handler被创建的时间算起，不能按自然时间 rotation 切分，除非程序一直运行，否则这个功能会有问题\n# 临时解决方案参考下面的链接：Python 多进程日志记录\n# http://blogread.cn/it/article/4175?f=wb2\nargs=('C:\\\\Users\\\\june\\\\Desktop\\\\error.log', 'M', 1, 5)\n \n#--------------------------------------------------\n# 日志格式\n#--------------------------------------------------\n# %(asctime)s       年-月-日 时-分-秒,毫秒 2013-04-26 20:10:43,745\n# %(filename)s      文件名，不含目录\n# %(pathname)s      目录名，完整路径\n# %(funcName)s      函数名\n# %(levelname)s     级别名\n# %(lineno)d        行号\n# %(module)s        模块名\n# %(message)s       消息体\n# %(name)s          日志模块名\n# %(process)d       进程id\n# %(processName)s   进程名\n# %(thread)d        线程id\n# %(threadName)s    线程名\n \n[formatter_infoFmt]\nformat=%(asctime)s %(levelname)s %(message)s\ndatefmt=\nclass=logging.Formatter\n \n[formatter_errorFmt]\nformat=%(asctime)s %(levelname)s %(message)s\ndatefmt=\nclass=logging.Formatter\n```\n\n# 测试用例\n\n```python main.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'Air9'\n\n\n\nimport logging\nimport logging.config\n\nlogging.config.fileConfig('main.conf')\nroot_logger = logging.getLogger('root')\nroot_logger.debug('test root logger')\n\nlogger = logging.getLogger('main')\nlogger.info('test main logger')\nlogger.info('start import mod')\nimport mod\n\nlogger.debug('test mod.testmod()')\nmod.testmod()\n\nroot_logger.info('finish test')\n```\n```python main.conf\n[loggers]\nkeys = root, main\n\n[handlers]\nkeys = consoleHandler\n\n[formatters]\nkeys = simpleFormatter\n\n[logger_root]\nlevel = DEBUG\nhandlers = consoleHandler\n\n[logger_main]\nlevel = DEBUG\nhandlers = consoleHandler\nqualname = main\npropagate = 0\n\n[handler_consoleHandler]\nclass = StreamHandler\nlevel = DEBUG\nformatter = simpleFormatter\nargs = (sys.stdout,)\n\n[formatter_simpleFormatter]\nformat = %(asctime)s - %(name)s - [line:%(lineno)d] - %(levelname)s - %(message)s\ndatefmt = \n```\n```python mod.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'Air9'\n\n\n\nimport logging\nimport submod\n\nlogger = logging.getLogger('main.mod')\nlogger.info('logger main.mod')\n\ndef testmod():\n    logger.debug('test mod.testmod()')\n    submod.testsubmod()\n```\n```python submod.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'Air9'\n\n\n\nimport logging\n\nlogger = logging.getLogger('main.mod.submod')\nlogger.info('submod.logger')\n\ndef testsubmod():\n    logger.debug('test submod.testsubmod()')\n```\n```shell output\n2016-04-04 14:46:24,148 - root - [line:13] - DEBUG - test root logger\n2016-04-04 14:46:24,148 - main - [line:16] - INFO - test main logger\n2016-04-04 14:46:24,148 - main - [line:17] - INFO - start import mod\n2016-04-04 14:46:24,148 - main.mod.submod - [line:11] - INFO - submod.logger\n2016-04-04 14:46:24,148 - main.mod - [line:12] - INFO - logger main.mod\n2016-04-04 14:46:24,149 - main - [line:20] - DEBUG - test mod.testmod()\n2016-04-04 14:46:24,149 - main.mod - [line:15] - DEBUG - test mod.testmod()\n2016-04-04 14:46:24,149 - main.mod.submod - [line:14] - DEBUG - test submod.looger\n2016-04-04 14:46:24,149 - root - [line:23] - INFO - finish test\n```\n\n# 参考\n\n- http://my.oschina.net/leejun2005/blog/126713\n- http://blog.chinaunix.net/uid-26000296-id-4372063.html\n- http://www.tuicool.com/articles/bmMfUfE","slug":"Spider-02-logging","published":1,"updated":"2016-07-06T14:07:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fu2000a3npx8q7y9ax2","content":"<h1 id=\"知道创宇爬虫设计第二天：logging\"><a href=\"#知道创宇爬虫设计第二天：logging\" class=\"headerlink\" title=\"知道创宇爬虫设计第二天：logging\"></a>知道创宇爬虫设计第二天：logging</h1><p><a href=\"http://blog.chinaunix.net/uid-26000296-id-4372063.html\" target=\"_blank\" rel=\"external\">此文章</a>的测试用例详细实用，对logging模块的解析也很不错，现把自己理解的要点摘录如下</p>\n<ul>\n<li>只要logging.getLogger(name)中名称参数name相同则返回的Logger实例就是同一个，且仅有一个，也即name与Logger实例一一对应</li>\n<li>子孙既会将消息分发给他的handler进行处理，也会传递给所有的祖先Logger处理</li>\n<li>若为Handler加Filter则所有使用了该Handler的Logger都会受到影响。而为Logger添加Filter只会影响到自身</li>\n<li>典型的多模块场景下使用logging的方式，是在main模块中配置logging，这个配置会作用于其所有子模块</li>\n<li>使用配置文件<code>logging.config.fileConfig(&quot;logging.conf&quot;)</code>(<a href=\"http://my.oschina.net/leejun2005/blog/126713\" target=\"_blank\" rel=\"external\">来源</a>)</li>\n</ul>\n<figure class=\"highlight\"><figcaption><span>logging.conf</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"># 定义logger模块，root是父类，必需存在的，其它的是自定义。</div><div class=\"line\"># logging.getLogger(NAME)便相当于向logging模块注册了一种日志打印</div><div class=\"line\"># name 中用 . 表示 log 的继承关系</div><div class=\"line\">[loggers]</div><div class=\"line\">keys=root,infoLogger,errorLogger</div><div class=\"line\"> </div><div class=\"line\"># 定义handler</div><div class=\"line\">[handlers]</div><div class=\"line\">keys=infoHandler,errorHandler</div><div class=\"line\"> </div><div class=\"line\"># 定义格式化输出</div><div class=\"line\">[formatters]</div><div class=\"line\">keys=infoFmt,errorFmt</div><div class=\"line\"> </div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># 实现上面定义的logger模块，必需是[logger_xxxx]这样的形式</div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># [logger_xxxx] logger_模块名称</div><div class=\"line\"># level     级别，级别有DEBUG、INFO、WARNING、ERROR、CRITICAL</div><div class=\"line\"># handlers  处理类，可以有多个，用逗号分开</div><div class=\"line\"># qualname  logger名称，应用程序通过 logging.getLogger获取。对于不能获取的名称，则记录到root模块。</div><div class=\"line\"># propagate 是否继承父类的log信息，0:否 1:是</div><div class=\"line\">[logger_root]</div><div class=\"line\">level=INFO</div><div class=\"line\">handlers=errorHandler</div><div class=\"line\"> </div><div class=\"line\">[logger_errorLogger]</div><div class=\"line\">level=ERROR</div><div class=\"line\">handlers=errorHandler</div><div class=\"line\">propagate=0</div><div class=\"line\">qualname=errorLogger</div><div class=\"line\"> </div><div class=\"line\">[logger_infoLogger]</div><div class=\"line\">level=INFO</div><div class=\"line\">handlers=infoHandler</div><div class=\"line\">propagate=0</div><div class=\"line\">qualname=infoLogger</div><div class=\"line\"> </div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># handler</div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># [handler_xxxx]</div><div class=\"line\"># class handler类名</div><div class=\"line\"># level 日志级别</div><div class=\"line\"># formatter，上面定义的formatter</div><div class=\"line\"># args handler初始化函数参数</div><div class=\"line\"> </div><div class=\"line\">[handler_infoHandler]</div><div class=\"line\">class=StreamHandler</div><div class=\"line\">level=INFO</div><div class=\"line\">formatter=infoFmt</div><div class=\"line\">args=(sys.stdout,)</div><div class=\"line\"> </div><div class=\"line\">[handler_errorHandler]</div><div class=\"line\">class=logging.handlers.TimedRotatingFileHandler</div><div class=\"line\">level=ERROR</div><div class=\"line\">formatter=errorFmt</div><div class=\"line\"># When computing the next rollover time for the first time (when the handler is created),</div><div class=\"line\"># the last modification time of an existing log file, or else the current time,</div><div class=\"line\"># is used to compute when the next rotation will occur.</div><div class=\"line\"># 这个功能太鸡肋了，是从handler被创建的时间算起，不能按自然时间 rotation 切分，除非程序一直运行，否则这个功能会有问题</div><div class=\"line\"># 临时解决方案参考下面的链接：Python 多进程日志记录</div><div class=\"line\"># http://blogread.cn/it/article/4175?f=wb2</div><div class=\"line\">args=('C:\\\\Users\\\\june\\\\Desktop\\\\error.log', 'M', 1, 5)</div><div class=\"line\"> </div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># 日志格式</div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># %(asctime)s       年-月-日 时-分-秒,毫秒 2013-04-26 20:10:43,745</div><div class=\"line\"># %(filename)s      文件名，不含目录</div><div class=\"line\"># %(pathname)s      目录名，完整路径</div><div class=\"line\"># %(funcName)s      函数名</div><div class=\"line\"># %(levelname)s     级别名</div><div class=\"line\"># %(lineno)d        行号</div><div class=\"line\"># %(module)s        模块名</div><div class=\"line\"># %(message)s       消息体</div><div class=\"line\"># %(name)s          日志模块名</div><div class=\"line\"># %(process)d       进程id</div><div class=\"line\"># %(processName)s   进程名</div><div class=\"line\"># %(thread)d        线程id</div><div class=\"line\"># %(threadName)s    线程名</div><div class=\"line\"> </div><div class=\"line\">[formatter_infoFmt]</div><div class=\"line\">format=%(asctime)s %(levelname)s %(message)s</div><div class=\"line\">datefmt=</div><div class=\"line\">class=logging.Formatter</div><div class=\"line\"> </div><div class=\"line\">[formatter_errorFmt]</div><div class=\"line\">format=%(asctime)s %(levelname)s %(message)s</div><div class=\"line\">datefmt=</div><div class=\"line\">class=logging.Formatter</div></pre></td></tr></table></figure>\n<h1 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h1><figure class=\"highlight python\"><figcaption><span>main.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">'Air9'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> logging.config</div><div class=\"line\"></div><div class=\"line\">logging.config.fileConfig(<span class=\"string\">'main.conf'</span>)</div><div class=\"line\">root_logger = logging.getLogger(<span class=\"string\">'root'</span>)</div><div class=\"line\">root_logger.debug(<span class=\"string\">'test root logger'</span>)</div><div class=\"line\"></div><div class=\"line\">logger = logging.getLogger(<span class=\"string\">'main'</span>)</div><div class=\"line\">logger.info(<span class=\"string\">'test main logger'</span>)</div><div class=\"line\">logger.info(<span class=\"string\">'start import mod'</span>)</div><div class=\"line\"><span class=\"keyword\">import</span> mod</div><div class=\"line\"></div><div class=\"line\">logger.debug(<span class=\"string\">'test mod.testmod()'</span>)</div><div class=\"line\">mod.testmod()</div><div class=\"line\"></div><div class=\"line\">root_logger.info(<span class=\"string\">'finish test'</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><figcaption><span>main.conf</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">[loggers]</div><div class=\"line\">keys = root, main</div><div class=\"line\"></div><div class=\"line\">[handlers]</div><div class=\"line\">keys = consoleHandler</div><div class=\"line\"></div><div class=\"line\">[formatters]</div><div class=\"line\">keys = simpleFormatter</div><div class=\"line\"></div><div class=\"line\">[logger_root]</div><div class=\"line\">level = DEBUG</div><div class=\"line\">handlers = consoleHandler</div><div class=\"line\"></div><div class=\"line\">[logger_main]</div><div class=\"line\">level = DEBUG</div><div class=\"line\">handlers = consoleHandler</div><div class=\"line\">qualname = main</div><div class=\"line\">propagate = 0</div><div class=\"line\"></div><div class=\"line\">[handler_consoleHandler]</div><div class=\"line\">class = StreamHandler</div><div class=\"line\">level = DEBUG</div><div class=\"line\">formatter = simpleFormatter</div><div class=\"line\">args = (sys.stdout,)</div><div class=\"line\"></div><div class=\"line\">[formatter_simpleFormatter]</div><div class=\"line\">format = %(asctime)s - %(name)s - [line:%(lineno)d] - %(levelname)s - %(message)s</div><div class=\"line\">datefmt =</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><figcaption><span>mod.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">'Air9'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> submod</div><div class=\"line\"></div><div class=\"line\">logger = logging.getLogger(<span class=\"string\">'main.mod'</span>)</div><div class=\"line\">logger.info(<span class=\"string\">'logger main.mod'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testmod</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    logger.debug(<span class=\"string\">'test mod.testmod()'</span>)</div><div class=\"line\">    submod.testsubmod()</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><figcaption><span>submod.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">'Air9'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"></div><div class=\"line\">logger = logging.getLogger(<span class=\"string\">'main.mod.submod'</span>)</div><div class=\"line\">logger.info(<span class=\"string\">'submod.logger'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testsubmod</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    logger.debug(<span class=\"string\">'test submod.testsubmod()'</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>output</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">2016-04-04 14:46:24,148 - root - [line:13] - DEBUG - test root logger</div><div class=\"line\">2016-04-04 14:46:24,148 - main - [line:16] - INFO - test main logger</div><div class=\"line\">2016-04-04 14:46:24,148 - main - [line:17] - INFO - start import mod</div><div class=\"line\">2016-04-04 14:46:24,148 - main.mod.submod - [line:11] - INFO - submod.logger</div><div class=\"line\">2016-04-04 14:46:24,148 - main.mod - [line:12] - INFO - logger main.mod</div><div class=\"line\">2016-04-04 14:46:24,149 - main - [line:20] - DEBUG - test mod.testmod()</div><div class=\"line\">2016-04-04 14:46:24,149 - main.mod - [line:15] - DEBUG - test mod.testmod()</div><div class=\"line\">2016-04-04 14:46:24,149 - main.mod.submod - [line:14] - DEBUG - test submod.looger</div><div class=\"line\">2016-04-04 14:46:24,149 - root - [line:23] - INFO - finish test</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://my.oschina.net/leejun2005/blog/126713\" target=\"_blank\" rel=\"external\">http://my.oschina.net/leejun2005/blog/126713</a></li>\n<li><a href=\"http://blog.chinaunix.net/uid-26000296-id-4372063.html\" target=\"_blank\" rel=\"external\">http://blog.chinaunix.net/uid-26000296-id-4372063.html</a></li>\n<li><a href=\"http://www.tuicool.com/articles/bmMfUfE\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/bmMfUfE</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"知道创宇爬虫设计第二天：logging\"><a href=\"#知道创宇爬虫设计第二天：logging\" class=\"headerlink\" title=\"知道创宇爬虫设计第二天：logging\"></a>知道创宇爬虫设计第二天：logging</h1><p><a href=\"http://blog.chinaunix.net/uid-26000296-id-4372063.html\">此文章</a>的测试用例详细实用，对logging模块的解析也很不错，现把自己理解的要点摘录如下</p>\n<ul>\n<li>只要logging.getLogger(name)中名称参数name相同则返回的Logger实例就是同一个，且仅有一个，也即name与Logger实例一一对应</li>\n<li>子孙既会将消息分发给他的handler进行处理，也会传递给所有的祖先Logger处理</li>\n<li>若为Handler加Filter则所有使用了该Handler的Logger都会受到影响。而为Logger添加Filter只会影响到自身</li>\n<li>典型的多模块场景下使用logging的方式，是在main模块中配置logging，这个配置会作用于其所有子模块</li>\n<li>使用配置文件<code>logging.config.fileConfig(&quot;logging.conf&quot;)</code>(<a href=\"http://my.oschina.net/leejun2005/blog/126713\">来源</a>)</li>\n</ul>\n<figure class=\"highlight\"><figcaption><span>logging.conf</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"># 定义logger模块，root是父类，必需存在的，其它的是自定义。</div><div class=\"line\"># logging.getLogger(NAME)便相当于向logging模块注册了一种日志打印</div><div class=\"line\"># name 中用 . 表示 log 的继承关系</div><div class=\"line\">[loggers]</div><div class=\"line\">keys=root,infoLogger,errorLogger</div><div class=\"line\"> </div><div class=\"line\"># 定义handler</div><div class=\"line\">[handlers]</div><div class=\"line\">keys=infoHandler,errorHandler</div><div class=\"line\"> </div><div class=\"line\"># 定义格式化输出</div><div class=\"line\">[formatters]</div><div class=\"line\">keys=infoFmt,errorFmt</div><div class=\"line\"> </div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># 实现上面定义的logger模块，必需是[logger_xxxx]这样的形式</div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># [logger_xxxx] logger_模块名称</div><div class=\"line\"># level     级别，级别有DEBUG、INFO、WARNING、ERROR、CRITICAL</div><div class=\"line\"># handlers  处理类，可以有多个，用逗号分开</div><div class=\"line\"># qualname  logger名称，应用程序通过 logging.getLogger获取。对于不能获取的名称，则记录到root模块。</div><div class=\"line\"># propagate 是否继承父类的log信息，0:否 1:是</div><div class=\"line\">[logger_root]</div><div class=\"line\">level=INFO</div><div class=\"line\">handlers=errorHandler</div><div class=\"line\"> </div><div class=\"line\">[logger_errorLogger]</div><div class=\"line\">level=ERROR</div><div class=\"line\">handlers=errorHandler</div><div class=\"line\">propagate=0</div><div class=\"line\">qualname=errorLogger</div><div class=\"line\"> </div><div class=\"line\">[logger_infoLogger]</div><div class=\"line\">level=INFO</div><div class=\"line\">handlers=infoHandler</div><div class=\"line\">propagate=0</div><div class=\"line\">qualname=infoLogger</div><div class=\"line\"> </div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># handler</div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># [handler_xxxx]</div><div class=\"line\"># class handler类名</div><div class=\"line\"># level 日志级别</div><div class=\"line\"># formatter，上面定义的formatter</div><div class=\"line\"># args handler初始化函数参数</div><div class=\"line\"> </div><div class=\"line\">[handler_infoHandler]</div><div class=\"line\">class=StreamHandler</div><div class=\"line\">level=INFO</div><div class=\"line\">formatter=infoFmt</div><div class=\"line\">args=(sys.stdout,)</div><div class=\"line\"> </div><div class=\"line\">[handler_errorHandler]</div><div class=\"line\">class=logging.handlers.TimedRotatingFileHandler</div><div class=\"line\">level=ERROR</div><div class=\"line\">formatter=errorFmt</div><div class=\"line\"># When computing the next rollover time for the first time (when the handler is created),</div><div class=\"line\"># the last modification time of an existing log file, or else the current time,</div><div class=\"line\"># is used to compute when the next rotation will occur.</div><div class=\"line\"># 这个功能太鸡肋了，是从handler被创建的时间算起，不能按自然时间 rotation 切分，除非程序一直运行，否则这个功能会有问题</div><div class=\"line\"># 临时解决方案参考下面的链接：Python 多进程日志记录</div><div class=\"line\"># http://blogread.cn/it/article/4175?f=wb2</div><div class=\"line\">args=('C:\\\\Users\\\\june\\\\Desktop\\\\error.log', 'M', 1, 5)</div><div class=\"line\"> </div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># 日志格式</div><div class=\"line\">#--------------------------------------------------</div><div class=\"line\"># %(asctime)s       年-月-日 时-分-秒,毫秒 2013-04-26 20:10:43,745</div><div class=\"line\"># %(filename)s      文件名，不含目录</div><div class=\"line\"># %(pathname)s      目录名，完整路径</div><div class=\"line\"># %(funcName)s      函数名</div><div class=\"line\"># %(levelname)s     级别名</div><div class=\"line\"># %(lineno)d        行号</div><div class=\"line\"># %(module)s        模块名</div><div class=\"line\"># %(message)s       消息体</div><div class=\"line\"># %(name)s          日志模块名</div><div class=\"line\"># %(process)d       进程id</div><div class=\"line\"># %(processName)s   进程名</div><div class=\"line\"># %(thread)d        线程id</div><div class=\"line\"># %(threadName)s    线程名</div><div class=\"line\"> </div><div class=\"line\">[formatter_infoFmt]</div><div class=\"line\">format=%(asctime)s %(levelname)s %(message)s</div><div class=\"line\">datefmt=</div><div class=\"line\">class=logging.Formatter</div><div class=\"line\"> </div><div class=\"line\">[formatter_errorFmt]</div><div class=\"line\">format=%(asctime)s %(levelname)s %(message)s</div><div class=\"line\">datefmt=</div><div class=\"line\">class=logging.Formatter</div></pre></td></tr></table></figure>\n<h1 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h1><figure class=\"highlight python\"><figcaption><span>main.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">'Air9'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> logging.config</div><div class=\"line\"></div><div class=\"line\">logging.config.fileConfig(<span class=\"string\">'main.conf'</span>)</div><div class=\"line\">root_logger = logging.getLogger(<span class=\"string\">'root'</span>)</div><div class=\"line\">root_logger.debug(<span class=\"string\">'test root logger'</span>)</div><div class=\"line\"></div><div class=\"line\">logger = logging.getLogger(<span class=\"string\">'main'</span>)</div><div class=\"line\">logger.info(<span class=\"string\">'test main logger'</span>)</div><div class=\"line\">logger.info(<span class=\"string\">'start import mod'</span>)</div><div class=\"line\"><span class=\"keyword\">import</span> mod</div><div class=\"line\"></div><div class=\"line\">logger.debug(<span class=\"string\">'test mod.testmod()'</span>)</div><div class=\"line\">mod.testmod()</div><div class=\"line\"></div><div class=\"line\">root_logger.info(<span class=\"string\">'finish test'</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><figcaption><span>main.conf</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">[loggers]</div><div class=\"line\">keys = root, main</div><div class=\"line\"></div><div class=\"line\">[handlers]</div><div class=\"line\">keys = consoleHandler</div><div class=\"line\"></div><div class=\"line\">[formatters]</div><div class=\"line\">keys = simpleFormatter</div><div class=\"line\"></div><div class=\"line\">[logger_root]</div><div class=\"line\">level = DEBUG</div><div class=\"line\">handlers = consoleHandler</div><div class=\"line\"></div><div class=\"line\">[logger_main]</div><div class=\"line\">level = DEBUG</div><div class=\"line\">handlers = consoleHandler</div><div class=\"line\">qualname = main</div><div class=\"line\">propagate = 0</div><div class=\"line\"></div><div class=\"line\">[handler_consoleHandler]</div><div class=\"line\">class = StreamHandler</div><div class=\"line\">level = DEBUG</div><div class=\"line\">formatter = simpleFormatter</div><div class=\"line\">args = (sys.stdout,)</div><div class=\"line\"></div><div class=\"line\">[formatter_simpleFormatter]</div><div class=\"line\">format = %(asctime)s - %(name)s - [line:%(lineno)d] - %(levelname)s - %(message)s</div><div class=\"line\">datefmt =</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><figcaption><span>mod.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">'Air9'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> submod</div><div class=\"line\"></div><div class=\"line\">logger = logging.getLogger(<span class=\"string\">'main.mod'</span>)</div><div class=\"line\">logger.info(<span class=\"string\">'logger main.mod'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testmod</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    logger.debug(<span class=\"string\">'test mod.testmod()'</span>)</div><div class=\"line\">    submod.testsubmod()</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><figcaption><span>submod.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">'Air9'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"></div><div class=\"line\">logger = logging.getLogger(<span class=\"string\">'main.mod.submod'</span>)</div><div class=\"line\">logger.info(<span class=\"string\">'submod.logger'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testsubmod</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    logger.debug(<span class=\"string\">'test submod.testsubmod()'</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>output</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">2016-04-04 14:46:24,148 - root - [line:13] - DEBUG - test root logger</div><div class=\"line\">2016-04-04 14:46:24,148 - main - [line:16] - INFO - test main logger</div><div class=\"line\">2016-04-04 14:46:24,148 - main - [line:17] - INFO - start import mod</div><div class=\"line\">2016-04-04 14:46:24,148 - main.mod.submod - [line:11] - INFO - submod.logger</div><div class=\"line\">2016-04-04 14:46:24,148 - main.mod - [line:12] - INFO - logger main.mod</div><div class=\"line\">2016-04-04 14:46:24,149 - main - [line:20] - DEBUG - test mod.testmod()</div><div class=\"line\">2016-04-04 14:46:24,149 - main.mod - [line:15] - DEBUG - test mod.testmod()</div><div class=\"line\">2016-04-04 14:46:24,149 - main.mod.submod - [line:14] - DEBUG - test submod.looger</div><div class=\"line\">2016-04-04 14:46:24,149 - root - [line:23] - INFO - finish test</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://my.oschina.net/leejun2005/blog/126713\">http://my.oschina.net/leejun2005/blog/126713</a></li>\n<li><a href=\"http://blog.chinaunix.net/uid-26000296-id-4372063.html\">http://blog.chinaunix.net/uid-26000296-id-4372063.html</a></li>\n<li><a href=\"http://www.tuicool.com/articles/bmMfUfE\">http://www.tuicool.com/articles/bmMfUfE</a></li>\n</ul>\n"},{"title":"Spider-03-argparse","date":"2016-04-04T07:39:12.000Z","_content":"\n# 知道创宇爬虫设计第三天：argparse\n\n题目原本是2012年的，要求的optparse模块已经过时，因此按照argparse来学习\n\n提取要点如下：\n\n- `class argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True)`\n- `ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])`\n- ArgumentParser通过parse_args()方法解析参数。它将检查命令行，把每个参数转换成恰当的类型并采取恰当的动作。在大部分情况下，这意味着将从命令行中解析出来的属性建立一个简单的 Namespace对象\n\n\n\n# 代码\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport argparse\n\n\ndef parse():\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\n        '-u', '--url', dest='url', required=True,\n        help='specify the URL to start crawl'\n        )\n    parser.add_argument(\n        '-d', '--depth', dest='depth',\n        default=1, type=int,\n        help='specify the depth of the spider (default: 1)'\n        )\n    parser.add_argument(\n        '-f', '--file', dest='logfile',\n        default='spider.log',\n        help='specify the path of logfile (default: spider.log)'\n        )\n    parser.add_argument(\n        '-l', '--level', dest='loglevel', choices=range(1, 6),\n        default=1, type=int,\n        help='specify the verbose level of the log (default: 1)'\n        )\n    parser.add_argument(\n        '--dbfile', dest='dbfile',\n        default='spider.db',\n        help='specify the path of sqlite dbfile (default: spider.db)'\n        )\n    parser.add_argument(\n        '--thread', dest='num_threads',\n        default=10, type=int,\n        help='specify the size of thread pool (default: 10)'\n        )\n    parser.add_argument(\n        '--keyword', dest='keyword',\n        help='specify the keyword'\n        )\n    parser.add_argument(\n        '--selftest', action='store_true',\n        help='self-test'\n        )\n\n    args = parser.parse_args()\n    # > Namespace(\n    #     dbfile='spider.db', depth=1, keyword=None,\n    #     logfile='spider.log', loglevel=1, num_threads=10,\n    #     selftest=False, url='www.baidu.com'\n    #     )\n    return args\n\n\nif __name__ == '__main__':\n    parse()\n\n```\n\n# 参考\n\n- https://docs.python.org/2/howto/argparse.html\n- https://docs.python.org/2/library/argparse.html#choices\n- http://python.usyiyi.cn/python_278/library/argparse.html\n- http://blog.xiayf.cn/2013/03/30/argparse/","source":"_posts/Spider-03-argparse.md","raw":"---\ntitle: Spider-03-argparse\ndate: 2016-04-04 15:39:12\ncategory: [Python]\ntags: [Python, Spider, argparse]\n---\n\n# 知道创宇爬虫设计第三天：argparse\n\n题目原本是2012年的，要求的optparse模块已经过时，因此按照argparse来学习\n\n提取要点如下：\n\n- `class argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True)`\n- `ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])`\n- ArgumentParser通过parse_args()方法解析参数。它将检查命令行，把每个参数转换成恰当的类型并采取恰当的动作。在大部分情况下，这意味着将从命令行中解析出来的属性建立一个简单的 Namespace对象\n\n\n\n# 代码\n\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport argparse\n\n\ndef parse():\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\n        '-u', '--url', dest='url', required=True,\n        help='specify the URL to start crawl'\n        )\n    parser.add_argument(\n        '-d', '--depth', dest='depth',\n        default=1, type=int,\n        help='specify the depth of the spider (default: 1)'\n        )\n    parser.add_argument(\n        '-f', '--file', dest='logfile',\n        default='spider.log',\n        help='specify the path of logfile (default: spider.log)'\n        )\n    parser.add_argument(\n        '-l', '--level', dest='loglevel', choices=range(1, 6),\n        default=1, type=int,\n        help='specify the verbose level of the log (default: 1)'\n        )\n    parser.add_argument(\n        '--dbfile', dest='dbfile',\n        default='spider.db',\n        help='specify the path of sqlite dbfile (default: spider.db)'\n        )\n    parser.add_argument(\n        '--thread', dest='num_threads',\n        default=10, type=int,\n        help='specify the size of thread pool (default: 10)'\n        )\n    parser.add_argument(\n        '--keyword', dest='keyword',\n        help='specify the keyword'\n        )\n    parser.add_argument(\n        '--selftest', action='store_true',\n        help='self-test'\n        )\n\n    args = parser.parse_args()\n    # > Namespace(\n    #     dbfile='spider.db', depth=1, keyword=None,\n    #     logfile='spider.log', loglevel=1, num_threads=10,\n    #     selftest=False, url='www.baidu.com'\n    #     )\n    return args\n\n\nif __name__ == '__main__':\n    parse()\n\n```\n\n# 参考\n\n- https://docs.python.org/2/howto/argparse.html\n- https://docs.python.org/2/library/argparse.html#choices\n- http://python.usyiyi.cn/python_278/library/argparse.html\n- http://blog.xiayf.cn/2013/03/30/argparse/","slug":"Spider-03-argparse","published":1,"updated":"2016-07-06T14:07:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fu3000b3npxxa6d56px","content":"<h1 id=\"知道创宇爬虫设计第三天：argparse\"><a href=\"#知道创宇爬虫设计第三天：argparse\" class=\"headerlink\" title=\"知道创宇爬虫设计第三天：argparse\"></a>知道创宇爬虫设计第三天：argparse</h1><p>题目原本是2012年的，要求的optparse模块已经过时，因此按照argparse来学习</p>\n<p>提取要点如下：</p>\n<ul>\n<li><code>class argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars=&#39;-&#39;, fromfile_prefix_chars=None, argument_default=None, conflict_handler=&#39;error&#39;, add_help=True)</code></li>\n<li><code>ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])</code></li>\n<li>ArgumentParser通过parse_args()方法解析参数。它将检查命令行，把每个参数转换成恰当的类型并采取恰当的动作。在大部分情况下，这意味着将从命令行中解析出来的属性建立一个简单的 Namespace对象</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> argparse</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    parser = argparse.ArgumentParser()</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-u'</span>, <span class=\"string\">'--url'</span>, dest=<span class=\"string\">'url'</span>, required=<span class=\"keyword\">True</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the URL to start crawl'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-d'</span>, <span class=\"string\">'--depth'</span>, dest=<span class=\"string\">'depth'</span>,</div><div class=\"line\">        default=<span class=\"number\">1</span>, type=int,</div><div class=\"line\">        help=<span class=\"string\">'specify the depth of the spider (default: 1)'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-f'</span>, <span class=\"string\">'--file'</span>, dest=<span class=\"string\">'logfile'</span>,</div><div class=\"line\">        default=<span class=\"string\">'spider.log'</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the path of logfile (default: spider.log)'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-l'</span>, <span class=\"string\">'--level'</span>, dest=<span class=\"string\">'loglevel'</span>, choices=range(<span class=\"number\">1</span>, <span class=\"number\">6</span>),</div><div class=\"line\">        default=<span class=\"number\">1</span>, type=int,</div><div class=\"line\">        help=<span class=\"string\">'specify the verbose level of the log (default: 1)'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--dbfile'</span>, dest=<span class=\"string\">'dbfile'</span>,</div><div class=\"line\">        default=<span class=\"string\">'spider.db'</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the path of sqlite dbfile (default: spider.db)'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--thread'</span>, dest=<span class=\"string\">'num_threads'</span>,</div><div class=\"line\">        default=<span class=\"number\">10</span>, type=int,</div><div class=\"line\">        help=<span class=\"string\">'specify the size of thread pool (default: 10)'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--keyword'</span>, dest=<span class=\"string\">'keyword'</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the keyword'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--selftest'</span>, action=<span class=\"string\">'store_true'</span>,</div><div class=\"line\">        help=<span class=\"string\">'self-test'</span></div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\">    args = parser.parse_args()</div><div class=\"line\">    <span class=\"comment\"># &gt; Namespace(</span></div><div class=\"line\">    <span class=\"comment\">#     dbfile='spider.db', depth=1, keyword=None,</span></div><div class=\"line\">    <span class=\"comment\">#     logfile='spider.log', loglevel=1, num_threads=10,</span></div><div class=\"line\">    <span class=\"comment\">#     selftest=False, url='www.baidu.com'</span></div><div class=\"line\">    <span class=\"comment\">#     )</span></div><div class=\"line\">    <span class=\"keyword\">return</span> args</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    parse()</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://docs.python.org/2/howto/argparse.html\" target=\"_blank\" rel=\"external\">https://docs.python.org/2/howto/argparse.html</a></li>\n<li><a href=\"https://docs.python.org/2/library/argparse.html#choices\" target=\"_blank\" rel=\"external\">https://docs.python.org/2/library/argparse.html#choices</a></li>\n<li><a href=\"http://python.usyiyi.cn/python_278/library/argparse.html\" target=\"_blank\" rel=\"external\">http://python.usyiyi.cn/python_278/library/argparse.html</a></li>\n<li><a href=\"http://blog.xiayf.cn/2013/03/30/argparse/\" target=\"_blank\" rel=\"external\">http://blog.xiayf.cn/2013/03/30/argparse/</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"知道创宇爬虫设计第三天：argparse\"><a href=\"#知道创宇爬虫设计第三天：argparse\" class=\"headerlink\" title=\"知道创宇爬虫设计第三天：argparse\"></a>知道创宇爬虫设计第三天：argparse</h1><p>题目原本是2012年的，要求的optparse模块已经过时，因此按照argparse来学习</p>\n<p>提取要点如下：</p>\n<ul>\n<li><code>class argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars=&#39;-&#39;, fromfile_prefix_chars=None, argument_default=None, conflict_handler=&#39;error&#39;, add_help=True)</code></li>\n<li><code>ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])</code></li>\n<li>ArgumentParser通过parse_args()方法解析参数。它将检查命令行，把每个参数转换成恰当的类型并采取恰当的动作。在大部分情况下，这意味着将从命令行中解析出来的属性建立一个简单的 Namespace对象</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> argparse</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    parser = argparse.ArgumentParser()</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-u'</span>, <span class=\"string\">'--url'</span>, dest=<span class=\"string\">'url'</span>, required=<span class=\"keyword\">True</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the URL to start crawl'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-d'</span>, <span class=\"string\">'--depth'</span>, dest=<span class=\"string\">'depth'</span>,</div><div class=\"line\">        default=<span class=\"number\">1</span>, type=int,</div><div class=\"line\">        help=<span class=\"string\">'specify the depth of the spider (default: 1)'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-f'</span>, <span class=\"string\">'--file'</span>, dest=<span class=\"string\">'logfile'</span>,</div><div class=\"line\">        default=<span class=\"string\">'spider.log'</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the path of logfile (default: spider.log)'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-l'</span>, <span class=\"string\">'--level'</span>, dest=<span class=\"string\">'loglevel'</span>, choices=range(<span class=\"number\">1</span>, <span class=\"number\">6</span>),</div><div class=\"line\">        default=<span class=\"number\">1</span>, type=int,</div><div class=\"line\">        help=<span class=\"string\">'specify the verbose level of the log (default: 1)'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--dbfile'</span>, dest=<span class=\"string\">'dbfile'</span>,</div><div class=\"line\">        default=<span class=\"string\">'spider.db'</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the path of sqlite dbfile (default: spider.db)'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--thread'</span>, dest=<span class=\"string\">'num_threads'</span>,</div><div class=\"line\">        default=<span class=\"number\">10</span>, type=int,</div><div class=\"line\">        help=<span class=\"string\">'specify the size of thread pool (default: 10)'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--keyword'</span>, dest=<span class=\"string\">'keyword'</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the keyword'</span></div><div class=\"line\">        )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--selftest'</span>, action=<span class=\"string\">'store_true'</span>,</div><div class=\"line\">        help=<span class=\"string\">'self-test'</span></div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\">    args = parser.parse_args()</div><div class=\"line\">    <span class=\"comment\"># &gt; Namespace(</span></div><div class=\"line\">    <span class=\"comment\">#     dbfile='spider.db', depth=1, keyword=None,</span></div><div class=\"line\">    <span class=\"comment\">#     logfile='spider.log', loglevel=1, num_threads=10,</span></div><div class=\"line\">    <span class=\"comment\">#     selftest=False, url='www.baidu.com'</span></div><div class=\"line\">    <span class=\"comment\">#     )</span></div><div class=\"line\">    <span class=\"keyword\">return</span> args</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    parse()</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://docs.python.org/2/howto/argparse.html\">https://docs.python.org/2/howto/argparse.html</a></li>\n<li><a href=\"https://docs.python.org/2/library/argparse.html#choices\">https://docs.python.org/2/library/argparse.html#choices</a></li>\n<li><a href=\"http://python.usyiyi.cn/python_278/library/argparse.html\">http://python.usyiyi.cn/python_278/library/argparse.html</a></li>\n<li><a href=\"http://blog.xiayf.cn/2013/03/30/argparse/\">http://blog.xiayf.cn/2013/03/30/argparse/</a></li>\n</ul>\n"},{"title":"Spider-04-sqlite3","date":"2016-04-05T01:39:06.000Z","_content":"\n# 知道创宇爬虫设计第四天：sqlite3\n\n这部分比较简单，需要注意的几点\n\n- connect, cursor\n- execute\n- commit, rollback\n- close\n\n\n既然之前已经学会了使用logging，就可以尝试下配合着使用\n\n# 代码\n\n```python MySqlite.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport sqlite3\nimport logging\nimport logging.config\nlogging.config.fileConfig('logging.conf')\n\n\nlevels = {\n    1: 'CRITICAL',\n    2: 'ERROR',\n    3: 'WARNING',\n    4: 'INFO',\n    5: 'DEBUG',\n}\nloglevel = 4\nlogger = logging.getLogger('spider')\nlogger.setLevel(levels[loglevel])\n\n\nclass MySqlite(object):\n    def __init__(self, dbfile):\n        try:\n            self.conn = sqlite3.connect(dbfile)\n            logger.info(\"Open database %s\" % dbfile)\n            logger.debug(\"Open database %s\" % dbfile)\n        except sqlite3.Error as e:\n            # print \"Fail to connect %s: %s\" % (dbfile, e) # e.args[0]\n            logger.error(\"Fail to connect %s: %s\" % (dbfile, e))\n            return\n\n        self.cursor = self.conn.cursor()\n\n    def create(self, table):\n        try:\n            logger.info(\"Create table %s\" % table)\n            self.cursor.execute(\n                \"CREATE TABLE IF NOT EXISTS %s(Id INTEGER PRIMARY KEY \\\n                AUTOINCREMENT, Data VARCHAR(40))\" % table\n                )\n            self.conn.commit()\n        except sqlite3.Error as e:\n            logger.error(\"Fail to create %s: %s\" % (table, e))\n            self.conn.rollback()\n\n    def insert(self, table, data):\n        try:\n            logger.info(\"Insert %s into table %s\" % (data, table))\n            self.cursor.execute(\n                \"INSERT INTO %s(Data) VALUES('%s')\" % (table, data))\n            self.conn.commit()\n        except sqlite3.Error as e:\n            logger.error(\"Fail to insert %s into %s: %s\" % (data, table, e))\n            self.conn.rollback()\n\n    def close(self):\n        logger.info(\"Close database\")\n        self.cursor.close()\n        self.conn.close()\n\n\nif __name__ == '__main__':\n    ms = MySqlite('spider.db')\n    ms.create('t1')\n    ms.insert('t1', 'test')\n    ms.close()\n```\n\n```shell logging.conf\n[loggers]\nkeys = root, spider\n\n[handlers]\nkeys = consoleHandler, fileHandler\n\n[formatters]\nkeys = simpleFormatter\n\n[logger_root]\nlevel = DEBUG\nhandlers = consoleHandler\n\n[logger_spider]\nlevel = DEBUG\nhandlers = consoleHandler, fileHandler\nqualname = spider\npropagate = 0\n\n[handler_consoleHandler]\nclass = StreamHandler\nlevel = DEBUG\nformatter = simpleFormatter\nargs = (sys.stdout,)\n\n[handler_fileHandler]\nclass = FileHandler\nlevel = DEBUG\nformatter = simpleFormatter\nargs = ('spider.log', 'w')\n\n[formatter_simpleFormatter]\nformat = %(asctime)s - %(name)s - %(levelname)s - %(message)s\ndatefmt = \n```\n\n# 参考\n\n- https://docs.python.org/2/library/sqlite3.html\n- http://blog.sina.com.cn/s/blog_72603eac01013pbc.html\n- http://blog.csdn.net/jeepxiaozi/article/details/8808435\n- http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/\n- http://devdocs.io/python~2.7/library/logging.config","source":"_posts/Spider-04-sqlite.md","raw":"---\ntitle: Spider-04-sqlite3\ndate: 2016-04-05 09:39:06\ncategory: [Python]\ntags: [Python, Spider, sqlite]\n---\n\n# 知道创宇爬虫设计第四天：sqlite3\n\n这部分比较简单，需要注意的几点\n\n- connect, cursor\n- execute\n- commit, rollback\n- close\n\n\n既然之前已经学会了使用logging，就可以尝试下配合着使用\n\n# 代码\n\n```python MySqlite.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport sqlite3\nimport logging\nimport logging.config\nlogging.config.fileConfig('logging.conf')\n\n\nlevels = {\n    1: 'CRITICAL',\n    2: 'ERROR',\n    3: 'WARNING',\n    4: 'INFO',\n    5: 'DEBUG',\n}\nloglevel = 4\nlogger = logging.getLogger('spider')\nlogger.setLevel(levels[loglevel])\n\n\nclass MySqlite(object):\n    def __init__(self, dbfile):\n        try:\n            self.conn = sqlite3.connect(dbfile)\n            logger.info(\"Open database %s\" % dbfile)\n            logger.debug(\"Open database %s\" % dbfile)\n        except sqlite3.Error as e:\n            # print \"Fail to connect %s: %s\" % (dbfile, e) # e.args[0]\n            logger.error(\"Fail to connect %s: %s\" % (dbfile, e))\n            return\n\n        self.cursor = self.conn.cursor()\n\n    def create(self, table):\n        try:\n            logger.info(\"Create table %s\" % table)\n            self.cursor.execute(\n                \"CREATE TABLE IF NOT EXISTS %s(Id INTEGER PRIMARY KEY \\\n                AUTOINCREMENT, Data VARCHAR(40))\" % table\n                )\n            self.conn.commit()\n        except sqlite3.Error as e:\n            logger.error(\"Fail to create %s: %s\" % (table, e))\n            self.conn.rollback()\n\n    def insert(self, table, data):\n        try:\n            logger.info(\"Insert %s into table %s\" % (data, table))\n            self.cursor.execute(\n                \"INSERT INTO %s(Data) VALUES('%s')\" % (table, data))\n            self.conn.commit()\n        except sqlite3.Error as e:\n            logger.error(\"Fail to insert %s into %s: %s\" % (data, table, e))\n            self.conn.rollback()\n\n    def close(self):\n        logger.info(\"Close database\")\n        self.cursor.close()\n        self.conn.close()\n\n\nif __name__ == '__main__':\n    ms = MySqlite('spider.db')\n    ms.create('t1')\n    ms.insert('t1', 'test')\n    ms.close()\n```\n\n```shell logging.conf\n[loggers]\nkeys = root, spider\n\n[handlers]\nkeys = consoleHandler, fileHandler\n\n[formatters]\nkeys = simpleFormatter\n\n[logger_root]\nlevel = DEBUG\nhandlers = consoleHandler\n\n[logger_spider]\nlevel = DEBUG\nhandlers = consoleHandler, fileHandler\nqualname = spider\npropagate = 0\n\n[handler_consoleHandler]\nclass = StreamHandler\nlevel = DEBUG\nformatter = simpleFormatter\nargs = (sys.stdout,)\n\n[handler_fileHandler]\nclass = FileHandler\nlevel = DEBUG\nformatter = simpleFormatter\nargs = ('spider.log', 'w')\n\n[formatter_simpleFormatter]\nformat = %(asctime)s - %(name)s - %(levelname)s - %(message)s\ndatefmt = \n```\n\n# 参考\n\n- https://docs.python.org/2/library/sqlite3.html\n- http://blog.sina.com.cn/s/blog_72603eac01013pbc.html\n- http://blog.csdn.net/jeepxiaozi/article/details/8808435\n- http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/\n- http://devdocs.io/python~2.7/library/logging.config","slug":"Spider-04-sqlite","published":1,"updated":"2016-07-06T14:08:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fu5000c3npx00s86xaa","content":"<h1 id=\"知道创宇爬虫设计第四天：sqlite3\"><a href=\"#知道创宇爬虫设计第四天：sqlite3\" class=\"headerlink\" title=\"知道创宇爬虫设计第四天：sqlite3\"></a>知道创宇爬虫设计第四天：sqlite3</h1><p>这部分比较简单，需要注意的几点</p>\n<ul>\n<li>connect, cursor</li>\n<li>execute</li>\n<li>commit, rollback</li>\n<li>close</li>\n</ul>\n<p>既然之前已经学会了使用logging，就可以尝试下配合着使用</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><figcaption><span>MySqlite.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> sqlite3</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> logging.config</div><div class=\"line\">logging.config.fileConfig(<span class=\"string\">'logging.conf'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">levels = &#123;</div><div class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">'CRITICAL'</span>,</div><div class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">'ERROR'</span>,</div><div class=\"line\">    <span class=\"number\">3</span>: <span class=\"string\">'WARNING'</span>,</div><div class=\"line\">    <span class=\"number\">4</span>: <span class=\"string\">'INFO'</span>,</div><div class=\"line\">    <span class=\"number\">5</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">&#125;</div><div class=\"line\">loglevel = <span class=\"number\">4</span></div><div class=\"line\">logger = logging.getLogger(<span class=\"string\">'spider'</span>)</div><div class=\"line\">logger.setLevel(levels[loglevel])</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlite</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, dbfile)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.conn = sqlite3.connect(dbfile)</div><div class=\"line\">            logger.info(<span class=\"string\">\"Open database %s\"</span> % dbfile)</div><div class=\"line\">            logger.debug(<span class=\"string\">\"Open database %s\"</span> % dbfile)</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            <span class=\"comment\"># print \"Fail to connect %s: %s\" % (dbfile, e) # e.args[0]</span></div><div class=\"line\">            logger.error(<span class=\"string\">\"Fail to connect %s: %s\"</span> % (dbfile, e))</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">        self.cursor = self.conn.cursor()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, table)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.info(<span class=\"string\">\"Create table %s\"</span> % table)</div><div class=\"line\">            self.cursor.execute(</div><div class=\"line\">                <span class=\"string\">\"CREATE TABLE IF NOT EXISTS %s(Id INTEGER PRIMARY KEY \\</span></div><div class=\"line\">                AUTOINCREMENT, Data VARCHAR(40))\" % table</div><div class=\"line\">                )</div><div class=\"line\">            self.conn.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            logger.error(<span class=\"string\">\"Fail to create %s: %s\"</span> % (table, e))</div><div class=\"line\">            self.conn.rollback()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, table, data)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.info(<span class=\"string\">\"Insert %s into table %s\"</span> % (data, table))</div><div class=\"line\">            self.cursor.execute(</div><div class=\"line\">                <span class=\"string\">\"INSERT INTO %s(Data) VALUES('%s')\"</span> % (table, data))</div><div class=\"line\">            self.conn.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            logger.error(<span class=\"string\">\"Fail to insert %s into %s: %s\"</span> % (data, table, e))</div><div class=\"line\">            self.conn.rollback()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        logger.info(<span class=\"string\">\"Close database\"</span>)</div><div class=\"line\">        self.cursor.close()</div><div class=\"line\">        self.conn.close()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    ms = MySqlite(<span class=\"string\">'spider.db'</span>)</div><div class=\"line\">    ms.create(<span class=\"string\">'t1'</span>)</div><div class=\"line\">    ms.insert(<span class=\"string\">'t1'</span>, <span class=\"string\">'test'</span>)</div><div class=\"line\">    ms.close()</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>logging.conf</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">[loggers]</div><div class=\"line\">keys = root, spider</div><div class=\"line\"></div><div class=\"line\">[handlers]</div><div class=\"line\">keys = consoleHandler, fileHandler</div><div class=\"line\"></div><div class=\"line\">[formatters]</div><div class=\"line\">keys = simpleFormatter</div><div class=\"line\"></div><div class=\"line\">[logger_root]</div><div class=\"line\">level = DEBUG</div><div class=\"line\">handlers = consoleHandler</div><div class=\"line\"></div><div class=\"line\">[logger_spider]</div><div class=\"line\">level = DEBUG</div><div class=\"line\">handlers = consoleHandler, fileHandler</div><div class=\"line\">qualname = spider</div><div class=\"line\">propagate = 0</div><div class=\"line\"></div><div class=\"line\">[handler_consoleHandler]</div><div class=\"line\">class = StreamHandler</div><div class=\"line\">level = DEBUG</div><div class=\"line\">formatter = simpleFormatter</div><div class=\"line\">args = (sys.stdout,)</div><div class=\"line\"></div><div class=\"line\">[handler_fileHandler]</div><div class=\"line\">class = FileHandler</div><div class=\"line\">level = DEBUG</div><div class=\"line\">formatter = simpleFormatter</div><div class=\"line\">args = (&apos;spider.log&apos;, &apos;w&apos;)</div><div class=\"line\"></div><div class=\"line\">[formatter_simpleFormatter]</div><div class=\"line\">format = %(asctime)s - %(name)s - %(levelname)s - %(message)s</div><div class=\"line\">datefmt =</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://docs.python.org/2/library/sqlite3.html\" target=\"_blank\" rel=\"external\">https://docs.python.org/2/library/sqlite3.html</a></li>\n<li><a href=\"http://blog.sina.com.cn/s/blog_72603eac01013pbc.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_72603eac01013pbc.html</a></li>\n<li><a href=\"http://blog.csdn.net/jeepxiaozi/article/details/8808435\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jeepxiaozi/article/details/8808435</a></li>\n<li><a href=\"http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/\" target=\"_blank\" rel=\"external\">http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/</a></li>\n<li><a href=\"http://devdocs.io/python~2.7/library/logging.config\" target=\"_blank\" rel=\"external\">http://devdocs.io/python~2.7/library/logging.config</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"知道创宇爬虫设计第四天：sqlite3\"><a href=\"#知道创宇爬虫设计第四天：sqlite3\" class=\"headerlink\" title=\"知道创宇爬虫设计第四天：sqlite3\"></a>知道创宇爬虫设计第四天：sqlite3</h1><p>这部分比较简单，需要注意的几点</p>\n<ul>\n<li>connect, cursor</li>\n<li>execute</li>\n<li>commit, rollback</li>\n<li>close</li>\n</ul>\n<p>既然之前已经学会了使用logging，就可以尝试下配合着使用</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><figcaption><span>MySqlite.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> sqlite3</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> logging.config</div><div class=\"line\">logging.config.fileConfig(<span class=\"string\">'logging.conf'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">levels = &#123;</div><div class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">'CRITICAL'</span>,</div><div class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">'ERROR'</span>,</div><div class=\"line\">    <span class=\"number\">3</span>: <span class=\"string\">'WARNING'</span>,</div><div class=\"line\">    <span class=\"number\">4</span>: <span class=\"string\">'INFO'</span>,</div><div class=\"line\">    <span class=\"number\">5</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">&#125;</div><div class=\"line\">loglevel = <span class=\"number\">4</span></div><div class=\"line\">logger = logging.getLogger(<span class=\"string\">'spider'</span>)</div><div class=\"line\">logger.setLevel(levels[loglevel])</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlite</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, dbfile)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.conn = sqlite3.connect(dbfile)</div><div class=\"line\">            logger.info(<span class=\"string\">\"Open database %s\"</span> % dbfile)</div><div class=\"line\">            logger.debug(<span class=\"string\">\"Open database %s\"</span> % dbfile)</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            <span class=\"comment\"># print \"Fail to connect %s: %s\" % (dbfile, e) # e.args[0]</span></div><div class=\"line\">            logger.error(<span class=\"string\">\"Fail to connect %s: %s\"</span> % (dbfile, e))</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">        self.cursor = self.conn.cursor()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, table)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.info(<span class=\"string\">\"Create table %s\"</span> % table)</div><div class=\"line\">            self.cursor.execute(</div><div class=\"line\">                <span class=\"string\">\"CREATE TABLE IF NOT EXISTS %s(Id INTEGER PRIMARY KEY \\</div><div class=\"line\">                AUTOINCREMENT, Data VARCHAR(40))\"</span> % table</div><div class=\"line\">                )</div><div class=\"line\">            self.conn.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            logger.error(<span class=\"string\">\"Fail to create %s: %s\"</span> % (table, e))</div><div class=\"line\">            self.conn.rollback()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, table, data)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.info(<span class=\"string\">\"Insert %s into table %s\"</span> % (data, table))</div><div class=\"line\">            self.cursor.execute(</div><div class=\"line\">                <span class=\"string\">\"INSERT INTO %s(Data) VALUES('%s')\"</span> % (table, data))</div><div class=\"line\">            self.conn.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            logger.error(<span class=\"string\">\"Fail to insert %s into %s: %s\"</span> % (data, table, e))</div><div class=\"line\">            self.conn.rollback()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        logger.info(<span class=\"string\">\"Close database\"</span>)</div><div class=\"line\">        self.cursor.close()</div><div class=\"line\">        self.conn.close()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    ms = MySqlite(<span class=\"string\">'spider.db'</span>)</div><div class=\"line\">    ms.create(<span class=\"string\">'t1'</span>)</div><div class=\"line\">    ms.insert(<span class=\"string\">'t1'</span>, <span class=\"string\">'test'</span>)</div><div class=\"line\">    ms.close()</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>logging.conf</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">[loggers]</div><div class=\"line\">keys = root, spider</div><div class=\"line\"></div><div class=\"line\">[handlers]</div><div class=\"line\">keys = consoleHandler, fileHandler</div><div class=\"line\"></div><div class=\"line\">[formatters]</div><div class=\"line\">keys = simpleFormatter</div><div class=\"line\"></div><div class=\"line\">[logger_root]</div><div class=\"line\">level = DEBUG</div><div class=\"line\">handlers = consoleHandler</div><div class=\"line\"></div><div class=\"line\">[logger_spider]</div><div class=\"line\">level = DEBUG</div><div class=\"line\">handlers = consoleHandler, fileHandler</div><div class=\"line\">qualname = spider</div><div class=\"line\">propagate = 0</div><div class=\"line\"></div><div class=\"line\">[handler_consoleHandler]</div><div class=\"line\">class = StreamHandler</div><div class=\"line\">level = DEBUG</div><div class=\"line\">formatter = simpleFormatter</div><div class=\"line\">args = (sys.stdout,)</div><div class=\"line\"></div><div class=\"line\">[handler_fileHandler]</div><div class=\"line\">class = FileHandler</div><div class=\"line\">level = DEBUG</div><div class=\"line\">formatter = simpleFormatter</div><div class=\"line\">args = (&apos;spider.log&apos;, &apos;w&apos;)</div><div class=\"line\"></div><div class=\"line\">[formatter_simpleFormatter]</div><div class=\"line\">format = %(asctime)s - %(name)s - %(levelname)s - %(message)s</div><div class=\"line\">datefmt =</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://docs.python.org/2/library/sqlite3.html\">https://docs.python.org/2/library/sqlite3.html</a></li>\n<li><a href=\"http://blog.sina.com.cn/s/blog_72603eac01013pbc.html\">http://blog.sina.com.cn/s/blog_72603eac01013pbc.html</a></li>\n<li><a href=\"http://blog.csdn.net/jeepxiaozi/article/details/8808435\">http://blog.csdn.net/jeepxiaozi/article/details/8808435</a></li>\n<li><a href=\"http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/\">http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/</a></li>\n<li><a href=\"http://devdocs.io/python~2.7/library/logging.config\">http://devdocs.io/python~2.7/library/logging.config</a></li>\n</ul>\n"},{"title":"Spider-05-Spider","date":"2016-04-06T01:00:36.000Z","_content":"\n# 知道创宇爬虫设计第五天：Spider\n\n 准备工作完成的差不多了，今天尝试下把之前的模块都整合起来做一个初期版本\n \n 首先 [What is the difference between web-crawling and web-scraping?](http://stackoverflow.com/questions/4327392/what-is-the-difference-between-web-crawling-and-web-scraping)   \n感觉其实这个答案比最佳答案更简洁明了  \n\n> Web Crawling is what Google does - it goes around a website looking at links and building a database of the layout of that site and sites it links to\n\n> Web Scraping would be the progamatic analysis of a web page to load some data off of it, EG loading up BBC weather and ripping (scraping) the weather forcast off of it and placing it elsewhere or using it in another program.\n\n我的理解就是`web-crawling`在于广度，`web-scraping`在于精度\n\n# BeautifulSoup\n\n为了`crawl`，需要从页面提取出用于进一步爬取的 URL ，BeautifulSoup 正好能方便快捷地完成这个任务，上手也很简单，基本上看看[官方文档](http://beautifulsoup.readthedocs.org/zh_CN/latest/)就万事大吉了\n\n# FileHandler\n\n在整合 logger 的时候发现一个问题，使用`logging.config.fileConfig('logging.conf')\n`的话，需要提前在配置文件里写定日志保存路径，为了配合参数设定其他路径，似乎（看了一下 [FileHandler](http://devdocs.io/python~2.7/library/logging.handlers#logging.FileHandler) 的用法）只能额外添加一个了\n\n```\n...\n    # If logfile is not 'spider.log'\n    formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(message)s')\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n...\n```\n\n# 代码\n\n目前爬虫已经基本能用，但偶尔还是会出现`502`，然后该往数据库里放些什么东西还有待考虑，另外也没有加上自测功能\n\n```python myspider.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom threading import Thread\nfrom Queue import Queue\nfrom bs4 import BeautifulSoup\nimport urllib2\nimport argparse\nimport sqlite3\nimport logging\nimport logging.config\n\n\nlogging.config.fileConfig('logging.conf')\nlogger = logging.getLogger('spider')\n\nlevels = {\n    1: 'CRITICAL',\n    2: 'ERROR',\n    3: 'WARNING',\n    4: 'INFO',\n    5: 'DEBUG',\n}\n\n\nclass MySqlite(object):\n    def __init__(self, dbfile):\n        try:\n            logger.warning(\"Open database %s\" % dbfile)\n            self.conn = sqlite3.connect(dbfile)\n        except sqlite3.Error as e:\n            # print \"Fail to connect %s: %s\" % (dbfile, e) # e.args[0]\n            logger.error(\"Fail to connect %s: %s\" % (dbfile, e))\n            return\n\n        self.cursor = self.conn.cursor()\n\n    def create(self, table):\n        try:\n            logger.warning(\"Create table %s if not exists\" % table)\n            self.cursor.execute(\n                \"CREATE TABLE IF NOT EXISTS %s (id INTEGER PRIMARY KEY \\\n                AUTOINCREMENT, url VARCHAR(100), data VARCHAR(40))\" % table)\n            self.conn.commit()\n        except sqlite3.Error as e:\n            logger.error(\"Fail to create %s: %s\" % (table, e))\n            self.conn.rollback()\n\n    def insert(self, table, url, data):\n        try:\n            logger.warning(\n                \"Insert (%s, %s) into table %s\" % (url, data, table))\n            self.cursor.execute(\n                \"INSERT INTO %s (url, data) VALUES ('%s', '%s')\" %\n                (table, url, data))\n            self.conn.commit()\n        except sqlite3.Error as e:\n            logger.error(\n                \"Fail to insert (%s, %s) into %s: %s\" %\n                (url, data, table, e))\n            self.conn.rollback()\n\n    def close(self):\n        logger.info(\"Close database\")\n        self.cursor.close()\n        self.conn.close()\n\n\nclass MyThreadPool(object):\n    def __init__(self, num_threads=10):\n        self.tasks = Queue(num_threads)\n        for i in xrange(1, num_threads+1):\n            # Initialize the pool with the number of num_threads\n            logger.info('Initialize thread %d' % i)\n            MyThread(self.tasks)\n\n    def add_task(self, func, *args, **kwargs):\n        self.tasks.put((func, args, kwargs))\n        logger.debug('Add task')\n\n    def wait_completion(self):\n        # Blocks until all items in the queue have been gotten and processed.\n        self.tasks.join()\n        logger.info('All tasks are done')\n\n\nclass MyThread(Thread):\n    def __init__(self, tasks):\n        Thread.__init__(self)\n        self.tasks = tasks\n        # This must be set before start() is called. The entire Python program\n        # exits when no alive non-daemon threads are left.\n        self.daemon = True\n        self.start()\n        logger.debug('Thread started...')\n\n    def run(self):\n        while True:\n            # Block until an item is available.\n            func, args, kwargs = self.tasks.get()\n            try:\n                logger.warning('Thread is working...')\n                func(*args, **kwargs)\n            except Exception as e:\n                logger.error(e)\n            # Tells the queue that the processing on the task is complete.\n            self.tasks.task_done()\n\n\nclass MySpider(object):\n    def __init__(self, args):\n        ''' Initialize the spider\n        '''\n        # Initialize args\n        self.url = args.url\n        self.depth = args.depth\n        self.logfile = args.logfile\n        self.dbfile = args.dbfile\n        self.num_threads = args.num_threads\n        self.key = args.key.lower()\n        self.selftest = args.selftest\n\n        # Store visited url\n        self.visited_urls = set()\n\n        # Initialize threadpool\n        self.threadpool = MyThreadPool(self.num_threads)\n\n    def run(self):\n        ''' Run the spider\n        '''\n        if not self.url.startswith('http://'):\n            self.url = 'http://' + self.url\n        logger.critical('Start crawl on %s' % self.url)\n        self.threadpool.add_task(self.scrape, self.url, self.depth)\n        self.threadpool.wait_completion()\n\n    def scrape(self, url, depth):\n        ''' Scrape the content of page\n        '''\n        # Open database with dbfile\n        db = MySqlite(self.dbfile)\n        # Create table with keyword\n        table = 'none' if not self.key else self.key\n        db.create(table)\n\n        # Avoid being recognized as robot\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) \\\n            AppleWebKit/537.36 (KHTML, like Gecko) \\\n            Chrome/49.0.2623.110 Safari/537.36'\n        }\n\n        # Avoid repeat\n        if url in self.visited_urls:\n            logger.debug('%s had been crawled' % url)\n            return\n        else:\n            self.visited_urls.add(url)\n            logger.info('Crawling on %s' % url)\n\n        # Request with headers\n        try:\n            logger.warning('Open %s' % url)\n            request = urllib2.Request(url, headers=headers)\n            result = urllib2.urlopen(request).read()\n        except ValueError as e:\n            logger.error(e)\n            return\n\n        # Extract the title by BeautifulSoup\n        soup = BeautifulSoup(result, \"lxml\")\n        title = soup.title.string\n        logger.debug('title = %s' % title)\n\n        # Store url and title of the page with keyword into database\n        if self.key in result.lower():\n            table = 'none' if not self.key else self.key\n            db.insert(table, url, title)\n            logger.critical(\n                'KEYWORD:\\'%s\\' - URL:\\'%s\\' - TITLE:\\'%s\\' (DEPTH:%d)' %\n                (self.key, url, title, depth))\n\n        # Close database after modification\n        db.close()\n\n        # Go deeper into urls in result\n        self.crawl(soup, depth-1)\n\n    def crawl(self, soup, depth):\n        ''' Crawl to new pages\n        '''\n        if depth > 0:\n            for link in soup.find_all('a'):\n                url = link.get('href')\n                # scrape new url\n                self.threadpool.add_task(self.scrape, url, depth)\n\n    # def stop(self):\n    #     ''' Stop the spider\n    #     '''\n    #     logger.critical('OVER')\n\n\ndef args_parser():\n    ''' Parse the args\n    '''\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\n        '-u', '--url', dest='url', required=True,\n        help='specify the URL to start crawl'\n    )\n    parser.add_argument(\n        '-d', '--depth', dest='depth', default=1, type=int,\n        help='specify the depth of the spider (default: 1)'\n    )\n    parser.add_argument(\n        '-f', '--file', dest='logfile', default='spider.log',\n        help='specify the path of logfile (default: spider.log)'\n    )\n    parser.add_argument(\n        '-l', '--level', dest='loglevel', default=5, type=int,\n        choices=range(1, 6),\n        help='specify the verbose level of the log (default: 5)'\n    )\n    parser.add_argument(\n        '--dbfile', dest='dbfile', default='spider.db',\n        help='specify the path of sqlite dbfile (default: spider.db)'\n    )\n    parser.add_argument(\n        '--thread', dest='num_threads', default=10, type=int,\n        help='specify the size of thread pool (default: 10)'\n    )\n    parser.add_argument(\n        '--key', dest='key', default='',\n        help='specify the keyword (default: '')'\n    )\n    parser.add_argument(\n        '--selftest', action='store_true',\n        help='self-test'\n    )\n\n    args = parser.parse_args()\n    return args\n\n\ndef set_logger(loglevel, logfile):\n    ''' Set the logger with loglevel and logfile\n    '''\n    logger.setLevel(levels[loglevel])\n    file_handler = logging.FileHandler(logfile)\n\n    # If logfile is not 'spider.log'\n    formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(message)s')\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n\n\ndef main():\n    args = args_parser()\n    set_logger(args.loglevel, args.logfile)\n    logger.debug(args)\n\n    spider = MySpider(args)\n    spider.run()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# 参考\n\n- http://beautifulsoup.readthedocs.org/zh_CN/latest/\n- http://devdocs.io/python~2.7/library/logging.handlers#logging.FileHandler\n- http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/\n\n","source":"_posts/Spider-05-Spider.md","raw":"---\ntitle: Spider-05-Spider\ndate: 2016-04-06 09:00:36\ncategory: Python\ntags: [Python, Spider]\n---\n\n# 知道创宇爬虫设计第五天：Spider\n\n 准备工作完成的差不多了，今天尝试下把之前的模块都整合起来做一个初期版本\n \n 首先 [What is the difference between web-crawling and web-scraping?](http://stackoverflow.com/questions/4327392/what-is-the-difference-between-web-crawling-and-web-scraping)   \n感觉其实这个答案比最佳答案更简洁明了  \n\n> Web Crawling is what Google does - it goes around a website looking at links and building a database of the layout of that site and sites it links to\n\n> Web Scraping would be the progamatic analysis of a web page to load some data off of it, EG loading up BBC weather and ripping (scraping) the weather forcast off of it and placing it elsewhere or using it in another program.\n\n我的理解就是`web-crawling`在于广度，`web-scraping`在于精度\n\n# BeautifulSoup\n\n为了`crawl`，需要从页面提取出用于进一步爬取的 URL ，BeautifulSoup 正好能方便快捷地完成这个任务，上手也很简单，基本上看看[官方文档](http://beautifulsoup.readthedocs.org/zh_CN/latest/)就万事大吉了\n\n# FileHandler\n\n在整合 logger 的时候发现一个问题，使用`logging.config.fileConfig('logging.conf')\n`的话，需要提前在配置文件里写定日志保存路径，为了配合参数设定其他路径，似乎（看了一下 [FileHandler](http://devdocs.io/python~2.7/library/logging.handlers#logging.FileHandler) 的用法）只能额外添加一个了\n\n```\n...\n    # If logfile is not 'spider.log'\n    formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(message)s')\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n...\n```\n\n# 代码\n\n目前爬虫已经基本能用，但偶尔还是会出现`502`，然后该往数据库里放些什么东西还有待考虑，另外也没有加上自测功能\n\n```python myspider.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom threading import Thread\nfrom Queue import Queue\nfrom bs4 import BeautifulSoup\nimport urllib2\nimport argparse\nimport sqlite3\nimport logging\nimport logging.config\n\n\nlogging.config.fileConfig('logging.conf')\nlogger = logging.getLogger('spider')\n\nlevels = {\n    1: 'CRITICAL',\n    2: 'ERROR',\n    3: 'WARNING',\n    4: 'INFO',\n    5: 'DEBUG',\n}\n\n\nclass MySqlite(object):\n    def __init__(self, dbfile):\n        try:\n            logger.warning(\"Open database %s\" % dbfile)\n            self.conn = sqlite3.connect(dbfile)\n        except sqlite3.Error as e:\n            # print \"Fail to connect %s: %s\" % (dbfile, e) # e.args[0]\n            logger.error(\"Fail to connect %s: %s\" % (dbfile, e))\n            return\n\n        self.cursor = self.conn.cursor()\n\n    def create(self, table):\n        try:\n            logger.warning(\"Create table %s if not exists\" % table)\n            self.cursor.execute(\n                \"CREATE TABLE IF NOT EXISTS %s (id INTEGER PRIMARY KEY \\\n                AUTOINCREMENT, url VARCHAR(100), data VARCHAR(40))\" % table)\n            self.conn.commit()\n        except sqlite3.Error as e:\n            logger.error(\"Fail to create %s: %s\" % (table, e))\n            self.conn.rollback()\n\n    def insert(self, table, url, data):\n        try:\n            logger.warning(\n                \"Insert (%s, %s) into table %s\" % (url, data, table))\n            self.cursor.execute(\n                \"INSERT INTO %s (url, data) VALUES ('%s', '%s')\" %\n                (table, url, data))\n            self.conn.commit()\n        except sqlite3.Error as e:\n            logger.error(\n                \"Fail to insert (%s, %s) into %s: %s\" %\n                (url, data, table, e))\n            self.conn.rollback()\n\n    def close(self):\n        logger.info(\"Close database\")\n        self.cursor.close()\n        self.conn.close()\n\n\nclass MyThreadPool(object):\n    def __init__(self, num_threads=10):\n        self.tasks = Queue(num_threads)\n        for i in xrange(1, num_threads+1):\n            # Initialize the pool with the number of num_threads\n            logger.info('Initialize thread %d' % i)\n            MyThread(self.tasks)\n\n    def add_task(self, func, *args, **kwargs):\n        self.tasks.put((func, args, kwargs))\n        logger.debug('Add task')\n\n    def wait_completion(self):\n        # Blocks until all items in the queue have been gotten and processed.\n        self.tasks.join()\n        logger.info('All tasks are done')\n\n\nclass MyThread(Thread):\n    def __init__(self, tasks):\n        Thread.__init__(self)\n        self.tasks = tasks\n        # This must be set before start() is called. The entire Python program\n        # exits when no alive non-daemon threads are left.\n        self.daemon = True\n        self.start()\n        logger.debug('Thread started...')\n\n    def run(self):\n        while True:\n            # Block until an item is available.\n            func, args, kwargs = self.tasks.get()\n            try:\n                logger.warning('Thread is working...')\n                func(*args, **kwargs)\n            except Exception as e:\n                logger.error(e)\n            # Tells the queue that the processing on the task is complete.\n            self.tasks.task_done()\n\n\nclass MySpider(object):\n    def __init__(self, args):\n        ''' Initialize the spider\n        '''\n        # Initialize args\n        self.url = args.url\n        self.depth = args.depth\n        self.logfile = args.logfile\n        self.dbfile = args.dbfile\n        self.num_threads = args.num_threads\n        self.key = args.key.lower()\n        self.selftest = args.selftest\n\n        # Store visited url\n        self.visited_urls = set()\n\n        # Initialize threadpool\n        self.threadpool = MyThreadPool(self.num_threads)\n\n    def run(self):\n        ''' Run the spider\n        '''\n        if not self.url.startswith('http://'):\n            self.url = 'http://' + self.url\n        logger.critical('Start crawl on %s' % self.url)\n        self.threadpool.add_task(self.scrape, self.url, self.depth)\n        self.threadpool.wait_completion()\n\n    def scrape(self, url, depth):\n        ''' Scrape the content of page\n        '''\n        # Open database with dbfile\n        db = MySqlite(self.dbfile)\n        # Create table with keyword\n        table = 'none' if not self.key else self.key\n        db.create(table)\n\n        # Avoid being recognized as robot\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) \\\n            AppleWebKit/537.36 (KHTML, like Gecko) \\\n            Chrome/49.0.2623.110 Safari/537.36'\n        }\n\n        # Avoid repeat\n        if url in self.visited_urls:\n            logger.debug('%s had been crawled' % url)\n            return\n        else:\n            self.visited_urls.add(url)\n            logger.info('Crawling on %s' % url)\n\n        # Request with headers\n        try:\n            logger.warning('Open %s' % url)\n            request = urllib2.Request(url, headers=headers)\n            result = urllib2.urlopen(request).read()\n        except ValueError as e:\n            logger.error(e)\n            return\n\n        # Extract the title by BeautifulSoup\n        soup = BeautifulSoup(result, \"lxml\")\n        title = soup.title.string\n        logger.debug('title = %s' % title)\n\n        # Store url and title of the page with keyword into database\n        if self.key in result.lower():\n            table = 'none' if not self.key else self.key\n            db.insert(table, url, title)\n            logger.critical(\n                'KEYWORD:\\'%s\\' - URL:\\'%s\\' - TITLE:\\'%s\\' (DEPTH:%d)' %\n                (self.key, url, title, depth))\n\n        # Close database after modification\n        db.close()\n\n        # Go deeper into urls in result\n        self.crawl(soup, depth-1)\n\n    def crawl(self, soup, depth):\n        ''' Crawl to new pages\n        '''\n        if depth > 0:\n            for link in soup.find_all('a'):\n                url = link.get('href')\n                # scrape new url\n                self.threadpool.add_task(self.scrape, url, depth)\n\n    # def stop(self):\n    #     ''' Stop the spider\n    #     '''\n    #     logger.critical('OVER')\n\n\ndef args_parser():\n    ''' Parse the args\n    '''\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\n        '-u', '--url', dest='url', required=True,\n        help='specify the URL to start crawl'\n    )\n    parser.add_argument(\n        '-d', '--depth', dest='depth', default=1, type=int,\n        help='specify the depth of the spider (default: 1)'\n    )\n    parser.add_argument(\n        '-f', '--file', dest='logfile', default='spider.log',\n        help='specify the path of logfile (default: spider.log)'\n    )\n    parser.add_argument(\n        '-l', '--level', dest='loglevel', default=5, type=int,\n        choices=range(1, 6),\n        help='specify the verbose level of the log (default: 5)'\n    )\n    parser.add_argument(\n        '--dbfile', dest='dbfile', default='spider.db',\n        help='specify the path of sqlite dbfile (default: spider.db)'\n    )\n    parser.add_argument(\n        '--thread', dest='num_threads', default=10, type=int,\n        help='specify the size of thread pool (default: 10)'\n    )\n    parser.add_argument(\n        '--key', dest='key', default='',\n        help='specify the keyword (default: '')'\n    )\n    parser.add_argument(\n        '--selftest', action='store_true',\n        help='self-test'\n    )\n\n    args = parser.parse_args()\n    return args\n\n\ndef set_logger(loglevel, logfile):\n    ''' Set the logger with loglevel and logfile\n    '''\n    logger.setLevel(levels[loglevel])\n    file_handler = logging.FileHandler(logfile)\n\n    # If logfile is not 'spider.log'\n    formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(message)s')\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n\n\ndef main():\n    args = args_parser()\n    set_logger(args.loglevel, args.logfile)\n    logger.debug(args)\n\n    spider = MySpider(args)\n    spider.run()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# 参考\n\n- http://beautifulsoup.readthedocs.org/zh_CN/latest/\n- http://devdocs.io/python~2.7/library/logging.handlers#logging.FileHandler\n- http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/\n\n","slug":"Spider-05-Spider","published":1,"updated":"2016-07-06T14:06:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fu6000d3npxbhf7kxj9","content":"<h1 id=\"知道创宇爬虫设计第五天：Spider\"><a href=\"#知道创宇爬虫设计第五天：Spider\" class=\"headerlink\" title=\"知道创宇爬虫设计第五天：Spider\"></a>知道创宇爬虫设计第五天：Spider</h1><p> 准备工作完成的差不多了，今天尝试下把之前的模块都整合起来做一个初期版本</p>\n<p> 首先 <a href=\"http://stackoverflow.com/questions/4327392/what-is-the-difference-between-web-crawling-and-web-scraping\" target=\"_blank\" rel=\"external\">What is the difference between web-crawling and web-scraping?</a><br>感觉其实这个答案比最佳答案更简洁明了  </p>\n<blockquote>\n<p>Web Crawling is what Google does - it goes around a website looking at links and building a database of the layout of that site and sites it links to</p>\n<p>Web Scraping would be the progamatic analysis of a web page to load some data off of it, EG loading up BBC weather and ripping (scraping) the weather forcast off of it and placing it elsewhere or using it in another program.</p>\n</blockquote>\n<p>我的理解就是<code>web-crawling</code>在于广度，<code>web-scraping</code>在于精度</p>\n<h1 id=\"BeautifulSoup\"><a href=\"#BeautifulSoup\" class=\"headerlink\" title=\"BeautifulSoup\"></a>BeautifulSoup</h1><p>为了<code>crawl</code>，需要从页面提取出用于进一步爬取的 URL ，BeautifulSoup 正好能方便快捷地完成这个任务，上手也很简单，基本上看看<a href=\"http://beautifulsoup.readthedocs.org/zh_CN/latest/\" target=\"_blank\" rel=\"external\">官方文档</a>就万事大吉了</p>\n<h1 id=\"FileHandler\"><a href=\"#FileHandler\" class=\"headerlink\" title=\"FileHandler\"></a>FileHandler</h1><p>在整合 logger 的时候发现一个问题，使用<code>logging.config.fileConfig(&#39;logging.conf&#39;)</code>的话，需要提前在配置文件里写定日志保存路径，为了配合参数设定其他路径，似乎（看了一下 <a href=\"http://devdocs.io/python~2.7/library/logging.handlers#logging.FileHandler\" target=\"_blank\" rel=\"external\">FileHandler</a> 的用法）只能额外添加一个了</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    # If logfile is not <span class=\"string\">'spider.log'</span></div><div class=\"line\">    formatter = logging.Formatter(</div><div class=\"line\">        <span class=\"string\">'%(asctime)s - %(levelname)s - %(message)s'</span>)</div><div class=\"line\">    file_handler.setFormatter(formatter)</div><div class=\"line\">    logger.addHandler(file_handler)</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>目前爬虫已经基本能用，但偶尔还是会出现<code>502</code>，然后该往数据库里放些什么东西还有待考虑，另外也没有加上自测功能</p>\n<figure class=\"highlight python\"><figcaption><span>myspider.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</div><div class=\"line\"><span class=\"keyword\">from</span> Queue <span class=\"keyword\">import</span> Queue</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">import</span> urllib2</div><div class=\"line\"><span class=\"keyword\">import</span> argparse</div><div class=\"line\"><span class=\"keyword\">import</span> sqlite3</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> logging.config</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">logging.config.fileConfig(<span class=\"string\">'logging.conf'</span>)</div><div class=\"line\">logger = logging.getLogger(<span class=\"string\">'spider'</span>)</div><div class=\"line\"></div><div class=\"line\">levels = &#123;</div><div class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">'CRITICAL'</span>,</div><div class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">'ERROR'</span>,</div><div class=\"line\">    <span class=\"number\">3</span>: <span class=\"string\">'WARNING'</span>,</div><div class=\"line\">    <span class=\"number\">4</span>: <span class=\"string\">'INFO'</span>,</div><div class=\"line\">    <span class=\"number\">5</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlite</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, dbfile)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.warning(<span class=\"string\">\"Open database %s\"</span> % dbfile)</div><div class=\"line\">            self.conn = sqlite3.connect(dbfile)</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            <span class=\"comment\"># print \"Fail to connect %s: %s\" % (dbfile, e) # e.args[0]</span></div><div class=\"line\">            logger.error(<span class=\"string\">\"Fail to connect %s: %s\"</span> % (dbfile, e))</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">        self.cursor = self.conn.cursor()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, table)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.warning(<span class=\"string\">\"Create table %s if not exists\"</span> % table)</div><div class=\"line\">            self.cursor.execute(</div><div class=\"line\">                <span class=\"string\">\"CREATE TABLE IF NOT EXISTS %s (id INTEGER PRIMARY KEY \\</span></div><div class=\"line\">                AUTOINCREMENT, url VARCHAR(100), data VARCHAR(40))\" % table)</div><div class=\"line\">            self.conn.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            logger.error(<span class=\"string\">\"Fail to create %s: %s\"</span> % (table, e))</div><div class=\"line\">            self.conn.rollback()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, table, url, data)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.warning(</div><div class=\"line\">                <span class=\"string\">\"Insert (%s, %s) into table %s\"</span> % (url, data, table))</div><div class=\"line\">            self.cursor.execute(</div><div class=\"line\">                <span class=\"string\">\"INSERT INTO %s (url, data) VALUES ('%s', '%s')\"</span> %</div><div class=\"line\">                (table, url, data))</div><div class=\"line\">            self.conn.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            logger.error(</div><div class=\"line\">                <span class=\"string\">\"Fail to insert (%s, %s) into %s: %s\"</span> %</div><div class=\"line\">                (url, data, table, e))</div><div class=\"line\">            self.conn.rollback()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        logger.info(<span class=\"string\">\"Close database\"</span>)</div><div class=\"line\">        self.cursor.close()</div><div class=\"line\">        self.conn.close()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadPool</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, num_threads=<span class=\"number\">10</span>)</span>:</span></div><div class=\"line\">        self.tasks = Queue(num_threads)</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, num_threads+<span class=\"number\">1</span>):</div><div class=\"line\">            <span class=\"comment\"># Initialize the pool with the number of num_threads</span></div><div class=\"line\">            logger.info(<span class=\"string\">'Initialize thread %d'</span> % i)</div><div class=\"line\">            MyThread(self.tasks)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_task</span><span class=\"params\">(self, func, *args, **kwargs)</span>:</span></div><div class=\"line\">        self.tasks.put((func, args, kwargs))</div><div class=\"line\">        logger.debug(<span class=\"string\">'Add task'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wait_completion</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># Blocks until all items in the queue have been gotten and processed.</span></div><div class=\"line\">        self.tasks.join()</div><div class=\"line\">        logger.info(<span class=\"string\">'All tasks are done'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span><span class=\"params\">(Thread)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, tasks)</span>:</span></div><div class=\"line\">        Thread.__init__(self)</div><div class=\"line\">        self.tasks = tasks</div><div class=\"line\">        <span class=\"comment\"># This must be set before start() is called. The entire Python program</span></div><div class=\"line\">        <span class=\"comment\"># exits when no alive non-daemon threads are left.</span></div><div class=\"line\">        self.daemon = <span class=\"keyword\">True</span></div><div class=\"line\">        self.start()</div><div class=\"line\">        logger.debug(<span class=\"string\">'Thread started...'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">            <span class=\"comment\"># Block until an item is available.</span></div><div class=\"line\">            func, args, kwargs = self.tasks.get()</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                logger.warning(<span class=\"string\">'Thread is working...'</span>)</div><div class=\"line\">                func(*args, **kwargs)</div><div class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">                logger.error(e)</div><div class=\"line\">            <span class=\"comment\"># Tells the queue that the processing on the task is complete.</span></div><div class=\"line\">            self.tasks.task_done()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySpider</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, args)</span>:</span></div><div class=\"line\">        <span class=\"string\">''' Initialize the spider</span></div><div class=\"line\">        '''</div><div class=\"line\">        <span class=\"comment\"># Initialize args</span></div><div class=\"line\">        self.url = args.url</div><div class=\"line\">        self.depth = args.depth</div><div class=\"line\">        self.logfile = args.logfile</div><div class=\"line\">        self.dbfile = args.dbfile</div><div class=\"line\">        self.num_threads = args.num_threads</div><div class=\"line\">        self.key = args.key.lower()</div><div class=\"line\">        self.selftest = args.selftest</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Store visited url</span></div><div class=\"line\">        self.visited_urls = set()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Initialize threadpool</span></div><div class=\"line\">        self.threadpool = MyThreadPool(self.num_threads)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">''' Run the spider</span></div><div class=\"line\">        '''</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.url.startswith(<span class=\"string\">'http://'</span>):</div><div class=\"line\">            self.url = <span class=\"string\">'http://'</span> + self.url</div><div class=\"line\">        logger.critical(<span class=\"string\">'Start crawl on %s'</span> % self.url)</div><div class=\"line\">        self.threadpool.add_task(self.scrape, self.url, self.depth)</div><div class=\"line\">        self.threadpool.wait_completion()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">scrape</span><span class=\"params\">(self, url, depth)</span>:</span></div><div class=\"line\">        <span class=\"string\">''' Scrape the content of page</span></div><div class=\"line\">        '''</div><div class=\"line\">        <span class=\"comment\"># Open database with dbfile</span></div><div class=\"line\">        db = MySqlite(self.dbfile)</div><div class=\"line\">        <span class=\"comment\"># Create table with keyword</span></div><div class=\"line\">        table = <span class=\"string\">'none'</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.key <span class=\"keyword\">else</span> self.key</div><div class=\"line\">        db.create(table)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Avoid being recognized as robot</span></div><div class=\"line\">        headers = &#123;</div><div class=\"line\">            <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) \\</span></div><div class=\"line\">            AppleWebKit/537.36 (KHTML, like Gecko) \\</div><div class=\"line\">            Chrome/49.0.2623.110 Safari/537.36'</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Avoid repeat</span></div><div class=\"line\">        <span class=\"keyword\">if</span> url <span class=\"keyword\">in</span> self.visited_urls:</div><div class=\"line\">            logger.debug(<span class=\"string\">'%s had been crawled'</span> % url)</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            self.visited_urls.add(url)</div><div class=\"line\">            logger.info(<span class=\"string\">'Crawling on %s'</span> % url)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Request with headers</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.warning(<span class=\"string\">'Open %s'</span> % url)</div><div class=\"line\">            request = urllib2.Request(url, headers=headers)</div><div class=\"line\">            result = urllib2.urlopen(request).read()</div><div class=\"line\">        <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</div><div class=\"line\">            logger.error(e)</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Extract the title by BeautifulSoup</span></div><div class=\"line\">        soup = BeautifulSoup(result, <span class=\"string\">\"lxml\"</span>)</div><div class=\"line\">        title = soup.title.string</div><div class=\"line\">        logger.debug(<span class=\"string\">'title = %s'</span> % title)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Store url and title of the page with keyword into database</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.key <span class=\"keyword\">in</span> result.lower():</div><div class=\"line\">            table = <span class=\"string\">'none'</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.key <span class=\"keyword\">else</span> self.key</div><div class=\"line\">            db.insert(table, url, title)</div><div class=\"line\">            logger.critical(</div><div class=\"line\">                <span class=\"string\">'KEYWORD:\\'%s\\' - URL:\\'%s\\' - TITLE:\\'%s\\' (DEPTH:%d)'</span> %</div><div class=\"line\">                (self.key, url, title, depth))</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Close database after modification</span></div><div class=\"line\">        db.close()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Go deeper into urls in result</span></div><div class=\"line\">        self.crawl(soup, depth<span class=\"number\">-1</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawl</span><span class=\"params\">(self, soup, depth)</span>:</span></div><div class=\"line\">        <span class=\"string\">''' Crawl to new pages</span></div><div class=\"line\">        '''</div><div class=\"line\">        <span class=\"keyword\">if</span> depth &gt; <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> soup.find_all(<span class=\"string\">'a'</span>):</div><div class=\"line\">                url = link.get(<span class=\"string\">'href'</span>)</div><div class=\"line\">                <span class=\"comment\"># scrape new url</span></div><div class=\"line\">                self.threadpool.add_task(self.scrape, url, depth)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># def stop(self):</span></div><div class=\"line\">    <span class=\"comment\">#     ''' Stop the spider</span></div><div class=\"line\">    <span class=\"comment\">#     '''</span></div><div class=\"line\">    <span class=\"comment\">#     logger.critical('OVER')</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">args_parser</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">''' Parse the args</span></div><div class=\"line\">    '''</div><div class=\"line\">    parser = argparse.ArgumentParser()</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-u'</span>, <span class=\"string\">'--url'</span>, dest=<span class=\"string\">'url'</span>, required=<span class=\"keyword\">True</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the URL to start crawl'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-d'</span>, <span class=\"string\">'--depth'</span>, dest=<span class=\"string\">'depth'</span>, default=<span class=\"number\">1</span>, type=int,</div><div class=\"line\">        help=<span class=\"string\">'specify the depth of the spider (default: 1)'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-f'</span>, <span class=\"string\">'--file'</span>, dest=<span class=\"string\">'logfile'</span>, default=<span class=\"string\">'spider.log'</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the path of logfile (default: spider.log)'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-l'</span>, <span class=\"string\">'--level'</span>, dest=<span class=\"string\">'loglevel'</span>, default=<span class=\"number\">5</span>, type=int,</div><div class=\"line\">        choices=range(<span class=\"number\">1</span>, <span class=\"number\">6</span>),</div><div class=\"line\">        help=<span class=\"string\">'specify the verbose level of the log (default: 5)'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--dbfile'</span>, dest=<span class=\"string\">'dbfile'</span>, default=<span class=\"string\">'spider.db'</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the path of sqlite dbfile (default: spider.db)'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--thread'</span>, dest=<span class=\"string\">'num_threads'</span>, default=<span class=\"number\">10</span>, type=int,</div><div class=\"line\">        help=<span class=\"string\">'specify the size of thread pool (default: 10)'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--key'</span>, dest=<span class=\"string\">'key'</span>, default=<span class=\"string\">''</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the keyword (default: '</span><span class=\"string\">')'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--selftest'</span>, action=<span class=\"string\">'store_true'</span>,</div><div class=\"line\">        help=<span class=\"string\">'self-test'</span></div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">    args = parser.parse_args()</div><div class=\"line\">    <span class=\"keyword\">return</span> args</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_logger</span><span class=\"params\">(loglevel, logfile)</span>:</span></div><div class=\"line\">    <span class=\"string\">''' Set the logger with loglevel and logfile</span></div><div class=\"line\">    '''</div><div class=\"line\">    logger.setLevel(levels[loglevel])</div><div class=\"line\">    file_handler = logging.FileHandler(logfile)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># If logfile is not 'spider.log'</span></div><div class=\"line\">    formatter = logging.Formatter(</div><div class=\"line\">        <span class=\"string\">'%(asctime)s - %(levelname)s - %(message)s'</span>)</div><div class=\"line\">    file_handler.setFormatter(formatter)</div><div class=\"line\">    logger.addHandler(file_handler)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    args = args_parser()</div><div class=\"line\">    set_logger(args.loglevel, args.logfile)</div><div class=\"line\">    logger.debug(args)</div><div class=\"line\"></div><div class=\"line\">    spider = MySpider(args)</div><div class=\"line\">    spider.run()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://beautifulsoup.readthedocs.org/zh_CN/latest/\" target=\"_blank\" rel=\"external\">http://beautifulsoup.readthedocs.org/zh_CN/latest/</a></li>\n<li><a href=\"http://devdocs.io/python~2.7/library/logging.handlers#logging.FileHandler\" target=\"_blank\" rel=\"external\">http://devdocs.io/python~2.7/library/logging.handlers#logging.FileHandler</a></li>\n<li><a href=\"http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/\" target=\"_blank\" rel=\"external\">http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"知道创宇爬虫设计第五天：Spider\"><a href=\"#知道创宇爬虫设计第五天：Spider\" class=\"headerlink\" title=\"知道创宇爬虫设计第五天：Spider\"></a>知道创宇爬虫设计第五天：Spider</h1><p> 准备工作完成的差不多了，今天尝试下把之前的模块都整合起来做一个初期版本</p>\n<p> 首先 <a href=\"http://stackoverflow.com/questions/4327392/what-is-the-difference-between-web-crawling-and-web-scraping\">What is the difference between web-crawling and web-scraping?</a><br>感觉其实这个答案比最佳答案更简洁明了  </p>\n<blockquote>\n<p>Web Crawling is what Google does - it goes around a website looking at links and building a database of the layout of that site and sites it links to</p>\n<p>Web Scraping would be the progamatic analysis of a web page to load some data off of it, EG loading up BBC weather and ripping (scraping) the weather forcast off of it and placing it elsewhere or using it in another program.</p>\n</blockquote>\n<p>我的理解就是<code>web-crawling</code>在于广度，<code>web-scraping</code>在于精度</p>\n<h1 id=\"BeautifulSoup\"><a href=\"#BeautifulSoup\" class=\"headerlink\" title=\"BeautifulSoup\"></a>BeautifulSoup</h1><p>为了<code>crawl</code>，需要从页面提取出用于进一步爬取的 URL ，BeautifulSoup 正好能方便快捷地完成这个任务，上手也很简单，基本上看看<a href=\"http://beautifulsoup.readthedocs.org/zh_CN/latest/\">官方文档</a>就万事大吉了</p>\n<h1 id=\"FileHandler\"><a href=\"#FileHandler\" class=\"headerlink\" title=\"FileHandler\"></a>FileHandler</h1><p>在整合 logger 的时候发现一个问题，使用<code>logging.config.fileConfig(&#39;logging.conf&#39;)</code>的话，需要提前在配置文件里写定日志保存路径，为了配合参数设定其他路径，似乎（看了一下 <a href=\"http://devdocs.io/python~2.7/library/logging.handlers#logging.FileHandler\">FileHandler</a> 的用法）只能额外添加一个了</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    # If logfile is not <span class=\"string\">'spider.log'</span></div><div class=\"line\">    formatter = logging.Formatter(</div><div class=\"line\">        <span class=\"string\">'%(asctime)s - %(levelname)s - %(message)s'</span>)</div><div class=\"line\">    file_handler.setFormatter(formatter)</div><div class=\"line\">    logger.addHandler(file_handler)</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>目前爬虫已经基本能用，但偶尔还是会出现<code>502</code>，然后该往数据库里放些什么东西还有待考虑，另外也没有加上自测功能</p>\n<figure class=\"highlight python\"><figcaption><span>myspider.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</div><div class=\"line\"><span class=\"keyword\">from</span> Queue <span class=\"keyword\">import</span> Queue</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">import</span> urllib2</div><div class=\"line\"><span class=\"keyword\">import</span> argparse</div><div class=\"line\"><span class=\"keyword\">import</span> sqlite3</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> logging.config</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">logging.config.fileConfig(<span class=\"string\">'logging.conf'</span>)</div><div class=\"line\">logger = logging.getLogger(<span class=\"string\">'spider'</span>)</div><div class=\"line\"></div><div class=\"line\">levels = &#123;</div><div class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">'CRITICAL'</span>,</div><div class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">'ERROR'</span>,</div><div class=\"line\">    <span class=\"number\">3</span>: <span class=\"string\">'WARNING'</span>,</div><div class=\"line\">    <span class=\"number\">4</span>: <span class=\"string\">'INFO'</span>,</div><div class=\"line\">    <span class=\"number\">5</span>: <span class=\"string\">'DEBUG'</span>,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlite</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, dbfile)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.warning(<span class=\"string\">\"Open database %s\"</span> % dbfile)</div><div class=\"line\">            self.conn = sqlite3.connect(dbfile)</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            <span class=\"comment\"># print \"Fail to connect %s: %s\" % (dbfile, e) # e.args[0]</span></div><div class=\"line\">            logger.error(<span class=\"string\">\"Fail to connect %s: %s\"</span> % (dbfile, e))</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">        self.cursor = self.conn.cursor()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, table)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.warning(<span class=\"string\">\"Create table %s if not exists\"</span> % table)</div><div class=\"line\">            self.cursor.execute(</div><div class=\"line\">                <span class=\"string\">\"CREATE TABLE IF NOT EXISTS %s (id INTEGER PRIMARY KEY \\</div><div class=\"line\">                AUTOINCREMENT, url VARCHAR(100), data VARCHAR(40))\"</span> % table)</div><div class=\"line\">            self.conn.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            logger.error(<span class=\"string\">\"Fail to create %s: %s\"</span> % (table, e))</div><div class=\"line\">            self.conn.rollback()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, table, url, data)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.warning(</div><div class=\"line\">                <span class=\"string\">\"Insert (%s, %s) into table %s\"</span> % (url, data, table))</div><div class=\"line\">            self.cursor.execute(</div><div class=\"line\">                <span class=\"string\">\"INSERT INTO %s (url, data) VALUES ('%s', '%s')\"</span> %</div><div class=\"line\">                (table, url, data))</div><div class=\"line\">            self.conn.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> sqlite3.Error <span class=\"keyword\">as</span> e:</div><div class=\"line\">            logger.error(</div><div class=\"line\">                <span class=\"string\">\"Fail to insert (%s, %s) into %s: %s\"</span> %</div><div class=\"line\">                (url, data, table, e))</div><div class=\"line\">            self.conn.rollback()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        logger.info(<span class=\"string\">\"Close database\"</span>)</div><div class=\"line\">        self.cursor.close()</div><div class=\"line\">        self.conn.close()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadPool</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, num_threads=<span class=\"number\">10</span>)</span>:</span></div><div class=\"line\">        self.tasks = Queue(num_threads)</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, num_threads+<span class=\"number\">1</span>):</div><div class=\"line\">            <span class=\"comment\"># Initialize the pool with the number of num_threads</span></div><div class=\"line\">            logger.info(<span class=\"string\">'Initialize thread %d'</span> % i)</div><div class=\"line\">            MyThread(self.tasks)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_task</span><span class=\"params\">(self, func, *args, **kwargs)</span>:</span></div><div class=\"line\">        self.tasks.put((func, args, kwargs))</div><div class=\"line\">        logger.debug(<span class=\"string\">'Add task'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wait_completion</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># Blocks until all items in the queue have been gotten and processed.</span></div><div class=\"line\">        self.tasks.join()</div><div class=\"line\">        logger.info(<span class=\"string\">'All tasks are done'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span><span class=\"params\">(Thread)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, tasks)</span>:</span></div><div class=\"line\">        Thread.__init__(self)</div><div class=\"line\">        self.tasks = tasks</div><div class=\"line\">        <span class=\"comment\"># This must be set before start() is called. The entire Python program</span></div><div class=\"line\">        <span class=\"comment\"># exits when no alive non-daemon threads are left.</span></div><div class=\"line\">        self.daemon = <span class=\"keyword\">True</span></div><div class=\"line\">        self.start()</div><div class=\"line\">        logger.debug(<span class=\"string\">'Thread started...'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">            <span class=\"comment\"># Block until an item is available.</span></div><div class=\"line\">            func, args, kwargs = self.tasks.get()</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                logger.warning(<span class=\"string\">'Thread is working...'</span>)</div><div class=\"line\">                func(*args, **kwargs)</div><div class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">                logger.error(e)</div><div class=\"line\">            <span class=\"comment\"># Tells the queue that the processing on the task is complete.</span></div><div class=\"line\">            self.tasks.task_done()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySpider</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, args)</span>:</span></div><div class=\"line\">        <span class=\"string\">''' Initialize the spider</div><div class=\"line\">        '''</span></div><div class=\"line\">        <span class=\"comment\"># Initialize args</span></div><div class=\"line\">        self.url = args.url</div><div class=\"line\">        self.depth = args.depth</div><div class=\"line\">        self.logfile = args.logfile</div><div class=\"line\">        self.dbfile = args.dbfile</div><div class=\"line\">        self.num_threads = args.num_threads</div><div class=\"line\">        self.key = args.key.lower()</div><div class=\"line\">        self.selftest = args.selftest</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Store visited url</span></div><div class=\"line\">        self.visited_urls = set()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Initialize threadpool</span></div><div class=\"line\">        self.threadpool = MyThreadPool(self.num_threads)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">''' Run the spider</div><div class=\"line\">        '''</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.url.startswith(<span class=\"string\">'http://'</span>):</div><div class=\"line\">            self.url = <span class=\"string\">'http://'</span> + self.url</div><div class=\"line\">        logger.critical(<span class=\"string\">'Start crawl on %s'</span> % self.url)</div><div class=\"line\">        self.threadpool.add_task(self.scrape, self.url, self.depth)</div><div class=\"line\">        self.threadpool.wait_completion()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">scrape</span><span class=\"params\">(self, url, depth)</span>:</span></div><div class=\"line\">        <span class=\"string\">''' Scrape the content of page</div><div class=\"line\">        '''</span></div><div class=\"line\">        <span class=\"comment\"># Open database with dbfile</span></div><div class=\"line\">        db = MySqlite(self.dbfile)</div><div class=\"line\">        <span class=\"comment\"># Create table with keyword</span></div><div class=\"line\">        table = <span class=\"string\">'none'</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.key <span class=\"keyword\">else</span> self.key</div><div class=\"line\">        db.create(table)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Avoid being recognized as robot</span></div><div class=\"line\">        headers = &#123;</div><div class=\"line\">            <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) \\</div><div class=\"line\">            AppleWebKit/537.36 (KHTML, like Gecko) \\</div><div class=\"line\">            Chrome/49.0.2623.110 Safari/537.36'</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Avoid repeat</span></div><div class=\"line\">        <span class=\"keyword\">if</span> url <span class=\"keyword\">in</span> self.visited_urls:</div><div class=\"line\">            logger.debug(<span class=\"string\">'%s had been crawled'</span> % url)</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            self.visited_urls.add(url)</div><div class=\"line\">            logger.info(<span class=\"string\">'Crawling on %s'</span> % url)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Request with headers</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            logger.warning(<span class=\"string\">'Open %s'</span> % url)</div><div class=\"line\">            request = urllib2.Request(url, headers=headers)</div><div class=\"line\">            result = urllib2.urlopen(request).read()</div><div class=\"line\">        <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</div><div class=\"line\">            logger.error(e)</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Extract the title by BeautifulSoup</span></div><div class=\"line\">        soup = BeautifulSoup(result, <span class=\"string\">\"lxml\"</span>)</div><div class=\"line\">        title = soup.title.string</div><div class=\"line\">        logger.debug(<span class=\"string\">'title = %s'</span> % title)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Store url and title of the page with keyword into database</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.key <span class=\"keyword\">in</span> result.lower():</div><div class=\"line\">            table = <span class=\"string\">'none'</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.key <span class=\"keyword\">else</span> self.key</div><div class=\"line\">            db.insert(table, url, title)</div><div class=\"line\">            logger.critical(</div><div class=\"line\">                <span class=\"string\">'KEYWORD:\\'%s\\' - URL:\\'%s\\' - TITLE:\\'%s\\' (DEPTH:%d)'</span> %</div><div class=\"line\">                (self.key, url, title, depth))</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Close database after modification</span></div><div class=\"line\">        db.close()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Go deeper into urls in result</span></div><div class=\"line\">        self.crawl(soup, depth<span class=\"number\">-1</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawl</span><span class=\"params\">(self, soup, depth)</span>:</span></div><div class=\"line\">        <span class=\"string\">''' Crawl to new pages</div><div class=\"line\">        '''</span></div><div class=\"line\">        <span class=\"keyword\">if</span> depth &gt; <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> soup.find_all(<span class=\"string\">'a'</span>):</div><div class=\"line\">                url = link.get(<span class=\"string\">'href'</span>)</div><div class=\"line\">                <span class=\"comment\"># scrape new url</span></div><div class=\"line\">                self.threadpool.add_task(self.scrape, url, depth)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># def stop(self):</span></div><div class=\"line\">    <span class=\"comment\">#     ''' Stop the spider</span></div><div class=\"line\">    <span class=\"comment\">#     '''</span></div><div class=\"line\">    <span class=\"comment\">#     logger.critical('OVER')</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">args_parser</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">''' Parse the args</div><div class=\"line\">    '''</span></div><div class=\"line\">    parser = argparse.ArgumentParser()</div><div class=\"line\"></div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-u'</span>, <span class=\"string\">'--url'</span>, dest=<span class=\"string\">'url'</span>, required=<span class=\"keyword\">True</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the URL to start crawl'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-d'</span>, <span class=\"string\">'--depth'</span>, dest=<span class=\"string\">'depth'</span>, default=<span class=\"number\">1</span>, type=int,</div><div class=\"line\">        help=<span class=\"string\">'specify the depth of the spider (default: 1)'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-f'</span>, <span class=\"string\">'--file'</span>, dest=<span class=\"string\">'logfile'</span>, default=<span class=\"string\">'spider.log'</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the path of logfile (default: spider.log)'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'-l'</span>, <span class=\"string\">'--level'</span>, dest=<span class=\"string\">'loglevel'</span>, default=<span class=\"number\">5</span>, type=int,</div><div class=\"line\">        choices=range(<span class=\"number\">1</span>, <span class=\"number\">6</span>),</div><div class=\"line\">        help=<span class=\"string\">'specify the verbose level of the log (default: 5)'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--dbfile'</span>, dest=<span class=\"string\">'dbfile'</span>, default=<span class=\"string\">'spider.db'</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the path of sqlite dbfile (default: spider.db)'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--thread'</span>, dest=<span class=\"string\">'num_threads'</span>, default=<span class=\"number\">10</span>, type=int,</div><div class=\"line\">        help=<span class=\"string\">'specify the size of thread pool (default: 10)'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--key'</span>, dest=<span class=\"string\">'key'</span>, default=<span class=\"string\">''</span>,</div><div class=\"line\">        help=<span class=\"string\">'specify the keyword (default: '</span><span class=\"string\">')'</span></div><div class=\"line\">    )</div><div class=\"line\">    parser.add_argument(</div><div class=\"line\">        <span class=\"string\">'--selftest'</span>, action=<span class=\"string\">'store_true'</span>,</div><div class=\"line\">        help=<span class=\"string\">'self-test'</span></div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">    args = parser.parse_args()</div><div class=\"line\">    <span class=\"keyword\">return</span> args</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_logger</span><span class=\"params\">(loglevel, logfile)</span>:</span></div><div class=\"line\">    <span class=\"string\">''' Set the logger with loglevel and logfile</div><div class=\"line\">    '''</span></div><div class=\"line\">    logger.setLevel(levels[loglevel])</div><div class=\"line\">    file_handler = logging.FileHandler(logfile)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># If logfile is not 'spider.log'</span></div><div class=\"line\">    formatter = logging.Formatter(</div><div class=\"line\">        <span class=\"string\">'%(asctime)s - %(levelname)s - %(message)s'</span>)</div><div class=\"line\">    file_handler.setFormatter(formatter)</div><div class=\"line\">    logger.addHandler(file_handler)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    args = args_parser()</div><div class=\"line\">    set_logger(args.loglevel, args.logfile)</div><div class=\"line\">    logger.debug(args)</div><div class=\"line\"></div><div class=\"line\">    spider = MySpider(args)</div><div class=\"line\">    spider.run()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://beautifulsoup.readthedocs.org/zh_CN/latest/\">http://beautifulsoup.readthedocs.org/zh_CN/latest/</a></li>\n<li><a href=\"http://devdocs.io/python~2.7/library/logging.handlers#logging.FileHandler\">http://devdocs.io/python~2.7/library/logging.handlers#logging.FileHandler</a></li>\n<li><a href=\"http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/\">http://dongweiming.github.io/blog/archives/pa-chong-lian-xi/</a></li>\n</ul>\n"},{"title":"Spider-06-requests","date":"2016-04-07T11:53:43.000Z","_content":"\n# 知道创宇爬虫设计第六天：requests\n\n从实验室回学校之后，仅仅是换了个网络，却突然出现了乱码问题\n\n折腾了半天编码无果，无意中发现把`urllib2`换成`requests`就好了   \n按照`requests`[官方文档](http://www.python-requests.org/en/master/user/quickstart/)里的解释\n\n>When you make a request, Requests makes educated guesses about the encoding of the response based on the HTTP headers. The text encoding guessed by Requests is used when you access r.text.\n\n难怪总在知乎看见人安利，确实是更好用一些啊。。。\n\n具体用法也很简单方便   \n不过使用`request.text`返回结果时，标题依然会乱码\n\n>You can also access the response body as bytes, for non-text requests\n\n改成使用`request.content`，果然一切正常了\n\n# 代码\n\n```python \n...\n            # request = urllib2.Request(url, headers=headers)\n            # result = urllib2.urlopen(request).read()\n\n            request = requests.get(url, headers=headers)\n            # result = request.text\n            result = request.content\n...\n```\n\n# 参考\n- http://www.python-requests.org/en/master/\n- http://www.python-requests.org/en/master/user/quickstart/\n- http://blog.csdn.net/alpha5/article/details/24964009\n","source":"_posts/Spider-06-requests.md","raw":"---\ntitle: Spider-06-requests\ndate: 2016-04-07 19:53:43\ncategory: Python\ntags: [Python, Spider, requests]\n---\n\n# 知道创宇爬虫设计第六天：requests\n\n从实验室回学校之后，仅仅是换了个网络，却突然出现了乱码问题\n\n折腾了半天编码无果，无意中发现把`urllib2`换成`requests`就好了   \n按照`requests`[官方文档](http://www.python-requests.org/en/master/user/quickstart/)里的解释\n\n>When you make a request, Requests makes educated guesses about the encoding of the response based on the HTTP headers. The text encoding guessed by Requests is used when you access r.text.\n\n难怪总在知乎看见人安利，确实是更好用一些啊。。。\n\n具体用法也很简单方便   \n不过使用`request.text`返回结果时，标题依然会乱码\n\n>You can also access the response body as bytes, for non-text requests\n\n改成使用`request.content`，果然一切正常了\n\n# 代码\n\n```python \n...\n            # request = urllib2.Request(url, headers=headers)\n            # result = urllib2.urlopen(request).read()\n\n            request = requests.get(url, headers=headers)\n            # result = request.text\n            result = request.content\n...\n```\n\n# 参考\n- http://www.python-requests.org/en/master/\n- http://www.python-requests.org/en/master/user/quickstart/\n- http://blog.csdn.net/alpha5/article/details/24964009\n","slug":"Spider-06-requests","published":1,"updated":"2016-07-06T14:07:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fu7000e3npxmel1iw3i","content":"<h1 id=\"知道创宇爬虫设计第六天：requests\"><a href=\"#知道创宇爬虫设计第六天：requests\" class=\"headerlink\" title=\"知道创宇爬虫设计第六天：requests\"></a>知道创宇爬虫设计第六天：requests</h1><p>从实验室回学校之后，仅仅是换了个网络，却突然出现了乱码问题</p>\n<p>折腾了半天编码无果，无意中发现把<code>urllib2</code>换成<code>requests</code>就好了<br>按照<code>requests</code><a href=\"http://www.python-requests.org/en/master/user/quickstart/\" target=\"_blank\" rel=\"external\">官方文档</a>里的解释</p>\n<blockquote>\n<p>When you make a request, Requests makes educated guesses about the encoding of the response based on the HTTP headers. The text encoding guessed by Requests is used when you access r.text.</p>\n</blockquote>\n<p>难怪总在知乎看见人安利，确实是更好用一些啊。。。</p>\n<p>具体用法也很简单方便<br>不过使用<code>request.text</code>返回结果时，标题依然会乱码</p>\n<blockquote>\n<p>You can also access the response body as bytes, for non-text requests</p>\n</blockquote>\n<p>改成使用<code>request.content</code>，果然一切正常了</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">            <span class=\"comment\"># request = urllib2.Request(url, headers=headers)</span></div><div class=\"line\">            <span class=\"comment\"># result = urllib2.urlopen(request).read()</span></div><div class=\"line\"></div><div class=\"line\">            request = requests.get(url, headers=headers)</div><div class=\"line\">            <span class=\"comment\"># result = request.text</span></div><div class=\"line\">            result = request.content</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.python-requests.org/en/master/\" target=\"_blank\" rel=\"external\">http://www.python-requests.org/en/master/</a></li>\n<li><a href=\"http://www.python-requests.org/en/master/user/quickstart/\" target=\"_blank\" rel=\"external\">http://www.python-requests.org/en/master/user/quickstart/</a></li>\n<li><a href=\"http://blog.csdn.net/alpha5/article/details/24964009\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/alpha5/article/details/24964009</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"知道创宇爬虫设计第六天：requests\"><a href=\"#知道创宇爬虫设计第六天：requests\" class=\"headerlink\" title=\"知道创宇爬虫设计第六天：requests\"></a>知道创宇爬虫设计第六天：requests</h1><p>从实验室回学校之后，仅仅是换了个网络，却突然出现了乱码问题</p>\n<p>折腾了半天编码无果，无意中发现把<code>urllib2</code>换成<code>requests</code>就好了<br>按照<code>requests</code><a href=\"http://www.python-requests.org/en/master/user/quickstart/\">官方文档</a>里的解释</p>\n<blockquote>\n<p>When you make a request, Requests makes educated guesses about the encoding of the response based on the HTTP headers. The text encoding guessed by Requests is used when you access r.text.</p>\n</blockquote>\n<p>难怪总在知乎看见人安利，确实是更好用一些啊。。。</p>\n<p>具体用法也很简单方便<br>不过使用<code>request.text</code>返回结果时，标题依然会乱码</p>\n<blockquote>\n<p>You can also access the response body as bytes, for non-text requests</p>\n</blockquote>\n<p>改成使用<code>request.content</code>，果然一切正常了</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">            <span class=\"comment\"># request = urllib2.Request(url, headers=headers)</span></div><div class=\"line\">            <span class=\"comment\"># result = urllib2.urlopen(request).read()</span></div><div class=\"line\"></div><div class=\"line\">            request = requests.get(url, headers=headers)</div><div class=\"line\">            <span class=\"comment\"># result = request.text</span></div><div class=\"line\">            result = request.content</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.python-requests.org/en/master/\">http://www.python-requests.org/en/master/</a></li>\n<li><a href=\"http://www.python-requests.org/en/master/user/quickstart/\">http://www.python-requests.org/en/master/user/quickstart/</a></li>\n<li><a href=\"http://blog.csdn.net/alpha5/article/details/24964009\">http://blog.csdn.net/alpha5/article/details/24964009</a></li>\n</ul>\n"},{"title":"Spider-07-doctest","date":"2016-04-08T03:43:23.000Z","_content":"\n# 知道创宇爬虫设计第七天: doctest\n\n`doctest`是 Python 内建的模块，用于文档测试，正好可以拿来用于爬虫的自测功能\n\n这个模块相对简单，直接贴代码\n\n# 代码\n\n```python\n...\ndef main():\n    ''' Prepare and run the spider\n    Self-test:\n    >>> class Args(object):\n    ...     pass\n    ...\n    >>> args = Args()\n    >>> args.url = 'www.baidu.com'\n    >>> args.depth = 1\n    >>> args.logfile = 'testself.log'\n    >>> args.loglevel = 4\n    >>> args.dbfile = 'testself.db'\n    >>> args.num_threads = 1\n    >>> args.key = ''\n    >>> set_logger(args.loglevel, args.logfile)\n    >>> logger.info(vars(args))\n    >>> spider = MySpider(args)\n    >>> spider.run()\n    '''\n...\n    # Self test\n    if args.testself:\n        import doctest\n        print doctest.testmod()\n        return\n...\n```\n另外其它部分也有少量修改，放在 https://github.com/answerrrrrrrrr/KnownsecSpider\n\n# 参考\n- http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319170285543a4d04751f8846908770660de849f285000\n- http://devdocs.io/python~2.7/library/doctest#doctest.DocTest\n- http://devdocs.io/python~2.7/library/argparse#argparse.Namespace","source":"_posts/Spider-07-doctest.md","raw":"---\ntitle: Spider-07-doctest\ndate: 2016-04-08 11:43:23\ncategory: Python\ntags: [Python, Spider, doctest]\n---\n\n# 知道创宇爬虫设计第七天: doctest\n\n`doctest`是 Python 内建的模块，用于文档测试，正好可以拿来用于爬虫的自测功能\n\n这个模块相对简单，直接贴代码\n\n# 代码\n\n```python\n...\ndef main():\n    ''' Prepare and run the spider\n    Self-test:\n    >>> class Args(object):\n    ...     pass\n    ...\n    >>> args = Args()\n    >>> args.url = 'www.baidu.com'\n    >>> args.depth = 1\n    >>> args.logfile = 'testself.log'\n    >>> args.loglevel = 4\n    >>> args.dbfile = 'testself.db'\n    >>> args.num_threads = 1\n    >>> args.key = ''\n    >>> set_logger(args.loglevel, args.logfile)\n    >>> logger.info(vars(args))\n    >>> spider = MySpider(args)\n    >>> spider.run()\n    '''\n...\n    # Self test\n    if args.testself:\n        import doctest\n        print doctest.testmod()\n        return\n...\n```\n另外其它部分也有少量修改，放在 https://github.com/answerrrrrrrrr/KnownsecSpider\n\n# 参考\n- http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319170285543a4d04751f8846908770660de849f285000\n- http://devdocs.io/python~2.7/library/doctest#doctest.DocTest\n- http://devdocs.io/python~2.7/library/argparse#argparse.Namespace","slug":"Spider-07-doctest","published":1,"updated":"2016-07-06T14:08:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fu9000f3npxzex5k19m","content":"<h1 id=\"知道创宇爬虫设计第七天-doctest\"><a href=\"#知道创宇爬虫设计第七天-doctest\" class=\"headerlink\" title=\"知道创宇爬虫设计第七天: doctest\"></a>知道创宇爬虫设计第七天: doctest</h1><p><code>doctest</code>是 Python 内建的模块，用于文档测试，正好可以拿来用于爬虫的自测功能</p>\n<p>这个模块相对简单，直接贴代码</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">''' Prepare and run the spider</span></div><div class=\"line\">    Self-test:</div><div class=\"line\">    &gt;&gt;&gt; class Args(object):</div><div class=\"line\">    ...     pass</div><div class=\"line\">    ...</div><div class=\"line\">    &gt;&gt;&gt; args = Args()</div><div class=\"line\">    &gt;&gt;&gt; args.url = 'www.baidu.com'</div><div class=\"line\">    &gt;&gt;&gt; args.depth = 1</div><div class=\"line\">    &gt;&gt;&gt; args.logfile = 'testself.log'</div><div class=\"line\">    &gt;&gt;&gt; args.loglevel = 4</div><div class=\"line\">    &gt;&gt;&gt; args.dbfile = 'testself.db'</div><div class=\"line\">    &gt;&gt;&gt; args.num_threads = 1</div><div class=\"line\">    &gt;&gt;&gt; args.key = ''</div><div class=\"line\">    &gt;&gt;&gt; set_logger(args.loglevel, args.logfile)</div><div class=\"line\">    &gt;&gt;&gt; logger.info(vars(args))</div><div class=\"line\">    &gt;&gt;&gt; spider = MySpider(args)</div><div class=\"line\">    &gt;&gt;&gt; spider.run()</div><div class=\"line\">    '''</div><div class=\"line\">...</div><div class=\"line\">    <span class=\"comment\"># Self test</span></div><div class=\"line\">    <span class=\"keyword\">if</span> args.testself:</div><div class=\"line\">        <span class=\"keyword\">import</span> doctest</div><div class=\"line\">        <span class=\"keyword\">print</span> doctest.testmod()</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>另外其它部分也有少量修改，放在 <a href=\"https://github.com/answerrrrrrrrr/KnownsecSpider\" target=\"_blank\" rel=\"external\">https://github.com/answerrrrrrrrr/KnownsecSpider</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319170285543a4d04751f8846908770660de849f285000\" target=\"_blank\" rel=\"external\">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319170285543a4d04751f8846908770660de849f285000</a></li>\n<li><a href=\"http://devdocs.io/python~2.7/library/doctest#doctest.DocTest\" target=\"_blank\" rel=\"external\">http://devdocs.io/python~2.7/library/doctest#doctest.DocTest</a></li>\n<li><a href=\"http://devdocs.io/python~2.7/library/argparse#argparse.Namespace\" target=\"_blank\" rel=\"external\">http://devdocs.io/python~2.7/library/argparse#argparse.Namespace</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"知道创宇爬虫设计第七天-doctest\"><a href=\"#知道创宇爬虫设计第七天-doctest\" class=\"headerlink\" title=\"知道创宇爬虫设计第七天: doctest\"></a>知道创宇爬虫设计第七天: doctest</h1><p><code>doctest</code>是 Python 内建的模块，用于文档测试，正好可以拿来用于爬虫的自测功能</p>\n<p>这个模块相对简单，直接贴代码</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">''' Prepare and run the spider</div><div class=\"line\">    Self-test:</div><div class=\"line\">    &gt;&gt;&gt; class Args(object):</div><div class=\"line\">    ...     pass</div><div class=\"line\">    ...</div><div class=\"line\">    &gt;&gt;&gt; args = Args()</div><div class=\"line\">    &gt;&gt;&gt; args.url = 'www.baidu.com'</div><div class=\"line\">    &gt;&gt;&gt; args.depth = 1</div><div class=\"line\">    &gt;&gt;&gt; args.logfile = 'testself.log'</div><div class=\"line\">    &gt;&gt;&gt; args.loglevel = 4</div><div class=\"line\">    &gt;&gt;&gt; args.dbfile = 'testself.db'</div><div class=\"line\">    &gt;&gt;&gt; args.num_threads = 1</div><div class=\"line\">    &gt;&gt;&gt; args.key = ''</div><div class=\"line\">    &gt;&gt;&gt; set_logger(args.loglevel, args.logfile)</div><div class=\"line\">    &gt;&gt;&gt; logger.info(vars(args))</div><div class=\"line\">    &gt;&gt;&gt; spider = MySpider(args)</div><div class=\"line\">    &gt;&gt;&gt; spider.run()</div><div class=\"line\">    '''</span></div><div class=\"line\">...</div><div class=\"line\">    <span class=\"comment\"># Self test</span></div><div class=\"line\">    <span class=\"keyword\">if</span> args.testself:</div><div class=\"line\">        <span class=\"keyword\">import</span> doctest</div><div class=\"line\">        <span class=\"keyword\">print</span> doctest.testmod()</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>另外其它部分也有少量修改，放在 <a href=\"https://github.com/answerrrrrrrrr/KnownsecSpider\">https://github.com/answerrrrrrrrr/KnownsecSpider</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319170285543a4d04751f8846908770660de849f285000\">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319170285543a4d04751f8846908770660de849f285000</a></li>\n<li><a href=\"http://devdocs.io/python~2.7/library/doctest#doctest.DocTest\">http://devdocs.io/python~2.7/library/doctest#doctest.DocTest</a></li>\n<li><a href=\"http://devdocs.io/python~2.7/library/argparse#argparse.Namespace\">http://devdocs.io/python~2.7/library/argparse#argparse.Namespace</a></li>\n</ul>\n"},{"title":"Sublime Preferences","date":"2016-04-05T08:24:00.000Z","_content":"\n# 切换标签页\n首先，Sublime 的所谓「标签页智能切换」很蛋疼，改成通用快捷键设定\n\n```js Default (OSX).sublime-keymap\n    {\n        \"keys\": [\"ctrl+tab\"],\n        \"command\": \"next_view\"\n    },\n    {\n        \"keys\": [\"ctrl+shift+tab\"],\n        \"command\": \"prev_view\"\n    },\n```\n\n\n# [Vintage](https://github.com/sublimehq/Vintage)\n\n这个是Sublime自带的vi模式  \n先注释掉`Preferences.sublime-settings`里的`Vintage`\n\n```js Preferences.sublime-settings\n...\n    \"ignored_packages\":[\n        // \"Vintage\"\n    ],\n...\n```\n\n再按照习惯把`esc`改成`j` `j`\n\n```js Default (OSX).sublime-keymap\n...\n// Vintage\n    {\n        \"keys\": [\"j\", \"j\"],\n        \"command\": \"exit_insert_mode\",\n        \"context\":[\n            {\n                \"key\": \"setting.command_mode\",\n                \"operand\": false\n            },\n            {\n                \"key\": \"setting.is_widget\",\n                \"operand\": false\n            }\n        ]\n    },\n...\n```\n另外还有一个[VintageEx](https://github.com/SublimeText/VintageEx)，不过我倒是没有太大需求\n\n\n# [SublimeREPL](https://github.com/wuub/SublimeREPL)\n\n无意中发现一个类似 Vim 下 quickrun 的插件`SublimeREPL`\n\n在`Perferences`-`Key Bindings - User`中加入\n\n```js Default (OSX).sublime-keymap\n...\n    // SublimeREPL - Python\n    {\n        \"keys\": [\"f2\"],\n        \"caption\": \"SublimeREPL: Python - RUN current file\",\n        \"command\": \"run_existing_window_command\",\n        \"args\": {\n            \"id\": \"repl_python_run\",\n            \"file\": \"config/Python/Main.sublime-menu\",\n        }\n    },\n...\n```\n\n这样一来，保存之后按`F2`即可快速运行 Python 脚本，不用来回切换终端了   \nC'est bon!\n\n# [ExpandRegion](https://github.com/aronwoost/sublime-expand-region)\n\n在[知乎](https://www.zhihu.com/question/24896283)看到推荐感觉挺不错，用于快速扩展选区，也是在`Perferences`-`Key Bindings - User`中加入\n\n```js Default (OSX).sublime-keymap\n...\n    {\n        \"keys\": [\"super+e\"],\n        \"command\": \"expand_region\"\n    },\n    {\n        \"keys\": [\"super+u\"],\n        \"command\": \"expand_region\",\n        \"args\": {\n            \"undo\": true\n        },\n        \"context\": [\n            {\n                \"key\": \"expand_region_soft_undo\"\n            }\n        ]\n    },\n...\n```\n\n# [Anaconda](https://github.com/DamnWidget/anaconda)\n\n这个插件确实强大，不过有点小问题\n\n## import 时不能自动补全\n在[Stackoverflow](https://github.com/DamnWidget/anaconda/issues/89)找到解决方案   \n新建`/Users/air9/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/Python/Completion\\ Rules.tmPreferences`并加入如下内容\n\n```xml Completion Rules.tmPreferences\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>scope</key>\n    <string>source.python</string>\n    <key>settings</key>\n    <dict>\n        <key>cancelCompletion</key>\n        <string>^(.*\\b(and|or)$)|(\\s*(pass|return|and|or|(class|def)\\s*[a-zA-Z_0-9]+)$)</string>\n    </dict>\n</dict>\n</plist>\n```\n\n保存后重启 Sublime 即可\n\n**不过第一次弄的时候，不知道怎么回事出现了配置文件被初始化的 bug，所有插件和改键都失效了。。。还好我碰巧刚刚做了备份，所以下次也要记得先备份一下**\n\n## 过于频繁的补全弹窗\n随便按一个空格就以`a`开头弹窗提示我补全，有时甚至回车补全完成之后弹窗仍然消失不掉，一怒之下禁用掉了\n\n```js Anaconda.sublime-settings\n...\n    /*\n        Disable anaconda completion\n\n        WARNING: set this as true will totally disable anaconda completion\n    */\n    // \"disable_anaconda_completion\": false,\n    \"disable_anaconda_completion\": true,\n\n    /*\n...\n```\n\nSublime 自带的轻量级补全其实已经满足我的日常需求了，装 Anaconda 主要还是为了 Tooltip 和 PEP8 提示\n\n# [MarkdownEditing](https://github.com/SublimeText-Markdown/MarkdownEditing)\n\n这个其实用处不大，平常在 Mac 上写 Markdown 都用的 MacDown   \n不过默认会渲染 txt 还是挺蛋疼的，注释掉   \n顺便改个主题\n\n```js Markdown.sublime-settings\n{\n    \"extensions\":\n    [\n        \"md\",\n        \"mdown\",\n        // \"txt\"\n    ],\n\n    \"color_scheme\": \"Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme\",\n}\n```","source":"_posts/Sublime-Packages.md","raw":"---\ntitle: Sublime Preferences\ndate: 2016-04-05 16:24:00\ncategory: [Sublime]\ntags: [SublimeREPL, ExpandRegion, Anaconda, MarkdownEditing]\n---\n\n# 切换标签页\n首先，Sublime 的所谓「标签页智能切换」很蛋疼，改成通用快捷键设定\n\n```js Default (OSX).sublime-keymap\n    {\n        \"keys\": [\"ctrl+tab\"],\n        \"command\": \"next_view\"\n    },\n    {\n        \"keys\": [\"ctrl+shift+tab\"],\n        \"command\": \"prev_view\"\n    },\n```\n\n\n# [Vintage](https://github.com/sublimehq/Vintage)\n\n这个是Sublime自带的vi模式  \n先注释掉`Preferences.sublime-settings`里的`Vintage`\n\n```js Preferences.sublime-settings\n...\n    \"ignored_packages\":[\n        // \"Vintage\"\n    ],\n...\n```\n\n再按照习惯把`esc`改成`j` `j`\n\n```js Default (OSX).sublime-keymap\n...\n// Vintage\n    {\n        \"keys\": [\"j\", \"j\"],\n        \"command\": \"exit_insert_mode\",\n        \"context\":[\n            {\n                \"key\": \"setting.command_mode\",\n                \"operand\": false\n            },\n            {\n                \"key\": \"setting.is_widget\",\n                \"operand\": false\n            }\n        ]\n    },\n...\n```\n另外还有一个[VintageEx](https://github.com/SublimeText/VintageEx)，不过我倒是没有太大需求\n\n\n# [SublimeREPL](https://github.com/wuub/SublimeREPL)\n\n无意中发现一个类似 Vim 下 quickrun 的插件`SublimeREPL`\n\n在`Perferences`-`Key Bindings - User`中加入\n\n```js Default (OSX).sublime-keymap\n...\n    // SublimeREPL - Python\n    {\n        \"keys\": [\"f2\"],\n        \"caption\": \"SublimeREPL: Python - RUN current file\",\n        \"command\": \"run_existing_window_command\",\n        \"args\": {\n            \"id\": \"repl_python_run\",\n            \"file\": \"config/Python/Main.sublime-menu\",\n        }\n    },\n...\n```\n\n这样一来，保存之后按`F2`即可快速运行 Python 脚本，不用来回切换终端了   \nC'est bon!\n\n# [ExpandRegion](https://github.com/aronwoost/sublime-expand-region)\n\n在[知乎](https://www.zhihu.com/question/24896283)看到推荐感觉挺不错，用于快速扩展选区，也是在`Perferences`-`Key Bindings - User`中加入\n\n```js Default (OSX).sublime-keymap\n...\n    {\n        \"keys\": [\"super+e\"],\n        \"command\": \"expand_region\"\n    },\n    {\n        \"keys\": [\"super+u\"],\n        \"command\": \"expand_region\",\n        \"args\": {\n            \"undo\": true\n        },\n        \"context\": [\n            {\n                \"key\": \"expand_region_soft_undo\"\n            }\n        ]\n    },\n...\n```\n\n# [Anaconda](https://github.com/DamnWidget/anaconda)\n\n这个插件确实强大，不过有点小问题\n\n## import 时不能自动补全\n在[Stackoverflow](https://github.com/DamnWidget/anaconda/issues/89)找到解决方案   \n新建`/Users/air9/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/Python/Completion\\ Rules.tmPreferences`并加入如下内容\n\n```xml Completion Rules.tmPreferences\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>scope</key>\n    <string>source.python</string>\n    <key>settings</key>\n    <dict>\n        <key>cancelCompletion</key>\n        <string>^(.*\\b(and|or)$)|(\\s*(pass|return|and|or|(class|def)\\s*[a-zA-Z_0-9]+)$)</string>\n    </dict>\n</dict>\n</plist>\n```\n\n保存后重启 Sublime 即可\n\n**不过第一次弄的时候，不知道怎么回事出现了配置文件被初始化的 bug，所有插件和改键都失效了。。。还好我碰巧刚刚做了备份，所以下次也要记得先备份一下**\n\n## 过于频繁的补全弹窗\n随便按一个空格就以`a`开头弹窗提示我补全，有时甚至回车补全完成之后弹窗仍然消失不掉，一怒之下禁用掉了\n\n```js Anaconda.sublime-settings\n...\n    /*\n        Disable anaconda completion\n\n        WARNING: set this as true will totally disable anaconda completion\n    */\n    // \"disable_anaconda_completion\": false,\n    \"disable_anaconda_completion\": true,\n\n    /*\n...\n```\n\nSublime 自带的轻量级补全其实已经满足我的日常需求了，装 Anaconda 主要还是为了 Tooltip 和 PEP8 提示\n\n# [MarkdownEditing](https://github.com/SublimeText-Markdown/MarkdownEditing)\n\n这个其实用处不大，平常在 Mac 上写 Markdown 都用的 MacDown   \n不过默认会渲染 txt 还是挺蛋疼的，注释掉   \n顺便改个主题\n\n```js Markdown.sublime-settings\n{\n    \"extensions\":\n    [\n        \"md\",\n        \"mdown\",\n        // \"txt\"\n    ],\n\n    \"color_scheme\": \"Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme\",\n}\n```","slug":"Sublime-Packages","published":1,"updated":"2016-06-26T06:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fua000g3npx7d5zqnxh","content":"<h1 id=\"切换标签页\"><a href=\"#切换标签页\" class=\"headerlink\" title=\"切换标签页\"></a>切换标签页</h1><p>首先，Sublime 的所谓「标签页智能切换」很蛋疼，改成通用快捷键设定</p>\n<figure class=\"highlight js\"><figcaption><span>Default (OSX).sublime-keymap</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"ctrl+tab\"</span>],</div><div class=\"line\">    <span class=\"string\">\"command\"</span>: <span class=\"string\">\"next_view\"</span></div><div class=\"line\">&#125;,</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"ctrl+shift+tab\"</span>],</div><div class=\"line\">    <span class=\"string\">\"command\"</span>: <span class=\"string\">\"prev_view\"</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h1 id=\"Vintage\"><a href=\"#Vintage\" class=\"headerlink\" title=\"Vintage\"></a><a href=\"https://github.com/sublimehq/Vintage\" target=\"_blank\" rel=\"external\">Vintage</a></h1><p>这个是Sublime自带的vi模式<br>先注释掉<code>Preferences.sublime-settings</code>里的<code>Vintage</code></p>\n<figure class=\"highlight js\"><figcaption><span>Preferences.sublime-settings</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    <span class=\"string\">\"ignored_packages\"</span>:[</div><div class=\"line\">        <span class=\"comment\">// \"Vintage\"</span></div><div class=\"line\">    ],</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>再按照习惯把<code>esc</code>改成<code>j</code> <code>j</code></p>\n<figure class=\"highlight js\"><figcaption><span>Default (OSX).sublime-keymap</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// Vintage</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"j\"</span>, <span class=\"string\">\"j\"</span>],</div><div class=\"line\">        <span class=\"string\">\"command\"</span>: <span class=\"string\">\"exit_insert_mode\"</span>,</div><div class=\"line\">        <span class=\"string\">\"context\"</span>:[</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"string\">\"key\"</span>: <span class=\"string\">\"setting.command_mode\"</span>,</div><div class=\"line\">                <span class=\"string\">\"operand\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"string\">\"key\"</span>: <span class=\"string\">\"setting.is_widget\"</span>,</div><div class=\"line\">                <span class=\"string\">\"operand\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>另外还有一个<a href=\"https://github.com/SublimeText/VintageEx\" target=\"_blank\" rel=\"external\">VintageEx</a>，不过我倒是没有太大需求</p>\n<h1 id=\"SublimeREPL\"><a href=\"#SublimeREPL\" class=\"headerlink\" title=\"SublimeREPL\"></a><a href=\"https://github.com/wuub/SublimeREPL\" target=\"_blank\" rel=\"external\">SublimeREPL</a></h1><p>无意中发现一个类似 Vim 下 quickrun 的插件<code>SublimeREPL</code></p>\n<p>在<code>Perferences</code>-<code>Key Bindings - User</code>中加入</p>\n<figure class=\"highlight js\"><figcaption><span>Default (OSX).sublime-keymap</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    <span class=\"comment\">// SublimeREPL - Python</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"f2\"</span>],</div><div class=\"line\">        <span class=\"string\">\"caption\"</span>: <span class=\"string\">\"SublimeREPL: Python - RUN current file\"</span>,</div><div class=\"line\">        <span class=\"string\">\"command\"</span>: <span class=\"string\">\"run_existing_window_command\"</span>,</div><div class=\"line\">        <span class=\"string\">\"args\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"id\"</span>: <span class=\"string\">\"repl_python_run\"</span>,</div><div class=\"line\">            <span class=\"string\">\"file\"</span>: <span class=\"string\">\"config/Python/Main.sublime-menu\"</span>,</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>这样一来，保存之后按<code>F2</code>即可快速运行 Python 脚本，不用来回切换终端了<br>C’est bon!</p>\n<h1 id=\"ExpandRegion\"><a href=\"#ExpandRegion\" class=\"headerlink\" title=\"ExpandRegion\"></a><a href=\"https://github.com/aronwoost/sublime-expand-region\" target=\"_blank\" rel=\"external\">ExpandRegion</a></h1><p>在<a href=\"https://www.zhihu.com/question/24896283\" target=\"_blank\" rel=\"external\">知乎</a>看到推荐感觉挺不错，用于快速扩展选区，也是在<code>Perferences</code>-<code>Key Bindings - User</code>中加入</p>\n<figure class=\"highlight js\"><figcaption><span>Default (OSX).sublime-keymap</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"super+e\"</span>],</div><div class=\"line\">        <span class=\"string\">\"command\"</span>: <span class=\"string\">\"expand_region\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"super+u\"</span>],</div><div class=\"line\">        <span class=\"string\">\"command\"</span>: <span class=\"string\">\"expand_region\"</span>,</div><div class=\"line\">        <span class=\"string\">\"args\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"undo\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"context\"</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"string\">\"key\"</span>: <span class=\"string\">\"expand_region_soft_undo\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"Anaconda\"><a href=\"#Anaconda\" class=\"headerlink\" title=\"Anaconda\"></a><a href=\"https://github.com/DamnWidget/anaconda\" target=\"_blank\" rel=\"external\">Anaconda</a></h1><p>这个插件确实强大，不过有点小问题</p>\n<h2 id=\"import-时不能自动补全\"><a href=\"#import-时不能自动补全\" class=\"headerlink\" title=\"import 时不能自动补全\"></a>import 时不能自动补全</h2><p>在<a href=\"https://github.com/DamnWidget/anaconda/issues/89\" target=\"_blank\" rel=\"external\">Stackoverflow</a>找到解决方案<br>新建<code>/Users/air9/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/Python/Completion\\ Rules.tmPreferences</code>并加入如下内容</p>\n<figure class=\"highlight xml\"><figcaption><span>Completion Rules.tmPreferences</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>source.python<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>cancelCompletion<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>^(.*\\b(and|or)$)|(\\s*(pass|return|and|or|(class|def)\\s*[a-zA-Z_0-9]+)$)<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>保存后重启 Sublime 即可</p>\n<p><strong>不过第一次弄的时候，不知道怎么回事出现了配置文件被初始化的 bug，所有插件和改键都失效了。。。还好我碰巧刚刚做了备份，所以下次也要记得先备份一下</strong></p>\n<h2 id=\"过于频繁的补全弹窗\"><a href=\"#过于频繁的补全弹窗\" class=\"headerlink\" title=\"过于频繁的补全弹窗\"></a>过于频繁的补全弹窗</h2><p>随便按一个空格就以<code>a</code>开头弹窗提示我补全，有时甚至回车补全完成之后弹窗仍然消失不掉，一怒之下禁用掉了</p>\n<figure class=\"highlight js\"><figcaption><span>Anaconda.sublime-settings</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">        Disable anaconda completion</div><div class=\"line\"></div><div class=\"line\">        WARNING: set this as true will totally disable anaconda completion</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"comment\">// \"disable_anaconda_completion\": false,</span></div><div class=\"line\">    <span class=\"string\">\"disable_anaconda_completion\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>Sublime 自带的轻量级补全其实已经满足我的日常需求了，装 Anaconda 主要还是为了 Tooltip 和 PEP8 提示</p>\n<h1 id=\"MarkdownEditing\"><a href=\"#MarkdownEditing\" class=\"headerlink\" title=\"MarkdownEditing\"></a><a href=\"https://github.com/SublimeText-Markdown/MarkdownEditing\" target=\"_blank\" rel=\"external\">MarkdownEditing</a></h1><p>这个其实用处不大，平常在 Mac 上写 Markdown 都用的 MacDown<br>不过默认会渲染 txt 还是挺蛋疼的，注释掉<br>顺便改个主题</p>\n<figure class=\"highlight js\"><figcaption><span>Markdown.sublime-settings</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"extensions\"</span>:</div><div class=\"line\">    [</div><div class=\"line\">        <span class=\"string\">\"md\"</span>,</div><div class=\"line\">        <span class=\"string\">\"mdown\"</span>,</div><div class=\"line\">        <span class=\"comment\">// \"txt\"</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">\"color_scheme\"</span>: <span class=\"string\">\"Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme\"</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"切换标签页\"><a href=\"#切换标签页\" class=\"headerlink\" title=\"切换标签页\"></a>切换标签页</h1><p>首先，Sublime 的所谓「标签页智能切换」很蛋疼，改成通用快捷键设定</p>\n<figure class=\"highlight js\"><figcaption><span>Default (OSX).sublime-keymap</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"ctrl+tab\"</span>],</div><div class=\"line\">    <span class=\"string\">\"command\"</span>: <span class=\"string\">\"next_view\"</span></div><div class=\"line\">&#125;,</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"ctrl+shift+tab\"</span>],</div><div class=\"line\">    <span class=\"string\">\"command\"</span>: <span class=\"string\">\"prev_view\"</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h1 id=\"Vintage\"><a href=\"#Vintage\" class=\"headerlink\" title=\"Vintage\"></a><a href=\"https://github.com/sublimehq/Vintage\">Vintage</a></h1><p>这个是Sublime自带的vi模式<br>先注释掉<code>Preferences.sublime-settings</code>里的<code>Vintage</code></p>\n<figure class=\"highlight js\"><figcaption><span>Preferences.sublime-settings</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    <span class=\"string\">\"ignored_packages\"</span>:[</div><div class=\"line\">        <span class=\"comment\">// \"Vintage\"</span></div><div class=\"line\">    ],</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>再按照习惯把<code>esc</code>改成<code>j</code> <code>j</code></p>\n<figure class=\"highlight js\"><figcaption><span>Default (OSX).sublime-keymap</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// Vintage</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"j\"</span>, <span class=\"string\">\"j\"</span>],</div><div class=\"line\">        <span class=\"string\">\"command\"</span>: <span class=\"string\">\"exit_insert_mode\"</span>,</div><div class=\"line\">        <span class=\"string\">\"context\"</span>:[</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"string\">\"key\"</span>: <span class=\"string\">\"setting.command_mode\"</span>,</div><div class=\"line\">                <span class=\"string\">\"operand\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"string\">\"key\"</span>: <span class=\"string\">\"setting.is_widget\"</span>,</div><div class=\"line\">                <span class=\"string\">\"operand\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>另外还有一个<a href=\"https://github.com/SublimeText/VintageEx\">VintageEx</a>，不过我倒是没有太大需求</p>\n<h1 id=\"SublimeREPL\"><a href=\"#SublimeREPL\" class=\"headerlink\" title=\"SublimeREPL\"></a><a href=\"https://github.com/wuub/SublimeREPL\">SublimeREPL</a></h1><p>无意中发现一个类似 Vim 下 quickrun 的插件<code>SublimeREPL</code></p>\n<p>在<code>Perferences</code>-<code>Key Bindings - User</code>中加入</p>\n<figure class=\"highlight js\"><figcaption><span>Default (OSX).sublime-keymap</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    <span class=\"comment\">// SublimeREPL - Python</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"f2\"</span>],</div><div class=\"line\">        <span class=\"string\">\"caption\"</span>: <span class=\"string\">\"SublimeREPL: Python - RUN current file\"</span>,</div><div class=\"line\">        <span class=\"string\">\"command\"</span>: <span class=\"string\">\"run_existing_window_command\"</span>,</div><div class=\"line\">        <span class=\"string\">\"args\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"id\"</span>: <span class=\"string\">\"repl_python_run\"</span>,</div><div class=\"line\">            <span class=\"string\">\"file\"</span>: <span class=\"string\">\"config/Python/Main.sublime-menu\"</span>,</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>这样一来，保存之后按<code>F2</code>即可快速运行 Python 脚本，不用来回切换终端了<br>C’est bon!</p>\n<h1 id=\"ExpandRegion\"><a href=\"#ExpandRegion\" class=\"headerlink\" title=\"ExpandRegion\"></a><a href=\"https://github.com/aronwoost/sublime-expand-region\">ExpandRegion</a></h1><p>在<a href=\"https://www.zhihu.com/question/24896283\">知乎</a>看到推荐感觉挺不错，用于快速扩展选区，也是在<code>Perferences</code>-<code>Key Bindings - User</code>中加入</p>\n<figure class=\"highlight js\"><figcaption><span>Default (OSX).sublime-keymap</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"super+e\"</span>],</div><div class=\"line\">        <span class=\"string\">\"command\"</span>: <span class=\"string\">\"expand_region\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"keys\"</span>: [<span class=\"string\">\"super+u\"</span>],</div><div class=\"line\">        <span class=\"string\">\"command\"</span>: <span class=\"string\">\"expand_region\"</span>,</div><div class=\"line\">        <span class=\"string\">\"args\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"undo\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"context\"</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"string\">\"key\"</span>: <span class=\"string\">\"expand_region_soft_undo\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"Anaconda\"><a href=\"#Anaconda\" class=\"headerlink\" title=\"Anaconda\"></a><a href=\"https://github.com/DamnWidget/anaconda\">Anaconda</a></h1><p>这个插件确实强大，不过有点小问题</p>\n<h2 id=\"import-时不能自动补全\"><a href=\"#import-时不能自动补全\" class=\"headerlink\" title=\"import 时不能自动补全\"></a>import 时不能自动补全</h2><p>在<a href=\"https://github.com/DamnWidget/anaconda/issues/89\">Stackoverflow</a>找到解决方案<br>新建<code>/Users/air9/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/Python/Completion\\ Rules.tmPreferences</code>并加入如下内容</p>\n<figure class=\"highlight xml\"><figcaption><span>Completion Rules.tmPreferences</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>scope<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>source.python<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>settings<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>cancelCompletion<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>^(.*\\b(and|or)$)|(\\s*(pass|return|and|or|(class|def)\\s*[a-zA-Z_0-9]+)$)<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>保存后重启 Sublime 即可</p>\n<p><strong>不过第一次弄的时候，不知道怎么回事出现了配置文件被初始化的 bug，所有插件和改键都失效了。。。还好我碰巧刚刚做了备份，所以下次也要记得先备份一下</strong></p>\n<h2 id=\"过于频繁的补全弹窗\"><a href=\"#过于频繁的补全弹窗\" class=\"headerlink\" title=\"过于频繁的补全弹窗\"></a>过于频繁的补全弹窗</h2><p>随便按一个空格就以<code>a</code>开头弹窗提示我补全，有时甚至回车补全完成之后弹窗仍然消失不掉，一怒之下禁用掉了</p>\n<figure class=\"highlight js\"><figcaption><span>Anaconda.sublime-settings</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">        Disable anaconda completion</div><div class=\"line\"></div><div class=\"line\">        WARNING: set this as true will totally disable anaconda completion</div><div class=\"line\">    */</span></div><div class=\"line\">    <span class=\"comment\">// \"disable_anaconda_completion\": false,</span></div><div class=\"line\">    <span class=\"string\">\"disable_anaconda_completion\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">...</span></div></pre></td></tr></table></figure>\n<p>Sublime 自带的轻量级补全其实已经满足我的日常需求了，装 Anaconda 主要还是为了 Tooltip 和 PEP8 提示</p>\n<h1 id=\"MarkdownEditing\"><a href=\"#MarkdownEditing\" class=\"headerlink\" title=\"MarkdownEditing\"></a><a href=\"https://github.com/SublimeText-Markdown/MarkdownEditing\">MarkdownEditing</a></h1><p>这个其实用处不大，平常在 Mac 上写 Markdown 都用的 MacDown<br>不过默认会渲染 txt 还是挺蛋疼的，注释掉<br>顺便改个主题</p>\n<figure class=\"highlight js\"><figcaption><span>Markdown.sublime-settings</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"extensions\"</span>:</div><div class=\"line\">    [</div><div class=\"line\">        <span class=\"string\">\"md\"</span>,</div><div class=\"line\">        <span class=\"string\">\"mdown\"</span>,</div><div class=\"line\">        <span class=\"comment\">// \"txt\"</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">\"color_scheme\"</span>: <span class=\"string\">\"Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme\"</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"arch gdb pip ropgadget","date":"2016-03-09T07:28:36.000Z","_content":"\n### gdb plugin: [gdb-peda](https://github.com/longld/peda)\n`sudo pacman -S gdb`\n\n`git clone https://github.com/longld/peda.git ~/peda`\n\n`echo \"source ~/peda/peda.py\" >> ~/.gdbinit`\n\n\n### gdb plugin: [libheap](https://github.com/cloudburst/libheap)\n`curl https://raw.githubusercontent.com/answerrrrrrrrr/VRL/master/test/exploits/lib/libheap.py > libheap.py`\n\n`sudo mv libheap.py /usr/lib/python2.7`\n\n`gdb`\n\n`(gdb) python from libheap import *`\n\n`(gdb) heap -h`\n\n\n### pip\n`curl https://bootstrap.pypa.io/get-pip.py > getpip.py`\n\n`sudo python getpip.py`\n\n\n\n### ROPgadget\n\n`sudo pacman -S python-capstone`\n\n`sudo pip install ropgadget`\n\nIf gets errors about capstone:\n\n`sudo pip install ropgadget --upgrade`\n","source":"_posts/arch-gdb-peda-pip-ropgadget.md","raw":"---\ntitle: arch gdb pip ropgadget\ndate: 2016-03-09 15:28:36\ncategory: rop\ntags: [Archlinux, gdb, pip]\n---\n\n### gdb plugin: [gdb-peda](https://github.com/longld/peda)\n`sudo pacman -S gdb`\n\n`git clone https://github.com/longld/peda.git ~/peda`\n\n`echo \"source ~/peda/peda.py\" >> ~/.gdbinit`\n\n\n### gdb plugin: [libheap](https://github.com/cloudburst/libheap)\n`curl https://raw.githubusercontent.com/answerrrrrrrrr/VRL/master/test/exploits/lib/libheap.py > libheap.py`\n\n`sudo mv libheap.py /usr/lib/python2.7`\n\n`gdb`\n\n`(gdb) python from libheap import *`\n\n`(gdb) heap -h`\n\n\n### pip\n`curl https://bootstrap.pypa.io/get-pip.py > getpip.py`\n\n`sudo python getpip.py`\n\n\n\n### ROPgadget\n\n`sudo pacman -S python-capstone`\n\n`sudo pip install ropgadget`\n\nIf gets errors about capstone:\n\n`sudo pip install ropgadget --upgrade`\n","slug":"arch-gdb-peda-pip-ropgadget","published":1,"updated":"2016-06-26T06:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fub000h3npxgourzxbf","content":"<h3 id=\"gdb-plugin-gdb-peda\"><a href=\"#gdb-plugin-gdb-peda\" class=\"headerlink\" title=\"gdb plugin: gdb-peda\"></a>gdb plugin: <a href=\"https://github.com/longld/peda\" target=\"_blank\" rel=\"external\">gdb-peda</a></h3><p><code>sudo pacman -S gdb</code></p>\n<p><code>git clone https://github.com/longld/peda.git ~/peda</code></p>\n<p><code>echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</code></p>\n<h3 id=\"gdb-plugin-libheap\"><a href=\"#gdb-plugin-libheap\" class=\"headerlink\" title=\"gdb plugin: libheap\"></a>gdb plugin: <a href=\"https://github.com/cloudburst/libheap\" target=\"_blank\" rel=\"external\">libheap</a></h3><p><code>curl https://raw.githubusercontent.com/answerrrrrrrrr/VRL/master/test/exploits/lib/libheap.py &gt; libheap.py</code></p>\n<p><code>sudo mv libheap.py /usr/lib/python2.7</code></p>\n<p><code>gdb</code></p>\n<p><code>(gdb) python from libheap import *</code></p>\n<p><code>(gdb) heap -h</code></p>\n<h3 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a>pip</h3><p><code>curl https://bootstrap.pypa.io/get-pip.py &gt; getpip.py</code></p>\n<p><code>sudo python getpip.py</code></p>\n<h3 id=\"ROPgadget\"><a href=\"#ROPgadget\" class=\"headerlink\" title=\"ROPgadget\"></a>ROPgadget</h3><p><code>sudo pacman -S python-capstone</code></p>\n<p><code>sudo pip install ropgadget</code></p>\n<p>If gets errors about capstone:</p>\n<p><code>sudo pip install ropgadget --upgrade</code></p>\n","excerpt":"","more":"<h3 id=\"gdb-plugin-gdb-peda\"><a href=\"#gdb-plugin-gdb-peda\" class=\"headerlink\" title=\"gdb plugin: gdb-peda\"></a>gdb plugin: <a href=\"https://github.com/longld/peda\">gdb-peda</a></h3><p><code>sudo pacman -S gdb</code></p>\n<p><code>git clone https://github.com/longld/peda.git ~/peda</code></p>\n<p><code>echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</code></p>\n<h3 id=\"gdb-plugin-libheap\"><a href=\"#gdb-plugin-libheap\" class=\"headerlink\" title=\"gdb plugin: libheap\"></a>gdb plugin: <a href=\"https://github.com/cloudburst/libheap\">libheap</a></h3><p><code>curl https://raw.githubusercontent.com/answerrrrrrrrr/VRL/master/test/exploits/lib/libheap.py &gt; libheap.py</code></p>\n<p><code>sudo mv libheap.py /usr/lib/python2.7</code></p>\n<p><code>gdb</code></p>\n<p><code>(gdb) python from libheap import *</code></p>\n<p><code>(gdb) heap -h</code></p>\n<h3 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a>pip</h3><p><code>curl https://bootstrap.pypa.io/get-pip.py &gt; getpip.py</code></p>\n<p><code>sudo python getpip.py</code></p>\n<h3 id=\"ROPgadget\"><a href=\"#ROPgadget\" class=\"headerlink\" title=\"ROPgadget\"></a>ROPgadget</h3><p><code>sudo pacman -S python-capstone</code></p>\n<p><code>sudo pip install ropgadget</code></p>\n<p>If gets errors about capstone:</p>\n<p><code>sudo pip install ropgadget --upgrade</code></p>\n"},{"title":"arch vmtools","date":"2016-03-09T07:31:22.000Z","_content":"\n[http://blog.csdn.net/zhxlianxin/article/details/17636933](http://blog.csdn.net/zhxlianxin/article/details/17636933)\n\n\n\n`pacman -S open-vm-tools open-vm-tools-modules`\n\n`pacman -S gtkmm`\n\n`cat /proc/version > /etc/arch-release`\n\n`systemctl start vmtoolsd`\n\n`systemctl enable vmtoolsd`","source":"_posts/arch-vmtools.md","raw":"---\ntitle: arch vmtools\ndate: 2016-03-09 15:31:22\ncategory: Archlinux\ntags: [Archlinux, vmtools]\n---\n\n[http://blog.csdn.net/zhxlianxin/article/details/17636933](http://blog.csdn.net/zhxlianxin/article/details/17636933)\n\n\n\n`pacman -S open-vm-tools open-vm-tools-modules`\n\n`pacman -S gtkmm`\n\n`cat /proc/version > /etc/arch-release`\n\n`systemctl start vmtoolsd`\n\n`systemctl enable vmtoolsd`","slug":"arch-vmtools","published":1,"updated":"2016-04-05T13:15:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fuc000i3npxbxi0f2hf","content":"<p><a href=\"http://blog.csdn.net/zhxlianxin/article/details/17636933\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/zhxlianxin/article/details/17636933</a></p>\n<p><code>pacman -S open-vm-tools open-vm-tools-modules</code></p>\n<p><code>pacman -S gtkmm</code></p>\n<p><code>cat /proc/version &gt; /etc/arch-release</code></p>\n<p><code>systemctl start vmtoolsd</code></p>\n<p><code>systemctl enable vmtoolsd</code></p>\n","excerpt":"","more":"<p><a href=\"http://blog.csdn.net/zhxlianxin/article/details/17636933\">http://blog.csdn.net/zhxlianxin/article/details/17636933</a></p>\n<p><code>pacman -S open-vm-tools open-vm-tools-modules</code></p>\n<p><code>pacman -S gtkmm</code></p>\n<p><code>cat /proc/version &gt; /etc/arch-release</code></p>\n<p><code>systemctl start vmtoolsd</code></p>\n<p><code>systemctl enable vmtoolsd</code></p>\n"},{"title":"brackets-live-preview-gulp","date":"2016-07-05T10:23:57.000Z","_content":"\n今天学习 Coursera 的 AngularJS 课程时尝试使用`ng-include`添加模板   \n发觉 Brackets 的 Live Preview 在 Chrome 里总是无法正常显示   \n \n[这篇博文](http://blog.csdn.net/aitangyong/article/details/43490117)提到：\n\n>chrome提示很明显：不能跨域访问。通过上面的错误提示，可以看到:使用ng-include指令的时候，会用到AJAX请求XMLHttpRequest。但是我们是直接用浏览器打开的parent.html，并没有通过web容器访问，所以存在跨域访问问题，加载child.html也就失败了。解决办法很简单：将代码部署到tomcat等web容器下，通过http访问即可。\n\n[Coursera Discussions](https://www.coursera.org/learn/angular-js/discussions/weeks/3/threads/rWCY3qGmEeWF6gpqp4BTmQ) 里也有人提到了这个问题，可以有 3 种解决方式\n\n# gulp\n\n之前的课程刚好提到 gulp 可以使用 brower-sync 建立一个 Web 容器来访问项目   \n把`Gulpfile.js`略作修改之后`gulp watch`却仍然无法访问   \n\n在 stackoverflow ([1](http://stackoverflow.com/questions/32171725/chrome-cant-open-localhost3000-with-gulp-browsersync?rq=1), [2](http://stackoverflow.com/questions/30233218/browser-sync-is-blocked-by-chrome-csp)) 找到答案，又是 Chrome 的锅，触发了其`Content-Security-Policy`   \n\n修改端口号即可解决\n\n# Brackets Live Preview\n\n尝试之后发现，我在预览单个 html 时，使用的是`file`协议，在 Chrome 里无法跨域访问   \n而使用 Brackets 打开整个项目时，Live Preview 将项目放入了自建的 Web 容器里，使用的是`http`协议，即可在 Chrome 中正常跨域访问\n\n#  http-server or json-server\n\n使用 node 安装其它小型 Web 容器后放入运行也可解决\n\n大致如此.\n\n","source":"_posts/brackets-live-preview-gulp.md","raw":"---\ntitle: brackets-live-preview-gulp\ndate: 2016-07-05 18:23:57\ncategory: AngularJS\ntags: [Coursera, JavaScript, AngularJS, Brackets, gulp, browser-sync]\n---\n\n今天学习 Coursera 的 AngularJS 课程时尝试使用`ng-include`添加模板   \n发觉 Brackets 的 Live Preview 在 Chrome 里总是无法正常显示   \n \n[这篇博文](http://blog.csdn.net/aitangyong/article/details/43490117)提到：\n\n>chrome提示很明显：不能跨域访问。通过上面的错误提示，可以看到:使用ng-include指令的时候，会用到AJAX请求XMLHttpRequest。但是我们是直接用浏览器打开的parent.html，并没有通过web容器访问，所以存在跨域访问问题，加载child.html也就失败了。解决办法很简单：将代码部署到tomcat等web容器下，通过http访问即可。\n\n[Coursera Discussions](https://www.coursera.org/learn/angular-js/discussions/weeks/3/threads/rWCY3qGmEeWF6gpqp4BTmQ) 里也有人提到了这个问题，可以有 3 种解决方式\n\n# gulp\n\n之前的课程刚好提到 gulp 可以使用 brower-sync 建立一个 Web 容器来访问项目   \n把`Gulpfile.js`略作修改之后`gulp watch`却仍然无法访问   \n\n在 stackoverflow ([1](http://stackoverflow.com/questions/32171725/chrome-cant-open-localhost3000-with-gulp-browsersync?rq=1), [2](http://stackoverflow.com/questions/30233218/browser-sync-is-blocked-by-chrome-csp)) 找到答案，又是 Chrome 的锅，触发了其`Content-Security-Policy`   \n\n修改端口号即可解决\n\n# Brackets Live Preview\n\n尝试之后发现，我在预览单个 html 时，使用的是`file`协议，在 Chrome 里无法跨域访问   \n而使用 Brackets 打开整个项目时，Live Preview 将项目放入了自建的 Web 容器里，使用的是`http`协议，即可在 Chrome 中正常跨域访问\n\n#  http-server or json-server\n\n使用 node 安装其它小型 Web 容器后放入运行也可解决\n\n大致如此.\n\n","slug":"brackets-live-preview-gulp","published":1,"updated":"2016-07-05T10:56:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fud000j3npxt73kxaht","content":"<p>今天学习 Coursera 的 AngularJS 课程时尝试使用<code>ng-include</code>添加模板<br>发觉 Brackets 的 Live Preview 在 Chrome 里总是无法正常显示   </p>\n<p><a href=\"http://blog.csdn.net/aitangyong/article/details/43490117\" target=\"_blank\" rel=\"external\">这篇博文</a>提到：</p>\n<blockquote>\n<p>chrome提示很明显：不能跨域访问。通过上面的错误提示，可以看到:使用ng-include指令的时候，会用到AJAX请求XMLHttpRequest。但是我们是直接用浏览器打开的parent.html，并没有通过web容器访问，所以存在跨域访问问题，加载child.html也就失败了。解决办法很简单：将代码部署到tomcat等web容器下，通过http访问即可。</p>\n</blockquote>\n<p><a href=\"https://www.coursera.org/learn/angular-js/discussions/weeks/3/threads/rWCY3qGmEeWF6gpqp4BTmQ\" target=\"_blank\" rel=\"external\">Coursera Discussions</a> 里也有人提到了这个问题，可以有 3 种解决方式</p>\n<h1 id=\"gulp\"><a href=\"#gulp\" class=\"headerlink\" title=\"gulp\"></a>gulp</h1><p>之前的课程刚好提到 gulp 可以使用 brower-sync 建立一个 Web 容器来访问项目<br>把<code>Gulpfile.js</code>略作修改之后<code>gulp watch</code>却仍然无法访问   </p>\n<p>在 stackoverflow (<a href=\"http://stackoverflow.com/questions/32171725/chrome-cant-open-localhost3000-with-gulp-browsersync?rq=1\" target=\"_blank\" rel=\"external\">1</a>, <a href=\"http://stackoverflow.com/questions/30233218/browser-sync-is-blocked-by-chrome-csp\" target=\"_blank\" rel=\"external\">2</a>) 找到答案，又是 Chrome 的锅，触发了其<code>Content-Security-Policy</code>   </p>\n<p>修改端口号即可解决</p>\n<h1 id=\"Brackets-Live-Preview\"><a href=\"#Brackets-Live-Preview\" class=\"headerlink\" title=\"Brackets Live Preview\"></a>Brackets Live Preview</h1><p>尝试之后发现，我在预览单个 html 时，使用的是<code>file</code>协议，在 Chrome 里无法跨域访问<br>而使用 Brackets 打开整个项目时，Live Preview 将项目放入了自建的 Web 容器里，使用的是<code>http</code>协议，即可在 Chrome 中正常跨域访问</p>\n<h1 id=\"http-server-or-json-server\"><a href=\"#http-server-or-json-server\" class=\"headerlink\" title=\"http-server or json-server\"></a>http-server or json-server</h1><p>使用 node 安装其它小型 Web 容器后放入运行也可解决</p>\n<p>大致如此.</p>\n","excerpt":"","more":"<p>今天学习 Coursera 的 AngularJS 课程时尝试使用<code>ng-include</code>添加模板<br>发觉 Brackets 的 Live Preview 在 Chrome 里总是无法正常显示   </p>\n<p><a href=\"http://blog.csdn.net/aitangyong/article/details/43490117\">这篇博文</a>提到：</p>\n<blockquote>\n<p>chrome提示很明显：不能跨域访问。通过上面的错误提示，可以看到:使用ng-include指令的时候，会用到AJAX请求XMLHttpRequest。但是我们是直接用浏览器打开的parent.html，并没有通过web容器访问，所以存在跨域访问问题，加载child.html也就失败了。解决办法很简单：将代码部署到tomcat等web容器下，通过http访问即可。</p>\n</blockquote>\n<p><a href=\"https://www.coursera.org/learn/angular-js/discussions/weeks/3/threads/rWCY3qGmEeWF6gpqp4BTmQ\">Coursera Discussions</a> 里也有人提到了这个问题，可以有 3 种解决方式</p>\n<h1 id=\"gulp\"><a href=\"#gulp\" class=\"headerlink\" title=\"gulp\"></a>gulp</h1><p>之前的课程刚好提到 gulp 可以使用 brower-sync 建立一个 Web 容器来访问项目<br>把<code>Gulpfile.js</code>略作修改之后<code>gulp watch</code>却仍然无法访问   </p>\n<p>在 stackoverflow (<a href=\"http://stackoverflow.com/questions/32171725/chrome-cant-open-localhost3000-with-gulp-browsersync?rq=1\">1</a>, <a href=\"http://stackoverflow.com/questions/30233218/browser-sync-is-blocked-by-chrome-csp\">2</a>) 找到答案，又是 Chrome 的锅，触发了其<code>Content-Security-Policy</code>   </p>\n<p>修改端口号即可解决</p>\n<h1 id=\"Brackets-Live-Preview\"><a href=\"#Brackets-Live-Preview\" class=\"headerlink\" title=\"Brackets Live Preview\"></a>Brackets Live Preview</h1><p>尝试之后发现，我在预览单个 html 时，使用的是<code>file</code>协议，在 Chrome 里无法跨域访问<br>而使用 Brackets 打开整个项目时，Live Preview 将项目放入了自建的 Web 容器里，使用的是<code>http</code>协议，即可在 Chrome 中正常跨域访问</p>\n<h1 id=\"http-server-or-json-server\"><a href=\"#http-server-or-json-server\" class=\"headerlink\" title=\"http-server or json-server\"></a>http-server or json-server</h1><p>使用 node 安装其它小型 Web 容器后放入运行也可解决</p>\n<p>大致如此.</p>\n"},{"title":"bootstrap-keyboard-tagIndex","date":"2016-06-28T08:16:57.000Z","_content":"\n这两天在 Coursera 上学习 Bootstrap   \n第四周的作业是把非 JavaScript 实现的 Modal 改成用 JavaScript 实现（https://www.coursera.org/learn/web-frameworks/peer/jAXUU/assignment-4-detailed-instructions-and-submission）   \n\n按照 http://getbootstrap.com/javascript/#modals-methods 找到了解决方案：\n\n```js\n    <script>\n        $('#reserveButton').on('click', function () {\n            $('#reserveModal').modal('toggle');\n        });\n    </script>\n```\n\n作业是解决了，但是发现一个小问题：不管我怎么改`keyboard`属性，都不能用`esc`关闭`modal`\n\n搜了一下得知：在`modal`所在`div`中加入`tabindex=\"-1\"`属性即可   \n那么问题又来了...这个`tabindex=\"-1\"`是什么鬼...   \n\n搜索加测试了一下之后终于搞清楚了   \n`tabindex`用来帮助键盘党使用`tab`键定位网页元素，按其值由小到大跳转，默认是 0    \n如果值相等，则按先后顺序跳转\n  \n在未加入`tabindex=\"-1\"`时，`modal`和主页中所有元素值都是 0   \n当前键盘的焦点仍然在主页而非`modal`上，相当于在主页按`esc`，`modal`监听不到所以无任何反应   \n加入`tabindex=\"-1\"`后，`modal`的优先级最高，键盘焦点到了`modal`上，这时再按`esc`就能正确触发关闭`modal`事件了\n\n# 参考\n\n- http://blog.163.com/huan12_8/blog/static/1305190902011274739628/\n- https://segmentfault.com/q/1010000004954562\n- http://www.w3school.com.cn/tags/att_standard_tabindex.asp\n- http://www.mamicode.com/info-detail-494399.html","source":"_posts/bootstrap-keyboard-tagIndex.md","raw":"---\ntitle: bootstrap-keyboard-tagIndex\ndate: 2016-06-28 16:16:57\ncategory: JavaScript\ntags:\t[Coursera, JavaScript, bootstrap, keyboard, tagIndex]\n---\n\n这两天在 Coursera 上学习 Bootstrap   \n第四周的作业是把非 JavaScript 实现的 Modal 改成用 JavaScript 实现（https://www.coursera.org/learn/web-frameworks/peer/jAXUU/assignment-4-detailed-instructions-and-submission）   \n\n按照 http://getbootstrap.com/javascript/#modals-methods 找到了解决方案：\n\n```js\n    <script>\n        $('#reserveButton').on('click', function () {\n            $('#reserveModal').modal('toggle');\n        });\n    </script>\n```\n\n作业是解决了，但是发现一个小问题：不管我怎么改`keyboard`属性，都不能用`esc`关闭`modal`\n\n搜了一下得知：在`modal`所在`div`中加入`tabindex=\"-1\"`属性即可   \n那么问题又来了...这个`tabindex=\"-1\"`是什么鬼...   \n\n搜索加测试了一下之后终于搞清楚了   \n`tabindex`用来帮助键盘党使用`tab`键定位网页元素，按其值由小到大跳转，默认是 0    \n如果值相等，则按先后顺序跳转\n  \n在未加入`tabindex=\"-1\"`时，`modal`和主页中所有元素值都是 0   \n当前键盘的焦点仍然在主页而非`modal`上，相当于在主页按`esc`，`modal`监听不到所以无任何反应   \n加入`tabindex=\"-1\"`后，`modal`的优先级最高，键盘焦点到了`modal`上，这时再按`esc`就能正确触发关闭`modal`事件了\n\n# 参考\n\n- http://blog.163.com/huan12_8/blog/static/1305190902011274739628/\n- https://segmentfault.com/q/1010000004954562\n- http://www.w3school.com.cn/tags/att_standard_tabindex.asp\n- http://www.mamicode.com/info-detail-494399.html","slug":"bootstrap-keyboard-tagIndex","published":1,"updated":"2016-07-05T10:56:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fug000k3npxd3qw02yy","content":"<p>这两天在 Coursera 上学习 Bootstrap<br>第四周的作业是把非 JavaScript 实现的 Modal 改成用 JavaScript 实现（<a href=\"https://www.coursera.org/learn/web-frameworks/peer/jAXUU/assignment-4-detailed-instructions-and-submission）\" target=\"_blank\" rel=\"external\">https://www.coursera.org/learn/web-frameworks/peer/jAXUU/assignment-4-detailed-instructions-and-submission）</a>   </p>\n<p>按照 <a href=\"http://getbootstrap.com/javascript/#modals-methods\" target=\"_blank\" rel=\"external\">http://getbootstrap.com/javascript/#modals-methods</a> 找到了解决方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    $(<span class=\"string\">'#reserveButton'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"string\">'#reserveModal'</span>).modal(<span class=\"string\">'toggle'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>作业是解决了，但是发现一个小问题：不管我怎么改<code>keyboard</code>属性，都不能用<code>esc</code>关闭<code>modal</code></p>\n<p>搜了一下得知：在<code>modal</code>所在<code>div</code>中加入<code>tabindex=&quot;-1&quot;</code>属性即可<br>那么问题又来了…这个<code>tabindex=&quot;-1&quot;</code>是什么鬼…   </p>\n<p>搜索加测试了一下之后终于搞清楚了<br><code>tabindex</code>用来帮助键盘党使用<code>tab</code>键定位网页元素，按其值由小到大跳转，默认是 0<br>如果值相等，则按先后顺序跳转</p>\n<p>在未加入<code>tabindex=&quot;-1&quot;</code>时，<code>modal</code>和主页中所有元素值都是 0<br>当前键盘的焦点仍然在主页而非<code>modal</code>上，相当于在主页按<code>esc</code>，<code>modal</code>监听不到所以无任何反应<br>加入<code>tabindex=&quot;-1&quot;</code>后，<code>modal</code>的优先级最高，键盘焦点到了<code>modal</code>上，这时再按<code>esc</code>就能正确触发关闭<code>modal</code>事件了</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://blog.163.com/huan12_8/blog/static/1305190902011274739628/\" target=\"_blank\" rel=\"external\">http://blog.163.com/huan12_8/blog/static/1305190902011274739628/</a></li>\n<li><a href=\"https://segmentfault.com/q/1010000004954562\" target=\"_blank\" rel=\"external\">https://segmentfault.com/q/1010000004954562</a></li>\n<li><a href=\"http://www.w3school.com.cn/tags/att_standard_tabindex.asp\" target=\"_blank\" rel=\"external\">http://www.w3school.com.cn/tags/att_standard_tabindex.asp</a></li>\n<li><a href=\"http://www.mamicode.com/info-detail-494399.html\" target=\"_blank\" rel=\"external\">http://www.mamicode.com/info-detail-494399.html</a></li>\n</ul>\n","excerpt":"","more":"<p>这两天在 Coursera 上学习 Bootstrap<br>第四周的作业是把非 JavaScript 实现的 Modal 改成用 JavaScript 实现（<a href=\"https://www.coursera.org/learn/web-frameworks/peer/jAXUU/assignment-4-detailed-instructions-and-submission）\">https://www.coursera.org/learn/web-frameworks/peer/jAXUU/assignment-4-detailed-instructions-and-submission）</a>   </p>\n<p>按照 <a href=\"http://getbootstrap.com/javascript/#modals-methods\">http://getbootstrap.com/javascript/#modals-methods</a> 找到了解决方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    $(<span class=\"string\">'#reserveButton'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"string\">'#reserveModal'</span>).modal(<span class=\"string\">'toggle'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>作业是解决了，但是发现一个小问题：不管我怎么改<code>keyboard</code>属性，都不能用<code>esc</code>关闭<code>modal</code></p>\n<p>搜了一下得知：在<code>modal</code>所在<code>div</code>中加入<code>tabindex=&quot;-1&quot;</code>属性即可<br>那么问题又来了…这个<code>tabindex=&quot;-1&quot;</code>是什么鬼…   </p>\n<p>搜索加测试了一下之后终于搞清楚了<br><code>tabindex</code>用来帮助键盘党使用<code>tab</code>键定位网页元素，按其值由小到大跳转，默认是 0<br>如果值相等，则按先后顺序跳转</p>\n<p>在未加入<code>tabindex=&quot;-1&quot;</code>时，<code>modal</code>和主页中所有元素值都是 0<br>当前键盘的焦点仍然在主页而非<code>modal</code>上，相当于在主页按<code>esc</code>，<code>modal</code>监听不到所以无任何反应<br>加入<code>tabindex=&quot;-1&quot;</code>后，<code>modal</code>的优先级最高，键盘焦点到了<code>modal</code>上，这时再按<code>esc</code>就能正确触发关闭<code>modal</code>事件了</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://blog.163.com/huan12_8/blog/static/1305190902011274739628/\">http://blog.163.com/huan12_8/blog/static/1305190902011274739628/</a></li>\n<li><a href=\"https://segmentfault.com/q/1010000004954562\">https://segmentfault.com/q/1010000004954562</a></li>\n<li><a href=\"http://www.w3school.com.cn/tags/att_standard_tabindex.asp\">http://www.w3school.com.cn/tags/att_standard_tabindex.asp</a></li>\n<li><a href=\"http://www.mamicode.com/info-detail-494399.html\">http://www.mamicode.com/info-detail-494399.html</a></li>\n</ul>\n"},{"title":"ropgadget capstone","date":"2016-03-10T07:41:52.000Z","_content":"\n# import error\n[capstone](https://github.com/aquynh/capstone)是一个著名的反汇编框架   \n[ropgadget](https://github.com/JonathanSalwan/ROPgadget)会用到\n\n但是每次`pip install ropgadget`之后都会报错\n`import error:ERROR: fail to load the dynamic library.`\n\n> 2016.5.10 补充：ropgadget 里的依赖的 capstone 版本为2.1，而目前最新版本为3.0.4，pip更新 ropgadget 后会降级。。。需`pip install -U capstone`\n\n原因在于所需的动态库文件libcapstone.dylib没有位于capstone主目录   \n所以找到libcapstone.dylib并拷贝一个就可以了\n\n有两种方法\n## sudo find / -name 'libcapstone.*'\n原来作者把动态库写在了这么一个奇葩的地址\n`/usr/local/lib/python2.7/site-packages/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/capstone/libcapstone.dylib`\n大概是写掉了一个`/`吧，参考 https://github.com/aquynh/capstone/pull/406\n\n## pip uninstall capstone\n这个方法略显鸡贼，但更快一点      \n可以发现列出了所有与capstone相关的文件   \n其中最后一个就是要找的libcapstone.dylib\n\n\n# then\n```\n$ cp /usr/local/lib/python2.7/site-packages/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/capstone/libcapstone.dylib /usr/local/lib/python2.7/site-packages/capstone/libcapstone.dylib\n$ ropgadget\nNeed a binary filename (--binary/--console or --help)\n\n```\n\n已经可以正常使用了\n\n\n\n# 补充\n在kali rolling里试了一下   \n第二种方法行不通   \n只能用find   \n可以找到一个`/usr/lib/libcapstone.so.3`   \n然后\n`cp /usr/lib/libcapstone.so.3 /usr/local/lib/python2.7/dist-packages/capstone/libcapstone.dylib`\n解决\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/capstone.md","raw":"---\ntitle: ropgadget capstone \ndate: 2016-03-10 15:41:52\ntags: [python, ropgadget, capstone]\ncategory: rop\n---\n\n# import error\n[capstone](https://github.com/aquynh/capstone)是一个著名的反汇编框架   \n[ropgadget](https://github.com/JonathanSalwan/ROPgadget)会用到\n\n但是每次`pip install ropgadget`之后都会报错\n`import error:ERROR: fail to load the dynamic library.`\n\n> 2016.5.10 补充：ropgadget 里的依赖的 capstone 版本为2.1，而目前最新版本为3.0.4，pip更新 ropgadget 后会降级。。。需`pip install -U capstone`\n\n原因在于所需的动态库文件libcapstone.dylib没有位于capstone主目录   \n所以找到libcapstone.dylib并拷贝一个就可以了\n\n有两种方法\n## sudo find / -name 'libcapstone.*'\n原来作者把动态库写在了这么一个奇葩的地址\n`/usr/local/lib/python2.7/site-packages/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/capstone/libcapstone.dylib`\n大概是写掉了一个`/`吧，参考 https://github.com/aquynh/capstone/pull/406\n\n## pip uninstall capstone\n这个方法略显鸡贼，但更快一点      \n可以发现列出了所有与capstone相关的文件   \n其中最后一个就是要找的libcapstone.dylib\n\n\n# then\n```\n$ cp /usr/local/lib/python2.7/site-packages/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/capstone/libcapstone.dylib /usr/local/lib/python2.7/site-packages/capstone/libcapstone.dylib\n$ ropgadget\nNeed a binary filename (--binary/--console or --help)\n\n```\n\n已经可以正常使用了\n\n\n\n# 补充\n在kali rolling里试了一下   \n第二种方法行不通   \n只能用find   \n可以找到一个`/usr/lib/libcapstone.so.3`   \n然后\n`cp /usr/lib/libcapstone.so.3 /usr/local/lib/python2.7/dist-packages/capstone/libcapstone.dylib`\n解决\n\n\n\n\n\n\n\n\n\n\n","slug":"capstone","published":1,"updated":"2017-05-29T13:10:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fun000l3npxdngjo0jm","content":"<h1 id=\"import-error\"><a href=\"#import-error\" class=\"headerlink\" title=\"import error\"></a>import error</h1><p><a href=\"https://github.com/aquynh/capstone\" target=\"_blank\" rel=\"external\">capstone</a>是一个著名的反汇编框架<br><a href=\"https://github.com/JonathanSalwan/ROPgadget\" target=\"_blank\" rel=\"external\">ropgadget</a>会用到</p>\n<p>但是每次<code>pip install ropgadget</code>之后都会报错<br><code>import error:ERROR: fail to load the dynamic library.</code></p>\n<blockquote>\n<p>2016.5.10 补充：ropgadget 里的依赖的 capstone 版本为2.1，而目前最新版本为3.0.4，pip更新 ropgadget 后会降级。。。需<code>pip install -U capstone</code></p>\n</blockquote>\n<p>原因在于所需的动态库文件libcapstone.dylib没有位于capstone主目录<br>所以找到libcapstone.dylib并拷贝一个就可以了</p>\n<p>有两种方法</p>\n<h2 id=\"sudo-find-name-‘libcapstone-’\"><a href=\"#sudo-find-name-‘libcapstone-’\" class=\"headerlink\" title=\"sudo find / -name ‘libcapstone.*’\"></a>sudo find / -name ‘libcapstone.*’</h2><p>原来作者把动态库写在了这么一个奇葩的地址<br><code>/usr/local/lib/python2.7/site-packages/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/capstone/libcapstone.dylib</code><br>大概是写掉了一个<code>/</code>吧，参考 <a href=\"https://github.com/aquynh/capstone/pull/406\" target=\"_blank\" rel=\"external\">https://github.com/aquynh/capstone/pull/406</a></p>\n<h2 id=\"pip-uninstall-capstone\"><a href=\"#pip-uninstall-capstone\" class=\"headerlink\" title=\"pip uninstall capstone\"></a>pip uninstall capstone</h2><p>这个方法略显鸡贼，但更快一点<br>可以发现列出了所有与capstone相关的文件<br>其中最后一个就是要找的libcapstone.dylib</p>\n<h1 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then\"></a>then</h1><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cp <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/lib/</span>python2.<span class=\"number\">7</span><span class=\"regexp\">/site-packages/u</span>sr<span class=\"regexp\">/local/</span>Cellar<span class=\"regexp\">/python/</span><span class=\"number\">2.7</span>.<span class=\"number\">11</span><span class=\"regexp\">/Frameworks/</span>Python.framework<span class=\"regexp\">/Versions/</span><span class=\"number\">2.7</span><span class=\"regexp\">/lib/</span>python2.<span class=\"number\">7</span><span class=\"regexp\">/site-packages/</span>capstone<span class=\"regexp\">/libcapstone.dylib /u</span>sr<span class=\"regexp\">/local/</span>lib<span class=\"regexp\">/python2.7/</span>site-packages<span class=\"regexp\">/capstone/</span>libcapstone.dylib</div><div class=\"line\">$ ropgadget</div><div class=\"line\">Need a binary filename (--binary<span class=\"regexp\">/--console or --help)</span></div></pre></td></tr></table></figure>\n<p>已经可以正常使用了</p>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>在kali rolling里试了一下<br>第二种方法行不通<br>只能用find<br>可以找到一个<code>/usr/lib/libcapstone.so.3</code><br>然后<br><code>cp /usr/lib/libcapstone.so.3 /usr/local/lib/python2.7/dist-packages/capstone/libcapstone.dylib</code><br>解决</p>\n","excerpt":"","more":"<h1 id=\"import-error\"><a href=\"#import-error\" class=\"headerlink\" title=\"import error\"></a>import error</h1><p><a href=\"https://github.com/aquynh/capstone\">capstone</a>是一个著名的反汇编框架<br><a href=\"https://github.com/JonathanSalwan/ROPgadget\">ropgadget</a>会用到</p>\n<p>但是每次<code>pip install ropgadget</code>之后都会报错<br><code>import error:ERROR: fail to load the dynamic library.</code></p>\n<blockquote>\n<p>2016.5.10 补充：ropgadget 里的依赖的 capstone 版本为2.1，而目前最新版本为3.0.4，pip更新 ropgadget 后会降级。。。需<code>pip install -U capstone</code></p>\n</blockquote>\n<p>原因在于所需的动态库文件libcapstone.dylib没有位于capstone主目录<br>所以找到libcapstone.dylib并拷贝一个就可以了</p>\n<p>有两种方法</p>\n<h2 id=\"sudo-find-name-‘libcapstone-’\"><a href=\"#sudo-find-name-‘libcapstone-’\" class=\"headerlink\" title=\"sudo find / -name ‘libcapstone.*’\"></a>sudo find / -name ‘libcapstone.*’</h2><p>原来作者把动态库写在了这么一个奇葩的地址<br><code>/usr/local/lib/python2.7/site-packages/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/capstone/libcapstone.dylib</code><br>大概是写掉了一个<code>/</code>吧，参考 <a href=\"https://github.com/aquynh/capstone/pull/406\">https://github.com/aquynh/capstone/pull/406</a></p>\n<h2 id=\"pip-uninstall-capstone\"><a href=\"#pip-uninstall-capstone\" class=\"headerlink\" title=\"pip uninstall capstone\"></a>pip uninstall capstone</h2><p>这个方法略显鸡贼，但更快一点<br>可以发现列出了所有与capstone相关的文件<br>其中最后一个就是要找的libcapstone.dylib</p>\n<h1 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then\"></a>then</h1><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cp <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/lib/</span>python2.<span class=\"number\">7</span><span class=\"regexp\">/site-packages/u</span>sr<span class=\"regexp\">/local/</span>Cellar<span class=\"regexp\">/python/</span><span class=\"number\">2.7</span>.<span class=\"number\">11</span><span class=\"regexp\">/Frameworks/</span>Python.framework<span class=\"regexp\">/Versions/</span><span class=\"number\">2.7</span><span class=\"regexp\">/lib/</span>python2.<span class=\"number\">7</span><span class=\"regexp\">/site-packages/</span>capstone<span class=\"regexp\">/libcapstone.dylib /u</span>sr<span class=\"regexp\">/local/</span>lib<span class=\"regexp\">/python2.7/</span>site-packages<span class=\"regexp\">/capstone/</span>libcapstone.dylib</div><div class=\"line\">$ ropgadget</div><div class=\"line\">Need a binary filename (--binary<span class=\"regexp\">/--console or --help)</span></div></pre></td></tr></table></figure>\n<p>已经可以正常使用了</p>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>在kali rolling里试了一下<br>第二种方法行不通<br>只能用find<br>可以找到一个<code>/usr/lib/libcapstone.so.3</code><br>然后<br><code>cp /usr/lib/libcapstone.so.3 /usr/local/lib/python2.7/dist-packages/capstone/libcapstone.dylib</code><br>解决</p>\n"},{"title":"Code Smell","date":"2016-09-25T08:44:03.000Z","_content":"转自：http://www.nowamagic.net/librarys/veda/detail/2053\n\nCode Smell中文译名一般为“代码异味”，或“代码味道”，它是提示代码中某个地方存在错误的一个暗示，开发人员可以通过这种smell（异味）在代码中追捕到问题。\n\n在计算机编程社区中，code smell代表了任何标志着事物变坏的征兆。它常常标志代码应该被refactored或者全部的设计都应该被reviewed。这个短语出现在 WardsWiki上，它是被Kent Beck杜撰出来的。在refactoring兴起之后，这个短语的使用率骤增。\n\n判断是否存在code smell经常是主观判断，并且随着语言、开发者、开发理论的不同而存在差异。\n\n经验丰富和知识渊博的开发人员通过对优秀设计有一种“感觉”，他们已经达到一种称之为“无意识能力 （UnconsciousCompetence）”的状态。也就是说，他们无需思考，只要通过查看代码或一段设计就可以立马对这个项目的代码质量有一种 “感觉”，能够对代码设计的优劣有一个大致的判断。\n\n但大家需要注意，code smell只是一种“暗示”，而非一种“确定”。将某些事物称之为“code smell”并未是一种攻击，它只是一种提示：开发人员需要对项目设计进行更进一步的查看。因此，code smell更多是“直觉的，本能的”。\n\ncode smell一般包括：\n\n1. Duplicated Code。代码重复几乎是最常见的异味了。他也是Refactoring 的主要目标之一。代码重复往往来自于copy-and-paste 的编程风格。与他相对应OAOO 是一个好系统的重要标志。\n\n2. Long method。它是传统结构化的“遗毒”。一个方法应当具有自我独立的意图，不要把几个意图放在一起，特别注意大类和长方法。\n\n3. Large Class。大类就是你把太多的责任交给了一个类。这里的规则是One Class One。\n\n4. Divergent Change。一个类里面的内容变化率不同。某些状态一个小时变一次，某些则几个月一年才变一次；某些状态因为这方面的原因发生变化，而另一些则因为其他方面的原因变一 次。面向对象的抽象就是把相对不变的和相对变化相隔离。把问题变化的一方面和另一方面相隔离。这使得这些相对不变的可以重用。问题变化的每个方面都可以单 独重用。这种相异变化的共存使得重用非常困难。\n\n5. Shotgun Surgery。这正好和上面相反。对系统一个地方的改变涉及到其他许多地方的相关改变。这些变化率和变化内容相似的状态和行为通常应当放在同一个类中。\n\n6. Feature Envy。对象的目的就是封装状态以及与这些状态紧密相关的行为。如果一个类的方法频繁用get 方法存取其他类的状态进行计算，那么你要考虑把行为移到涉及状态数目最多的那个类。\n\n7. Data Clumps。某些数据通常像孩子一样成群玩耍：一起出现在很多类的成员变量中，一起出现在许多方法的参数中……，这些数据或许应该自己独立形成对象。\n\n8. Primitive Obsession。面向对象的新手通常习惯使用几个原始类型的数据来表示一个概念。譬如对于范围，他们会使用两个数字。对于Money，他们会用一个浮点数来表示。因为你没 有使用对象来表达问题中存在的概念，这使得代码变的难以理解，解决问题的难度大大增加。好的习惯是扩充语言所能提供原始类型，用小对象来表示范围、金额、 转化率、邮政编码等等。\n\n9. Switch Statement。基于常量的开关语句是OO 的大敌，你应当把他变为子类、state 或strategy。\n\n9. Parallel Inheritance Hierarchies。并行的继承层次是shotgun surgery 的特殊情况。因为当你改变一个层次中的某一个类时，你必须同时改变另外一个层次的并行子类。\n\n10. Lazy Class。一个干活不多的类。类的维护需要额外的开销，如果一个类承担了太少的责任，应当消除它。\n\n11. Speculative Generality。一个类实现了从未用到的功能和通用性。通常这样的类或方法唯一的用户是test case。不要犹豫，删除它。\n\n12. Temporary Field。一个对象的属性可能只在某些情况下才有意义。这样的代码将难以理解。专门建立一个对象来持有这样的孤儿属性，把只和他相关的行为移到该类。最常见的是一个特定的算法需要某些只有该算法才有用的变量。\n\n13. Message Chain。消息链发生于当一个客户向一个对象要求另一个对象，然后客户又向这另一对象要求另一个对象，再向这另一个对象要求另一个对象，如此如此。这时，你需要隐藏分派。\n\n14. Middle Man。对象的基本特性之一就是封装，而你经常会通过分派去实现封装。但是这一步不能走得太远，如果你发现一个类接口的一大半方法都在做分派，你可能需要移去这个中间人。\n\n15. Inappropriate Intimacy。某些类相互之间太亲密，它们花费了太多的时间去砖研别人的私有部分。对人类而言，我们也许不应该太假正经，但我们应当让自己的类严格遵守禁欲主义。\n\n16. Alternative Classes with Different Interfaces。做相同事情的方法有不同的函数signature，一致把它们往类层次上移，直至协议一致。\n\n17. Incomplete Library Class。要建立一个好的类库非常困难。我们大量的程序工作都基于类库实现。然而，如此广泛而又相异的目标对库构建者提出了苛刻的要求。库构建者也不是万能的。有时 候我们会发现库类无法实现我们需要的功能。而直接对库类的修改有非常困难。这时候就需要用各种手段进行Refactoring。\n\n18. Data Class。对象包括状态和行为。如果一个类只有状态没有行为，那么肯定有什么地方出问题了。\n\n19. Refused Bequest。超类传下来很多行为和状态，而子类只是用了其中的很小一部分。这通常意味着你的类层次有问题。\n\n20. Comments。经常觉得要写很多注释表示你的代码难以理解。如果这种感觉太多，表示你需要Refactoring。","source":"_posts/code-smell.md","raw":"---\ntitle: Code Smell\ndate: 2016-09-25 16:44:03\ntags: [Refactoring]\n---\n转自：http://www.nowamagic.net/librarys/veda/detail/2053\n\nCode Smell中文译名一般为“代码异味”，或“代码味道”，它是提示代码中某个地方存在错误的一个暗示，开发人员可以通过这种smell（异味）在代码中追捕到问题。\n\n在计算机编程社区中，code smell代表了任何标志着事物变坏的征兆。它常常标志代码应该被refactored或者全部的设计都应该被reviewed。这个短语出现在 WardsWiki上，它是被Kent Beck杜撰出来的。在refactoring兴起之后，这个短语的使用率骤增。\n\n判断是否存在code smell经常是主观判断，并且随着语言、开发者、开发理论的不同而存在差异。\n\n经验丰富和知识渊博的开发人员通过对优秀设计有一种“感觉”，他们已经达到一种称之为“无意识能力 （UnconsciousCompetence）”的状态。也就是说，他们无需思考，只要通过查看代码或一段设计就可以立马对这个项目的代码质量有一种 “感觉”，能够对代码设计的优劣有一个大致的判断。\n\n但大家需要注意，code smell只是一种“暗示”，而非一种“确定”。将某些事物称之为“code smell”并未是一种攻击，它只是一种提示：开发人员需要对项目设计进行更进一步的查看。因此，code smell更多是“直觉的，本能的”。\n\ncode smell一般包括：\n\n1. Duplicated Code。代码重复几乎是最常见的异味了。他也是Refactoring 的主要目标之一。代码重复往往来自于copy-and-paste 的编程风格。与他相对应OAOO 是一个好系统的重要标志。\n\n2. Long method。它是传统结构化的“遗毒”。一个方法应当具有自我独立的意图，不要把几个意图放在一起，特别注意大类和长方法。\n\n3. Large Class。大类就是你把太多的责任交给了一个类。这里的规则是One Class One。\n\n4. Divergent Change。一个类里面的内容变化率不同。某些状态一个小时变一次，某些则几个月一年才变一次；某些状态因为这方面的原因发生变化，而另一些则因为其他方面的原因变一 次。面向对象的抽象就是把相对不变的和相对变化相隔离。把问题变化的一方面和另一方面相隔离。这使得这些相对不变的可以重用。问题变化的每个方面都可以单 独重用。这种相异变化的共存使得重用非常困难。\n\n5. Shotgun Surgery。这正好和上面相反。对系统一个地方的改变涉及到其他许多地方的相关改变。这些变化率和变化内容相似的状态和行为通常应当放在同一个类中。\n\n6. Feature Envy。对象的目的就是封装状态以及与这些状态紧密相关的行为。如果一个类的方法频繁用get 方法存取其他类的状态进行计算，那么你要考虑把行为移到涉及状态数目最多的那个类。\n\n7. Data Clumps。某些数据通常像孩子一样成群玩耍：一起出现在很多类的成员变量中，一起出现在许多方法的参数中……，这些数据或许应该自己独立形成对象。\n\n8. Primitive Obsession。面向对象的新手通常习惯使用几个原始类型的数据来表示一个概念。譬如对于范围，他们会使用两个数字。对于Money，他们会用一个浮点数来表示。因为你没 有使用对象来表达问题中存在的概念，这使得代码变的难以理解，解决问题的难度大大增加。好的习惯是扩充语言所能提供原始类型，用小对象来表示范围、金额、 转化率、邮政编码等等。\n\n9. Switch Statement。基于常量的开关语句是OO 的大敌，你应当把他变为子类、state 或strategy。\n\n9. Parallel Inheritance Hierarchies。并行的继承层次是shotgun surgery 的特殊情况。因为当你改变一个层次中的某一个类时，你必须同时改变另外一个层次的并行子类。\n\n10. Lazy Class。一个干活不多的类。类的维护需要额外的开销，如果一个类承担了太少的责任，应当消除它。\n\n11. Speculative Generality。一个类实现了从未用到的功能和通用性。通常这样的类或方法唯一的用户是test case。不要犹豫，删除它。\n\n12. Temporary Field。一个对象的属性可能只在某些情况下才有意义。这样的代码将难以理解。专门建立一个对象来持有这样的孤儿属性，把只和他相关的行为移到该类。最常见的是一个特定的算法需要某些只有该算法才有用的变量。\n\n13. Message Chain。消息链发生于当一个客户向一个对象要求另一个对象，然后客户又向这另一对象要求另一个对象，再向这另一个对象要求另一个对象，如此如此。这时，你需要隐藏分派。\n\n14. Middle Man。对象的基本特性之一就是封装，而你经常会通过分派去实现封装。但是这一步不能走得太远，如果你发现一个类接口的一大半方法都在做分派，你可能需要移去这个中间人。\n\n15. Inappropriate Intimacy。某些类相互之间太亲密，它们花费了太多的时间去砖研别人的私有部分。对人类而言，我们也许不应该太假正经，但我们应当让自己的类严格遵守禁欲主义。\n\n16. Alternative Classes with Different Interfaces。做相同事情的方法有不同的函数signature，一致把它们往类层次上移，直至协议一致。\n\n17. Incomplete Library Class。要建立一个好的类库非常困难。我们大量的程序工作都基于类库实现。然而，如此广泛而又相异的目标对库构建者提出了苛刻的要求。库构建者也不是万能的。有时 候我们会发现库类无法实现我们需要的功能。而直接对库类的修改有非常困难。这时候就需要用各种手段进行Refactoring。\n\n18. Data Class。对象包括状态和行为。如果一个类只有状态没有行为，那么肯定有什么地方出问题了。\n\n19. Refused Bequest。超类传下来很多行为和状态，而子类只是用了其中的很小一部分。这通常意味着你的类层次有问题。\n\n20. Comments。经常觉得要写很多注释表示你的代码难以理解。如果这种感觉太多，表示你需要Refactoring。","slug":"code-smell","published":1,"updated":"2017-06-01T15:28:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fup000m3npx9xm4kz4u","content":"<p>转自：<a href=\"http://www.nowamagic.net/librarys/veda/detail/2053\" target=\"_blank\" rel=\"external\">http://www.nowamagic.net/librarys/veda/detail/2053</a></p>\n<p>Code Smell中文译名一般为“代码异味”，或“代码味道”，它是提示代码中某个地方存在错误的一个暗示，开发人员可以通过这种smell（异味）在代码中追捕到问题。</p>\n<p>在计算机编程社区中，code smell代表了任何标志着事物变坏的征兆。它常常标志代码应该被refactored或者全部的设计都应该被reviewed。这个短语出现在 WardsWiki上，它是被Kent Beck杜撰出来的。在refactoring兴起之后，这个短语的使用率骤增。</p>\n<p>判断是否存在code smell经常是主观判断，并且随着语言、开发者、开发理论的不同而存在差异。</p>\n<p>经验丰富和知识渊博的开发人员通过对优秀设计有一种“感觉”，他们已经达到一种称之为“无意识能力 （UnconsciousCompetence）”的状态。也就是说，他们无需思考，只要通过查看代码或一段设计就可以立马对这个项目的代码质量有一种 “感觉”，能够对代码设计的优劣有一个大致的判断。</p>\n<p>但大家需要注意，code smell只是一种“暗示”，而非一种“确定”。将某些事物称之为“code smell”并未是一种攻击，它只是一种提示：开发人员需要对项目设计进行更进一步的查看。因此，code smell更多是“直觉的，本能的”。</p>\n<p>code smell一般包括：</p>\n<ol>\n<li><p>Duplicated Code。代码重复几乎是最常见的异味了。他也是Refactoring 的主要目标之一。代码重复往往来自于copy-and-paste 的编程风格。与他相对应OAOO 是一个好系统的重要标志。</p>\n</li>\n<li><p>Long method。它是传统结构化的“遗毒”。一个方法应当具有自我独立的意图，不要把几个意图放在一起，特别注意大类和长方法。</p>\n</li>\n<li><p>Large Class。大类就是你把太多的责任交给了一个类。这里的规则是One Class One。</p>\n</li>\n<li><p>Divergent Change。一个类里面的内容变化率不同。某些状态一个小时变一次，某些则几个月一年才变一次；某些状态因为这方面的原因发生变化，而另一些则因为其他方面的原因变一 次。面向对象的抽象就是把相对不变的和相对变化相隔离。把问题变化的一方面和另一方面相隔离。这使得这些相对不变的可以重用。问题变化的每个方面都可以单 独重用。这种相异变化的共存使得重用非常困难。</p>\n</li>\n<li><p>Shotgun Surgery。这正好和上面相反。对系统一个地方的改变涉及到其他许多地方的相关改变。这些变化率和变化内容相似的状态和行为通常应当放在同一个类中。</p>\n</li>\n<li><p>Feature Envy。对象的目的就是封装状态以及与这些状态紧密相关的行为。如果一个类的方法频繁用get 方法存取其他类的状态进行计算，那么你要考虑把行为移到涉及状态数目最多的那个类。</p>\n</li>\n<li><p>Data Clumps。某些数据通常像孩子一样成群玩耍：一起出现在很多类的成员变量中，一起出现在许多方法的参数中……，这些数据或许应该自己独立形成对象。</p>\n</li>\n<li><p>Primitive Obsession。面向对象的新手通常习惯使用几个原始类型的数据来表示一个概念。譬如对于范围，他们会使用两个数字。对于Money，他们会用一个浮点数来表示。因为你没 有使用对象来表达问题中存在的概念，这使得代码变的难以理解，解决问题的难度大大增加。好的习惯是扩充语言所能提供原始类型，用小对象来表示范围、金额、 转化率、邮政编码等等。</p>\n</li>\n<li><p>Switch Statement。基于常量的开关语句是OO 的大敌，你应当把他变为子类、state 或strategy。</p>\n</li>\n<li><p>Parallel Inheritance Hierarchies。并行的继承层次是shotgun surgery 的特殊情况。因为当你改变一个层次中的某一个类时，你必须同时改变另外一个层次的并行子类。</p>\n</li>\n<li><p>Lazy Class。一个干活不多的类。类的维护需要额外的开销，如果一个类承担了太少的责任，应当消除它。</p>\n</li>\n<li><p>Speculative Generality。一个类实现了从未用到的功能和通用性。通常这样的类或方法唯一的用户是test case。不要犹豫，删除它。</p>\n</li>\n<li><p>Temporary Field。一个对象的属性可能只在某些情况下才有意义。这样的代码将难以理解。专门建立一个对象来持有这样的孤儿属性，把只和他相关的行为移到该类。最常见的是一个特定的算法需要某些只有该算法才有用的变量。</p>\n</li>\n<li><p>Message Chain。消息链发生于当一个客户向一个对象要求另一个对象，然后客户又向这另一对象要求另一个对象，再向这另一个对象要求另一个对象，如此如此。这时，你需要隐藏分派。</p>\n</li>\n<li><p>Middle Man。对象的基本特性之一就是封装，而你经常会通过分派去实现封装。但是这一步不能走得太远，如果你发现一个类接口的一大半方法都在做分派，你可能需要移去这个中间人。</p>\n</li>\n<li><p>Inappropriate Intimacy。某些类相互之间太亲密，它们花费了太多的时间去砖研别人的私有部分。对人类而言，我们也许不应该太假正经，但我们应当让自己的类严格遵守禁欲主义。</p>\n</li>\n<li><p>Alternative Classes with Different Interfaces。做相同事情的方法有不同的函数signature，一致把它们往类层次上移，直至协议一致。</p>\n</li>\n<li><p>Incomplete Library Class。要建立一个好的类库非常困难。我们大量的程序工作都基于类库实现。然而，如此广泛而又相异的目标对库构建者提出了苛刻的要求。库构建者也不是万能的。有时 候我们会发现库类无法实现我们需要的功能。而直接对库类的修改有非常困难。这时候就需要用各种手段进行Refactoring。</p>\n</li>\n<li><p>Data Class。对象包括状态和行为。如果一个类只有状态没有行为，那么肯定有什么地方出问题了。</p>\n</li>\n<li><p>Refused Bequest。超类传下来很多行为和状态，而子类只是用了其中的很小一部分。这通常意味着你的类层次有问题。</p>\n</li>\n<li><p>Comments。经常觉得要写很多注释表示你的代码难以理解。如果这种感觉太多，表示你需要Refactoring。</p>\n</li>\n</ol>\n","excerpt":"","more":"<p>转自：<a href=\"http://www.nowamagic.net/librarys/veda/detail/2053\">http://www.nowamagic.net/librarys/veda/detail/2053</a></p>\n<p>Code Smell中文译名一般为“代码异味”，或“代码味道”，它是提示代码中某个地方存在错误的一个暗示，开发人员可以通过这种smell（异味）在代码中追捕到问题。</p>\n<p>在计算机编程社区中，code smell代表了任何标志着事物变坏的征兆。它常常标志代码应该被refactored或者全部的设计都应该被reviewed。这个短语出现在 WardsWiki上，它是被Kent Beck杜撰出来的。在refactoring兴起之后，这个短语的使用率骤增。</p>\n<p>判断是否存在code smell经常是主观判断，并且随着语言、开发者、开发理论的不同而存在差异。</p>\n<p>经验丰富和知识渊博的开发人员通过对优秀设计有一种“感觉”，他们已经达到一种称之为“无意识能力 （UnconsciousCompetence）”的状态。也就是说，他们无需思考，只要通过查看代码或一段设计就可以立马对这个项目的代码质量有一种 “感觉”，能够对代码设计的优劣有一个大致的判断。</p>\n<p>但大家需要注意，code smell只是一种“暗示”，而非一种“确定”。将某些事物称之为“code smell”并未是一种攻击，它只是一种提示：开发人员需要对项目设计进行更进一步的查看。因此，code smell更多是“直觉的，本能的”。</p>\n<p>code smell一般包括：</p>\n<ol>\n<li><p>Duplicated Code。代码重复几乎是最常见的异味了。他也是Refactoring 的主要目标之一。代码重复往往来自于copy-and-paste 的编程风格。与他相对应OAOO 是一个好系统的重要标志。</p>\n</li>\n<li><p>Long method。它是传统结构化的“遗毒”。一个方法应当具有自我独立的意图，不要把几个意图放在一起，特别注意大类和长方法。</p>\n</li>\n<li><p>Large Class。大类就是你把太多的责任交给了一个类。这里的规则是One Class One。</p>\n</li>\n<li><p>Divergent Change。一个类里面的内容变化率不同。某些状态一个小时变一次，某些则几个月一年才变一次；某些状态因为这方面的原因发生变化，而另一些则因为其他方面的原因变一 次。面向对象的抽象就是把相对不变的和相对变化相隔离。把问题变化的一方面和另一方面相隔离。这使得这些相对不变的可以重用。问题变化的每个方面都可以单 独重用。这种相异变化的共存使得重用非常困难。</p>\n</li>\n<li><p>Shotgun Surgery。这正好和上面相反。对系统一个地方的改变涉及到其他许多地方的相关改变。这些变化率和变化内容相似的状态和行为通常应当放在同一个类中。</p>\n</li>\n<li><p>Feature Envy。对象的目的就是封装状态以及与这些状态紧密相关的行为。如果一个类的方法频繁用get 方法存取其他类的状态进行计算，那么你要考虑把行为移到涉及状态数目最多的那个类。</p>\n</li>\n<li><p>Data Clumps。某些数据通常像孩子一样成群玩耍：一起出现在很多类的成员变量中，一起出现在许多方法的参数中……，这些数据或许应该自己独立形成对象。</p>\n</li>\n<li><p>Primitive Obsession。面向对象的新手通常习惯使用几个原始类型的数据来表示一个概念。譬如对于范围，他们会使用两个数字。对于Money，他们会用一个浮点数来表示。因为你没 有使用对象来表达问题中存在的概念，这使得代码变的难以理解，解决问题的难度大大增加。好的习惯是扩充语言所能提供原始类型，用小对象来表示范围、金额、 转化率、邮政编码等等。</p>\n</li>\n<li><p>Switch Statement。基于常量的开关语句是OO 的大敌，你应当把他变为子类、state 或strategy。</p>\n</li>\n<li><p>Parallel Inheritance Hierarchies。并行的继承层次是shotgun surgery 的特殊情况。因为当你改变一个层次中的某一个类时，你必须同时改变另外一个层次的并行子类。</p>\n</li>\n<li><p>Lazy Class。一个干活不多的类。类的维护需要额外的开销，如果一个类承担了太少的责任，应当消除它。</p>\n</li>\n<li><p>Speculative Generality。一个类实现了从未用到的功能和通用性。通常这样的类或方法唯一的用户是test case。不要犹豫，删除它。</p>\n</li>\n<li><p>Temporary Field。一个对象的属性可能只在某些情况下才有意义。这样的代码将难以理解。专门建立一个对象来持有这样的孤儿属性，把只和他相关的行为移到该类。最常见的是一个特定的算法需要某些只有该算法才有用的变量。</p>\n</li>\n<li><p>Message Chain。消息链发生于当一个客户向一个对象要求另一个对象，然后客户又向这另一对象要求另一个对象，再向这另一个对象要求另一个对象，如此如此。这时，你需要隐藏分派。</p>\n</li>\n<li><p>Middle Man。对象的基本特性之一就是封装，而你经常会通过分派去实现封装。但是这一步不能走得太远，如果你发现一个类接口的一大半方法都在做分派，你可能需要移去这个中间人。</p>\n</li>\n<li><p>Inappropriate Intimacy。某些类相互之间太亲密，它们花费了太多的时间去砖研别人的私有部分。对人类而言，我们也许不应该太假正经，但我们应当让自己的类严格遵守禁欲主义。</p>\n</li>\n<li><p>Alternative Classes with Different Interfaces。做相同事情的方法有不同的函数signature，一致把它们往类层次上移，直至协议一致。</p>\n</li>\n<li><p>Incomplete Library Class。要建立一个好的类库非常困难。我们大量的程序工作都基于类库实现。然而，如此广泛而又相异的目标对库构建者提出了苛刻的要求。库构建者也不是万能的。有时 候我们会发现库类无法实现我们需要的功能。而直接对库类的修改有非常困难。这时候就需要用各种手段进行Refactoring。</p>\n</li>\n<li><p>Data Class。对象包括状态和行为。如果一个类只有状态没有行为，那么肯定有什么地方出问题了。</p>\n</li>\n<li><p>Refused Bequest。超类传下来很多行为和状态，而子类只是用了其中的很小一部分。这通常意味着你的类层次有问题。</p>\n</li>\n<li><p>Comments。经常觉得要写很多注释表示你的代码难以理解。如果这种感觉太多，表示你需要Refactoring。</p>\n</li>\n</ol>\n"},{"title":"Permission denied (publickey)","date":"2016-06-16T00:21:06.000Z","_content":"\n今天把学习 flask 的本地库上传到 github 时报错\n\n```\n$ git push -u origin master\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n在 [stackoverflow](http://stackoverflow.com/questions/26953071/github-authentication-failed-github-does-not-provide-shell-access) 找到解决方案\n\n```\ngit remote set-url origin git@github.com:lut/EvolutionApp.git\ngit remote show origin\n```\n\n简单记录一下...","source":"_posts/git-push-error.md","raw":"---\ntitle: Permission denied (publickey)\ndate: 2016-06-16 08:21:06\ncategory: git\ntags: [git, github, ssh]\n---\n\n今天把学习 flask 的本地库上传到 github 时报错\n\n```\n$ git push -u origin master\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\n在 [stackoverflow](http://stackoverflow.com/questions/26953071/github-authentication-failed-github-does-not-provide-shell-access) 找到解决方案\n\n```\ngit remote set-url origin git@github.com:lut/EvolutionApp.git\ngit remote show origin\n```\n\n简单记录一下...","slug":"git-push-error","published":1,"updated":"2016-06-26T06:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fur000n3npxa0013cmo","content":"<p>今天把学习 flask 的本地库上传到 github 时报错</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push -u origin master</div><div class=\"line\">Permission denied (publickey).</div><div class=\"line\">fatal: Could <span class=\"keyword\">not</span> <span class=\"built_in\">read</span> <span class=\"built_in\">from</span> remote repository.</div><div class=\"line\"></div><div class=\"line\">Please make sure you have <span class=\"keyword\">the</span> correct access rights</div><div class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">the</span> repository exists.</div></pre></td></tr></table></figure>\n<p>在 <a href=\"http://stackoverflow.com/questions/26953071/github-authentication-failed-github-does-not-provide-shell-access\" target=\"_blank\" rel=\"external\">stackoverflow</a> 找到解决方案</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">git@</span><span class=\"string\">github.</span><span class=\"string\">com:lut/</span><span class=\"string\">EvolutionApp.</span><span class=\"string\">git</span></div><div class=\"line\"><span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"string\">show </span><span class=\"string\">origin</span></div></pre></td></tr></table></figure>\n<p>简单记录一下…</p>\n","excerpt":"","more":"<p>今天把学习 flask 的本地库上传到 github 时报错</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push -u origin master</div><div class=\"line\">Permission denied (publickey).</div><div class=\"line\">fatal: Could <span class=\"keyword\">not</span> <span class=\"built_in\">read</span> <span class=\"built_in\">from</span> remote repository.</div><div class=\"line\"></div><div class=\"line\">Please make sure you have <span class=\"keyword\">the</span> correct access rights</div><div class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">the</span> repository exists.</div></pre></td></tr></table></figure>\n<p>在 <a href=\"http://stackoverflow.com/questions/26953071/github-authentication-failed-github-does-not-provide-shell-access\">stackoverflow</a> 找到解决方案</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"built_in\">set-url</span> <span class=\"string\">origin </span><span class=\"string\">git@</span><span class=\"string\">github.</span><span class=\"string\">com:lut/</span><span class=\"string\">EvolutionApp.</span><span class=\"string\">git</div><div class=\"line\"></span><span class=\"string\">git </span><span class=\"string\">remote </span><span class=\"string\">show </span><span class=\"string\">origin</span></div></pre></td></tr></table></figure>\n<p>简单记录一下…</p>\n"},{"title":"hexo github","date":"2016-03-09T11:08:03.000Z","_content":"\n# hexo & github\n\n一开始没有搞懂`.deploy_git`和`.git`的区别   \n后来发现`hexo deploy`到github上的内容只有纯粹的网页   \n才大致明白了hexo的工作流程\n\n首先   \nhexo并没有生成页面文件   \n项目目录中除了配置文件以外就只有`hex new`出来的一些`.md`而已   \n`hexo generate`之后才会在`public`目录下生成一系列html，css等页面文件   \n\n`hexo deploy`之后   \nhexo才会将所有页面文件push到项目的`master`分支(在`/_config.yml`中指定)上   \n网站因而得以运作   \n\n但是这样一来   \n只有页面文件被放到了远程库   \n为了将配置文件和`.md`也放到Github    \n可以新建一个`hexo`分支来存放\n\n```\ngit checkout -b hexo\ngit push origin hexo:hexo\n\n```\n这样一来   \n对hexo所做的修改也可以托管在Github上了\n\n以后只需在`hexo g`生成页面后   \n先用`hexo d`发布到网站（即`master`分支）   \n然后`add`-`commit`-`push`所有改动到`hexo`分支   \n\n# push conflict\n\n不过在实际的第二次push时   \n出现了冲突\n\n```\n$ git push origin hexo:hexo\nTo git@github.com:answerrrrrrrrr/answerrrrrrrrr.github.com.git\n ! [rejected]        hexo -> hexo (non-fast-forward)\nerror: failed to push some refs to 'git@github.com:answerrrrrrrrr/answerrrrrrrrr.github.com.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n\n参考[廖雪峰的文章](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013760174128707b935b0be6fc4fc6ace66c4f15618f8d000)得以解决\n\n```\n$ git pull\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> hexo\n\n$ git branch --set-upstream hexo origin/hexo\nThe --set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-to\nBranch hexo set up to track remote branch hexo from origin.\n\n$ git pull\nAuto-merging index.html\nCONFLICT (add/add): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n\n$ git status\nOn branch hexo\nYour branch and 'origin/hexo' have diverged,\nand have 1 and 1 different commit each, respectively.\n  (use \"git pull\" to merge the remote branch into yours)\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\n\tboth added:      index.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n$ subl index.html\n$ git add .\n$ git commit -m 'index'\n\t[hexo b7ed9be] index\n$ git push origin hexo:hexo\n\n```","source":"_posts/hexo-github.md","raw":"---\ntitle: hexo github\ndate: 2016-03-09 19:08:03\ntags: [hexo, git, github]\ncategory: hexo\n---\n\n# hexo & github\n\n一开始没有搞懂`.deploy_git`和`.git`的区别   \n后来发现`hexo deploy`到github上的内容只有纯粹的网页   \n才大致明白了hexo的工作流程\n\n首先   \nhexo并没有生成页面文件   \n项目目录中除了配置文件以外就只有`hex new`出来的一些`.md`而已   \n`hexo generate`之后才会在`public`目录下生成一系列html，css等页面文件   \n\n`hexo deploy`之后   \nhexo才会将所有页面文件push到项目的`master`分支(在`/_config.yml`中指定)上   \n网站因而得以运作   \n\n但是这样一来   \n只有页面文件被放到了远程库   \n为了将配置文件和`.md`也放到Github    \n可以新建一个`hexo`分支来存放\n\n```\ngit checkout -b hexo\ngit push origin hexo:hexo\n\n```\n这样一来   \n对hexo所做的修改也可以托管在Github上了\n\n以后只需在`hexo g`生成页面后   \n先用`hexo d`发布到网站（即`master`分支）   \n然后`add`-`commit`-`push`所有改动到`hexo`分支   \n\n# push conflict\n\n不过在实际的第二次push时   \n出现了冲突\n\n```\n$ git push origin hexo:hexo\nTo git@github.com:answerrrrrrrrr/answerrrrrrrrr.github.com.git\n ! [rejected]        hexo -> hexo (non-fast-forward)\nerror: failed to push some refs to 'git@github.com:answerrrrrrrrr/answerrrrrrrrr.github.com.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n\n参考[廖雪峰的文章](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013760174128707b935b0be6fc4fc6ace66c4f15618f8d000)得以解决\n\n```\n$ git pull\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> hexo\n\n$ git branch --set-upstream hexo origin/hexo\nThe --set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-to\nBranch hexo set up to track remote branch hexo from origin.\n\n$ git pull\nAuto-merging index.html\nCONFLICT (add/add): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n\n$ git status\nOn branch hexo\nYour branch and 'origin/hexo' have diverged,\nand have 1 and 1 different commit each, respectively.\n  (use \"git pull\" to merge the remote branch into yours)\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\n\tboth added:      index.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n$ subl index.html\n$ git add .\n$ git commit -m 'index'\n\t[hexo b7ed9be] index\n$ git push origin hexo:hexo\n\n```","slug":"hexo-github","published":1,"updated":"2016-06-26T06:37:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fus000o3npxswlbzd4v","content":"<h1 id=\"hexo-amp-github\"><a href=\"#hexo-amp-github\" class=\"headerlink\" title=\"hexo &amp; github\"></a>hexo &amp; github</h1><p>一开始没有搞懂<code>.deploy_git</code>和<code>.git</code>的区别<br>后来发现<code>hexo deploy</code>到github上的内容只有纯粹的网页<br>才大致明白了hexo的工作流程</p>\n<p>首先<br>hexo并没有生成页面文件<br>项目目录中除了配置文件以外就只有<code>hex new</code>出来的一些<code>.md</code>而已<br><code>hexo generate</code>之后才会在<code>public</code>目录下生成一系列html，css等页面文件   </p>\n<p><code>hexo deploy</code>之后<br>hexo才会将所有页面文件push到项目的<code>master</code>分支(在<code>/_config.yml</code>中指定)上<br>网站因而得以运作   </p>\n<p>但是这样一来<br>只有页面文件被放到了远程库<br>为了将配置文件和<code>.md</code>也放到Github<br>可以新建一个<code>hexo</code>分支来存放</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">git</span> checkout -<span class=\"keyword\">b </span>hexo</div><div class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">push </span>origin hexo:hexo</div></pre></td></tr></table></figure>\n<p>这样一来<br>对hexo所做的修改也可以托管在Github上了</p>\n<p>以后只需在<code>hexo g</code>生成页面后<br>先用<code>hexo d</code>发布到网站（即<code>master</code>分支）<br>然后<code>add</code>-<code>commit</code>-<code>push</code>所有改动到<code>hexo</code>分支   </p>\n<h1 id=\"push-conflict\"><a href=\"#push-conflict\" class=\"headerlink\" title=\"push conflict\"></a>push conflict</h1><p>不过在实际的第二次push时<br>出现了冲突</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin hexo:hexo</div><div class=\"line\">To git@github<span class=\"selector-class\">.com</span>:answerrrrrrrrr/answerrrrrrrrr<span class=\"selector-class\">.github</span><span class=\"selector-class\">.com</span><span class=\"selector-class\">.git</span></div><div class=\"line\"> ! [rejected]        hexo -&gt; hexo (non-fast-forward)</div><div class=\"line\">error: failed to push some refs to <span class=\"string\">'git@github.com:answerrrrrrrrr/answerrrrrrrrr.github.com.git'</span></div><div class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</div><div class=\"line\">hint: its remote counterpart. Integrate the remote changes (e<span class=\"selector-class\">.g</span>.</div><div class=\"line\">hint: <span class=\"string\">'git pull ...'</span>) before pushing again.</div><div class=\"line\">hint: See the <span class=\"string\">'Note about fast-forwards'</span> <span class=\"keyword\">in</span> <span class=\"string\">'git push --help'</span> <span class=\"keyword\">for</span> <span class=\"selector-tag\">details</span>.</div></pre></td></tr></table></figure>\n<p>参考<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013760174128707b935b0be6fc4fc6ace66c4f15618f8d000\" target=\"_blank\" rel=\"external\">廖雪峰的文章</a>得以解决</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git pull</div><div class=\"line\">There is no tracking information for the current branch.</div><div class=\"line\">Please specify which branch you want to <span class=\"keyword\">merge</span> with.</div><div class=\"line\">See git-pull(<span class=\"number\">1</span>) <span class=\"keyword\">for</span> details</div><div class=\"line\"></div><div class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">If</span> you wish <span class=\"keyword\">to</span> <span class=\"keyword\">set</span> <span class=\"keyword\">tracking</span> information <span class=\"keyword\">for</span> this branch you can <span class=\"keyword\">do</span> so <span class=\"keyword\">with</span>:</div><div class=\"line\"></div><div class=\"line\">    git branch <span class=\"comment\">--set-upstream-to=origin/&lt;branch&gt; hexo</span></div><div class=\"line\"></div><div class=\"line\">$ git branch <span class=\"comment\">--set-upstream hexo origin/hexo</span></div><div class=\"line\">The <span class=\"comment\">--set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-to</span></div><div class=\"line\">Branch hexo <span class=\"keyword\">set</span> up <span class=\"keyword\">to</span> track remote branch hexo <span class=\"keyword\">from</span> origin.</div><div class=\"line\"></div><div class=\"line\">$ git pull</div><div class=\"line\"><span class=\"keyword\">Auto</span>-merging index.html</div><div class=\"line\">CONFLICT (<span class=\"keyword\">add</span>/<span class=\"keyword\">add</span>): <span class=\"keyword\">Merge</span> conflict <span class=\"keyword\">in</span> index.html</div><div class=\"line\"><span class=\"keyword\">Automatic</span> <span class=\"keyword\">merge</span> <span class=\"keyword\">failed</span>; fix conflicts and then <span class=\"keyword\">commit</span> the result.</div><div class=\"line\"></div><div class=\"line\">$ git <span class=\"keyword\">status</span></div><div class=\"line\"><span class=\"keyword\">On</span> branch hexo</div><div class=\"line\">Your branch <span class=\"keyword\">and</span> <span class=\"string\">'origin/hexo'</span> have diverged,</div><div class=\"line\"><span class=\"keyword\">and</span> have <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> different <span class=\"keyword\">commit</span> <span class=\"keyword\">each</span>, respectively.</div><div class=\"line\">  (<span class=\"keyword\">use</span> <span class=\"string\">\"git pull\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">merge</span> the remote branch <span class=\"keyword\">into</span> yours)</div><div class=\"line\">You have unmerged paths.</div><div class=\"line\">  (fix conflicts <span class=\"keyword\">and</span> run <span class=\"string\">\"git commit\"</span>)</div><div class=\"line\"></div><div class=\"line\">Unmerged paths:</div><div class=\"line\">  (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> mark resolution)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">both</span> added:      index.html</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">no</span> changes added <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add\"</span> <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> <span class=\"string\">\"git commit -a\"</span>)</div><div class=\"line\"></div><div class=\"line\">$ subl index.html</div><div class=\"line\">$ git <span class=\"keyword\">add</span> .</div><div class=\"line\">$ git <span class=\"keyword\">commit</span> -m <span class=\"string\">'index'</span></div><div class=\"line\">\t[hexo b7ed9be] <span class=\"keyword\">index</span></div><div class=\"line\">$ git push origin hexo:hexo</div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"hexo-amp-github\"><a href=\"#hexo-amp-github\" class=\"headerlink\" title=\"hexo &amp; github\"></a>hexo &amp; github</h1><p>一开始没有搞懂<code>.deploy_git</code>和<code>.git</code>的区别<br>后来发现<code>hexo deploy</code>到github上的内容只有纯粹的网页<br>才大致明白了hexo的工作流程</p>\n<p>首先<br>hexo并没有生成页面文件<br>项目目录中除了配置文件以外就只有<code>hex new</code>出来的一些<code>.md</code>而已<br><code>hexo generate</code>之后才会在<code>public</code>目录下生成一系列html，css等页面文件   </p>\n<p><code>hexo deploy</code>之后<br>hexo才会将所有页面文件push到项目的<code>master</code>分支(在<code>/_config.yml</code>中指定)上<br>网站因而得以运作   </p>\n<p>但是这样一来<br>只有页面文件被放到了远程库<br>为了将配置文件和<code>.md</code>也放到Github<br>可以新建一个<code>hexo</code>分支来存放</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">git</span> checkout -<span class=\"keyword\">b </span>hexo</div><div class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">push </span>origin hexo:hexo</div></pre></td></tr></table></figure>\n<p>这样一来<br>对hexo所做的修改也可以托管在Github上了</p>\n<p>以后只需在<code>hexo g</code>生成页面后<br>先用<code>hexo d</code>发布到网站（即<code>master</code>分支）<br>然后<code>add</code>-<code>commit</code>-<code>push</code>所有改动到<code>hexo</code>分支   </p>\n<h1 id=\"push-conflict\"><a href=\"#push-conflict\" class=\"headerlink\" title=\"push conflict\"></a>push conflict</h1><p>不过在实际的第二次push时<br>出现了冲突</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin hexo:hexo</div><div class=\"line\">To git@github<span class=\"selector-class\">.com</span>:answerrrrrrrrr/answerrrrrrrrr<span class=\"selector-class\">.github</span><span class=\"selector-class\">.com</span><span class=\"selector-class\">.git</span></div><div class=\"line\"> ! [rejected]        hexo -&gt; hexo (non-fast-forward)</div><div class=\"line\">error: failed to push some refs to <span class=\"string\">'git@github.com:answerrrrrrrrr/answerrrrrrrrr.github.com.git'</span></div><div class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</div><div class=\"line\">hint: its remote counterpart. Integrate the remote changes (e<span class=\"selector-class\">.g</span>.</div><div class=\"line\">hint: <span class=\"string\">'git pull ...'</span>) before pushing again.</div><div class=\"line\">hint: See the <span class=\"string\">'Note about fast-forwards'</span> <span class=\"keyword\">in</span> <span class=\"string\">'git push --help'</span> <span class=\"keyword\">for</span> <span class=\"selector-tag\">details</span>.</div></pre></td></tr></table></figure>\n<p>参考<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013760174128707b935b0be6fc4fc6ace66c4f15618f8d000\">廖雪峰的文章</a>得以解决</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git pull</div><div class=\"line\">There is no tracking information for the current branch.</div><div class=\"line\">Please specify which branch you want to <span class=\"keyword\">merge</span> with.</div><div class=\"line\">See git-pull(<span class=\"number\">1</span>) <span class=\"keyword\">for</span> details</div><div class=\"line\"></div><div class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">If</span> you wish <span class=\"keyword\">to</span> <span class=\"keyword\">set</span> <span class=\"keyword\">tracking</span> information <span class=\"keyword\">for</span> this branch you can <span class=\"keyword\">do</span> so <span class=\"keyword\">with</span>:</div><div class=\"line\"></div><div class=\"line\">    git branch <span class=\"comment\">--set-upstream-to=origin/&lt;branch&gt; hexo</span></div><div class=\"line\"></div><div class=\"line\">$ git branch <span class=\"comment\">--set-upstream hexo origin/hexo</span></div><div class=\"line\">The <span class=\"comment\">--set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-to</span></div><div class=\"line\">Branch hexo <span class=\"keyword\">set</span> up <span class=\"keyword\">to</span> track remote branch hexo <span class=\"keyword\">from</span> origin.</div><div class=\"line\"></div><div class=\"line\">$ git pull</div><div class=\"line\"><span class=\"keyword\">Auto</span>-merging index.html</div><div class=\"line\">CONFLICT (<span class=\"keyword\">add</span>/<span class=\"keyword\">add</span>): <span class=\"keyword\">Merge</span> conflict <span class=\"keyword\">in</span> index.html</div><div class=\"line\"><span class=\"keyword\">Automatic</span> <span class=\"keyword\">merge</span> <span class=\"keyword\">failed</span>; fix conflicts and then <span class=\"keyword\">commit</span> the result.</div><div class=\"line\"></div><div class=\"line\">$ git <span class=\"keyword\">status</span></div><div class=\"line\"><span class=\"keyword\">On</span> branch hexo</div><div class=\"line\">Your branch <span class=\"keyword\">and</span> <span class=\"string\">'origin/hexo'</span> have diverged,</div><div class=\"line\"><span class=\"keyword\">and</span> have <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> different <span class=\"keyword\">commit</span> <span class=\"keyword\">each</span>, respectively.</div><div class=\"line\">  (<span class=\"keyword\">use</span> <span class=\"string\">\"git pull\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">merge</span> the remote branch <span class=\"keyword\">into</span> yours)</div><div class=\"line\">You have unmerged paths.</div><div class=\"line\">  (fix conflicts <span class=\"keyword\">and</span> run <span class=\"string\">\"git commit\"</span>)</div><div class=\"line\"></div><div class=\"line\">Unmerged paths:</div><div class=\"line\">  (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> mark resolution)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">both</span> added:      index.html</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">no</span> changes added <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add\"</span> <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> <span class=\"string\">\"git commit -a\"</span>)</div><div class=\"line\"></div><div class=\"line\">$ subl index.html</div><div class=\"line\">$ git <span class=\"keyword\">add</span> .</div><div class=\"line\">$ git <span class=\"keyword\">commit</span> -m <span class=\"string\">'index'</span></div><div class=\"line\">\t[hexo b7ed9be] <span class=\"keyword\">index</span></div><div class=\"line\">$ git push origin hexo:hexo</div></pre></td></tr></table></figure>"},{"title":"hexo-rss-sitemap","date":"2016-07-28T02:42:46.000Z","_content":"\n今天突然发现没给博客添加`RSS`订阅和`sitemap`（站点地图，方便搜索引擎的收录）   \n尝试了一下发觉还挺方便的   \n\n```\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n这里一定要加上`--save`，否则无法`generate`对应的 xml\n\n然后在根目录的`_config.xml`加入\n\n```xml\n# RSS & sitemap\n# Extensions\nPlugins:\n- hexo-generator-feed\n- hexo-generator-sitemap\n\n# Feed Atom\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n\n# sitemap\nsitemap:\n  path: sitemap.xml\n```\n\n然后`hexo g`即可生成对应 xml\n\n> INFO  Start processing   \n> INFO  Files loaded in 650 ms   \n> INFO  Generated: atom.xml   \n> INFO  Generated: sitemap.xml   \n> INFO  2 files generated in 2.47 s\n\n这时访问对应路径即可验证，另外边栏也可以看见`RSS`图标了\n","source":"_posts/hexo-rss-sitemap.md","raw":"---\ntitle: hexo-rss-sitemap\ndate: 2016-07-28 10:42:46\ncategory: hexo\ntags: [hexo, rss, sitemap]\n---\n\n今天突然发现没给博客添加`RSS`订阅和`sitemap`（站点地图，方便搜索引擎的收录）   \n尝试了一下发觉还挺方便的   \n\n```\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n这里一定要加上`--save`，否则无法`generate`对应的 xml\n\n然后在根目录的`_config.xml`加入\n\n```xml\n# RSS & sitemap\n# Extensions\nPlugins:\n- hexo-generator-feed\n- hexo-generator-sitemap\n\n# Feed Atom\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n\n# sitemap\nsitemap:\n  path: sitemap.xml\n```\n\n然后`hexo g`即可生成对应 xml\n\n> INFO  Start processing   \n> INFO  Files loaded in 650 ms   \n> INFO  Generated: atom.xml   \n> INFO  Generated: sitemap.xml   \n> INFO  2 files generated in 2.47 s\n\n这时访问对应路径即可验证，另外边栏也可以看见`RSS`图标了\n","slug":"hexo-rss-sitemap","published":1,"updated":"2016-07-28T02:56:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fut000p3npxr0f5m6ec","content":"<p>今天突然发现没给博客添加<code>RSS</code>订阅和<code>sitemap</code>（站点地图，方便搜索引擎的收录）<br>尝试了一下发觉还挺方便的   </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-feed <span class=\"comment\">--save</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-baidu-sitemap <span class=\"comment\">--save</span></div></pre></td></tr></table></figure>\n<p>这里一定要加上<code>--save</code>，否则无法<code>generate</code>对应的 xml</p>\n<p>然后在根目录的<code>_config.xml</code>加入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"># RSS &amp; sitemap</div><div class=\"line\"># Extensions</div><div class=\"line\">Plugins:</div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\">- hexo-generator-sitemap</div><div class=\"line\"></div><div class=\"line\"># Feed Atom</div><div class=\"line\">feed:</div><div class=\"line\">  type: atom</div><div class=\"line\">  path: atom.xml</div><div class=\"line\">  limit: 20</div><div class=\"line\"></div><div class=\"line\"># sitemap</div><div class=\"line\">sitemap:</div><div class=\"line\">  path: sitemap.xml</div></pre></td></tr></table></figure>\n<p>然后<code>hexo g</code>即可生成对应 xml</p>\n<blockquote>\n<p>INFO  Start processing<br>INFO  Files loaded in 650 ms<br>INFO  Generated: atom.xml<br>INFO  Generated: sitemap.xml<br>INFO  2 files generated in 2.47 s</p>\n</blockquote>\n<p>这时访问对应路径即可验证，另外边栏也可以看见<code>RSS</code>图标了</p>\n","excerpt":"","more":"<p>今天突然发现没给博客添加<code>RSS</code>订阅和<code>sitemap</code>（站点地图，方便搜索引擎的收录）<br>尝试了一下发觉还挺方便的   </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-feed <span class=\"comment\">--save</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-baidu-sitemap <span class=\"comment\">--save</span></div></pre></td></tr></table></figure>\n<p>这里一定要加上<code>--save</code>，否则无法<code>generate</code>对应的 xml</p>\n<p>然后在根目录的<code>_config.xml</code>加入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"># RSS &amp; sitemap</div><div class=\"line\"># Extensions</div><div class=\"line\">Plugins:</div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\">- hexo-generator-sitemap</div><div class=\"line\"></div><div class=\"line\"># Feed Atom</div><div class=\"line\">feed:</div><div class=\"line\">  type: atom</div><div class=\"line\">  path: atom.xml</div><div class=\"line\">  limit: 20</div><div class=\"line\"></div><div class=\"line\"># sitemap</div><div class=\"line\">sitemap:</div><div class=\"line\">  path: sitemap.xml</div></pre></td></tr></table></figure>\n<p>然后<code>hexo g</code>即可生成对应 xml</p>\n<blockquote>\n<p>INFO  Start processing<br>INFO  Files loaded in 650 ms<br>INFO  Generated: atom.xml<br>INFO  Generated: sitemap.xml<br>INFO  2 files generated in 2.47 s</p>\n</blockquote>\n<p>这时访问对应路径即可验证，另外边栏也可以看见<code>RSS</code>图标了</p>\n"},{"title":"命令行调用 idapython 脚本","date":"2016-09-20T02:40:41.000Z","_content":"\n# 安装\n1. 安装 Python 2.7\n\n2. 下载 https://github.com/idapython/bin/raw/master/idapython-6.9.0-python2.7-mac.zip 并解压\n\n3. 将 Python 内的所有内容复制到 IDA 根目录的 Python 内（没有就新建）\n\n4. 将 Plugins 内的所有内容复制到 IDA 根目录的 Plugins 内\n\n5. 将 python.cfg 复制到 IDA 根目录的 cfg 内\n\n6. 重启 IDA，File 菜单下面会有 Python Command 选项，而且 Script files 选项中可以选择 py 文件\n\n\npython 目录中的四个文件：\n\n- init.py 是初始的基础文件\n- idaapi.py 中导入了 _idaapi 模块，这个以下划线开始的 idaapi 模块就是对 IDA API 的低层封装，idaapi.py 则是作为调用 IDA API 的用户层\n- idautils.py 提供了一些高级功能的函数\n- idc.py 则是对 IDA 内置的 IDC 脚本语言的兼容\n\n\n# 用法\n\n调用 idapython 脚本时总是要鼠标点来点去很不方便，在官网找了找 \n\nhttps://www.hex-rays.com/products/ida/support/idadoc/417.shtml\n\n该页面提供了命令行使用 ida 时的可用参数，比较常用的有：\n\n-A 让 ida 自动运行，不需要人工干预。也就是在处理的过程中不会弹出交互窗口，但是如果从来没有使用过 ida 那么许可协议的窗口无论你是否使用这个参数都将会显示。\n\n-c 参数会删除所有与参数中指定的文件相关的数据库，并且生成一个新的数据库。\n\n-S 参数用于指定 ida 在分析完数据之后执行的 idc 脚本，**注意：该选项和参数之间没有空格**，并且搜索目录为 ida 目录下的 idc 目录。\n\n-B 参数指定批量模式，等效于-A –c  –Sanylysis.idc.在分析完成后会自动生成相关的数据库和 asm 代码。并且在最后关闭 ida，以保存新的数据库。\n\n_[这篇文章](http://www.h4ck.org.cn/2012/03/ida-batch-mode/)<sup>2</sup>比较详细地讲解了批量模式的用法_ \n\n# 实例\n\n\n```py test.py\nfrom idautils import *\nfrom idaapi import *\nimport idc\n\nidc.Wait()\t# idaapi.autoWait()\n\nea = BeginEA()\ndll_functions = []\n\nfp = open(\"fun_output.txt\", \"w\")\nfp.write(\"check\")\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n    functionName = GetFunctionName(funcea)\n    dll_functions.append(functionName)\n    fp.write(functionName)\n    print(functionName)\nfp.close()\n\nidc.Exit(0)\n\n```\n_其中`idc.Wait()`表示带有`-A`参数时，等待 ida 自动分析过程完成后再运行后续脚本，`idc.Exit(0)`表示脚本运行结束后自动关闭 ida_\n\n不过在实际测试时，`idaq -c -A -Stest.py heap_test`失败且没有任何错误提示，参阅了[Using IDAPython to Make Your Life Easier: Part 6\n](http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/)<sup>3</sup>，脚本和命令都没什么问题，不知是不是因为 Demo 版的缘故。。。\n\n`idaq -c -Stest.py heap_test`倒是一切正常，只好暂且如此了。。。\n\n\n# 参考\n\n1. http://blog.csdn.net/zhangmiaoping23/article/details/14521995\n2. http://www.h4ck.org.cn/2012/03/ida-batch-mode/\n3. http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/\n\n","source":"_posts/idapython-commandline.md","raw":"---\ntitle: 命令行调用 idapython 脚本\ndate: 2016-09-20 10:40:41\ncategory: ida\ntags: [python, ida, idapython, idc]\n---\n\n# 安装\n1. 安装 Python 2.7\n\n2. 下载 https://github.com/idapython/bin/raw/master/idapython-6.9.0-python2.7-mac.zip 并解压\n\n3. 将 Python 内的所有内容复制到 IDA 根目录的 Python 内（没有就新建）\n\n4. 将 Plugins 内的所有内容复制到 IDA 根目录的 Plugins 内\n\n5. 将 python.cfg 复制到 IDA 根目录的 cfg 内\n\n6. 重启 IDA，File 菜单下面会有 Python Command 选项，而且 Script files 选项中可以选择 py 文件\n\n\npython 目录中的四个文件：\n\n- init.py 是初始的基础文件\n- idaapi.py 中导入了 _idaapi 模块，这个以下划线开始的 idaapi 模块就是对 IDA API 的低层封装，idaapi.py 则是作为调用 IDA API 的用户层\n- idautils.py 提供了一些高级功能的函数\n- idc.py 则是对 IDA 内置的 IDC 脚本语言的兼容\n\n\n# 用法\n\n调用 idapython 脚本时总是要鼠标点来点去很不方便，在官网找了找 \n\nhttps://www.hex-rays.com/products/ida/support/idadoc/417.shtml\n\n该页面提供了命令行使用 ida 时的可用参数，比较常用的有：\n\n-A 让 ida 自动运行，不需要人工干预。也就是在处理的过程中不会弹出交互窗口，但是如果从来没有使用过 ida 那么许可协议的窗口无论你是否使用这个参数都将会显示。\n\n-c 参数会删除所有与参数中指定的文件相关的数据库，并且生成一个新的数据库。\n\n-S 参数用于指定 ida 在分析完数据之后执行的 idc 脚本，**注意：该选项和参数之间没有空格**，并且搜索目录为 ida 目录下的 idc 目录。\n\n-B 参数指定批量模式，等效于-A –c  –Sanylysis.idc.在分析完成后会自动生成相关的数据库和 asm 代码。并且在最后关闭 ida，以保存新的数据库。\n\n_[这篇文章](http://www.h4ck.org.cn/2012/03/ida-batch-mode/)<sup>2</sup>比较详细地讲解了批量模式的用法_ \n\n# 实例\n\n\n```py test.py\nfrom idautils import *\nfrom idaapi import *\nimport idc\n\nidc.Wait()\t# idaapi.autoWait()\n\nea = BeginEA()\ndll_functions = []\n\nfp = open(\"fun_output.txt\", \"w\")\nfp.write(\"check\")\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n    functionName = GetFunctionName(funcea)\n    dll_functions.append(functionName)\n    fp.write(functionName)\n    print(functionName)\nfp.close()\n\nidc.Exit(0)\n\n```\n_其中`idc.Wait()`表示带有`-A`参数时，等待 ida 自动分析过程完成后再运行后续脚本，`idc.Exit(0)`表示脚本运行结束后自动关闭 ida_\n\n不过在实际测试时，`idaq -c -A -Stest.py heap_test`失败且没有任何错误提示，参阅了[Using IDAPython to Make Your Life Easier: Part 6\n](http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/)<sup>3</sup>，脚本和命令都没什么问题，不知是不是因为 Demo 版的缘故。。。\n\n`idaq -c -Stest.py heap_test`倒是一切正常，只好暂且如此了。。。\n\n\n# 参考\n\n1. http://blog.csdn.net/zhangmiaoping23/article/details/14521995\n2. http://www.h4ck.org.cn/2012/03/ida-batch-mode/\n3. http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/\n\n","slug":"idapython-commandline","published":1,"updated":"2017-05-29T13:11:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fuu000q3npx0blfvcft","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ol>\n<li><p>安装 Python 2.7</p>\n</li>\n<li><p>下载 <a href=\"https://github.com/idapython/bin/raw/master/idapython-6.9.0-python2.7-mac.zip\" target=\"_blank\" rel=\"external\">https://github.com/idapython/bin/raw/master/idapython-6.9.0-python2.7-mac.zip</a> 并解压</p>\n</li>\n<li><p>将 Python 内的所有内容复制到 IDA 根目录的 Python 内（没有就新建）</p>\n</li>\n<li><p>将 Plugins 内的所有内容复制到 IDA 根目录的 Plugins 内</p>\n</li>\n<li><p>将 python.cfg 复制到 IDA 根目录的 cfg 内</p>\n</li>\n<li><p>重启 IDA，File 菜单下面会有 Python Command 选项，而且 Script files 选项中可以选择 py 文件</p>\n</li>\n</ol>\n<p>python 目录中的四个文件：</p>\n<ul>\n<li>init.py 是初始的基础文件</li>\n<li>idaapi.py 中导入了 _idaapi 模块，这个以下划线开始的 idaapi 模块就是对 IDA API 的低层封装，idaapi.py 则是作为调用 IDA API 的用户层</li>\n<li>idautils.py 提供了一些高级功能的函数</li>\n<li>idc.py 则是对 IDA 内置的 IDC 脚本语言的兼容</li>\n</ul>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><p>调用 idapython 脚本时总是要鼠标点来点去很不方便，在官网找了找 </p>\n<p><a href=\"https://www.hex-rays.com/products/ida/support/idadoc/417.shtml\" target=\"_blank\" rel=\"external\">https://www.hex-rays.com/products/ida/support/idadoc/417.shtml</a></p>\n<p>该页面提供了命令行使用 ida 时的可用参数，比较常用的有：</p>\n<p>-A 让 ida 自动运行，不需要人工干预。也就是在处理的过程中不会弹出交互窗口，但是如果从来没有使用过 ida 那么许可协议的窗口无论你是否使用这个参数都将会显示。</p>\n<p>-c 参数会删除所有与参数中指定的文件相关的数据库，并且生成一个新的数据库。</p>\n<p>-S 参数用于指定 ida 在分析完数据之后执行的 idc 脚本，<strong>注意：该选项和参数之间没有空格</strong>，并且搜索目录为 ida 目录下的 idc 目录。</p>\n<p>-B 参数指定批量模式，等效于-A –c  –Sanylysis.idc.在分析完成后会自动生成相关的数据库和 asm 代码。并且在最后关闭 ida，以保存新的数据库。</p>\n<p><em><a href=\"http://www.h4ck.org.cn/2012/03/ida-batch-mode/\" target=\"_blank\" rel=\"external\">这篇文章</a><sup>2</sup>比较详细地讲解了批量模式的用法</em> </p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><figure class=\"highlight py\"><figcaption><span>test.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> idautils <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> idaapi <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">import</span> idc</div><div class=\"line\"></div><div class=\"line\">idc.Wait()\t<span class=\"comment\"># idaapi.autoWait()</span></div><div class=\"line\"></div><div class=\"line\">ea = BeginEA()</div><div class=\"line\">dll_functions = []</div><div class=\"line\"></div><div class=\"line\">fp = open(<span class=\"string\">\"fun_output.txt\"</span>, <span class=\"string\">\"w\"</span>)</div><div class=\"line\">fp.write(<span class=\"string\">\"check\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> funcea <span class=\"keyword\">in</span> Functions(SegStart(ea), SegEnd(ea)):</div><div class=\"line\">    functionName = GetFunctionName(funcea)</div><div class=\"line\">    dll_functions.append(functionName)</div><div class=\"line\">    fp.write(functionName)</div><div class=\"line\">    print(functionName)</div><div class=\"line\">fp.close()</div><div class=\"line\"></div><div class=\"line\">idc.Exit(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<p><em>其中<code>idc.Wait()</code>表示带有<code>-A</code>参数时，等待 ida 自动分析过程完成后再运行后续脚本，<code>idc.Exit(0)</code>表示脚本运行结束后自动关闭 ida</em></p>\n<p>不过在实际测试时，<code>idaq -c -A -Stest.py heap_test</code>失败且没有任何错误提示，参阅了<a href=\"http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/\" target=\"_blank\" rel=\"external\">Using IDAPython to Make Your Life Easier: Part 6\n</a><sup>3</sup>，脚本和命令都没什么问题，不知是不是因为 Demo 版的缘故。。。</p>\n<p><code>idaq -c -Stest.py heap_test</code>倒是一切正常，只好暂且如此了。。。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"http://blog.csdn.net/zhangmiaoping23/article/details/14521995\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/zhangmiaoping23/article/details/14521995</a></li>\n<li><a href=\"http://www.h4ck.org.cn/2012/03/ida-batch-mode/\" target=\"_blank\" rel=\"external\">http://www.h4ck.org.cn/2012/03/ida-batch-mode/</a></li>\n<li><a href=\"http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/\" target=\"_blank\" rel=\"external\">http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ol>\n<li><p>安装 Python 2.7</p>\n</li>\n<li><p>下载 <a href=\"https://github.com/idapython/bin/raw/master/idapython-6.9.0-python2.7-mac.zip\">https://github.com/idapython/bin/raw/master/idapython-6.9.0-python2.7-mac.zip</a> 并解压</p>\n</li>\n<li><p>将 Python 内的所有内容复制到 IDA 根目录的 Python 内（没有就新建）</p>\n</li>\n<li><p>将 Plugins 内的所有内容复制到 IDA 根目录的 Plugins 内</p>\n</li>\n<li><p>将 python.cfg 复制到 IDA 根目录的 cfg 内</p>\n</li>\n<li><p>重启 IDA，File 菜单下面会有 Python Command 选项，而且 Script files 选项中可以选择 py 文件</p>\n</li>\n</ol>\n<p>python 目录中的四个文件：</p>\n<ul>\n<li>init.py 是初始的基础文件</li>\n<li>idaapi.py 中导入了 _idaapi 模块，这个以下划线开始的 idaapi 模块就是对 IDA API 的低层封装，idaapi.py 则是作为调用 IDA API 的用户层</li>\n<li>idautils.py 提供了一些高级功能的函数</li>\n<li>idc.py 则是对 IDA 内置的 IDC 脚本语言的兼容</li>\n</ul>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><p>调用 idapython 脚本时总是要鼠标点来点去很不方便，在官网找了找 </p>\n<p><a href=\"https://www.hex-rays.com/products/ida/support/idadoc/417.shtml\">https://www.hex-rays.com/products/ida/support/idadoc/417.shtml</a></p>\n<p>该页面提供了命令行使用 ida 时的可用参数，比较常用的有：</p>\n<p>-A 让 ida 自动运行，不需要人工干预。也就是在处理的过程中不会弹出交互窗口，但是如果从来没有使用过 ida 那么许可协议的窗口无论你是否使用这个参数都将会显示。</p>\n<p>-c 参数会删除所有与参数中指定的文件相关的数据库，并且生成一个新的数据库。</p>\n<p>-S 参数用于指定 ida 在分析完数据之后执行的 idc 脚本，<strong>注意：该选项和参数之间没有空格</strong>，并且搜索目录为 ida 目录下的 idc 目录。</p>\n<p>-B 参数指定批量模式，等效于-A –c  –Sanylysis.idc.在分析完成后会自动生成相关的数据库和 asm 代码。并且在最后关闭 ida，以保存新的数据库。</p>\n<p><em><a href=\"http://www.h4ck.org.cn/2012/03/ida-batch-mode/\">这篇文章</a><sup>2</sup>比较详细地讲解了批量模式的用法</em> </p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><figure class=\"highlight py\"><figcaption><span>test.py</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> idautils <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> idaapi <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">import</span> idc</div><div class=\"line\"></div><div class=\"line\">idc.Wait()\t<span class=\"comment\"># idaapi.autoWait()</span></div><div class=\"line\"></div><div class=\"line\">ea = BeginEA()</div><div class=\"line\">dll_functions = []</div><div class=\"line\"></div><div class=\"line\">fp = open(<span class=\"string\">\"fun_output.txt\"</span>, <span class=\"string\">\"w\"</span>)</div><div class=\"line\">fp.write(<span class=\"string\">\"check\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> funcea <span class=\"keyword\">in</span> Functions(SegStart(ea), SegEnd(ea)):</div><div class=\"line\">    functionName = GetFunctionName(funcea)</div><div class=\"line\">    dll_functions.append(functionName)</div><div class=\"line\">    fp.write(functionName)</div><div class=\"line\">    print(functionName)</div><div class=\"line\">fp.close()</div><div class=\"line\"></div><div class=\"line\">idc.Exit(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<p><em>其中<code>idc.Wait()</code>表示带有<code>-A</code>参数时，等待 ida 自动分析过程完成后再运行后续脚本，<code>idc.Exit(0)</code>表示脚本运行结束后自动关闭 ida</em></p>\n<p>不过在实际测试时，<code>idaq -c -A -Stest.py heap_test</code>失败且没有任何错误提示，参阅了<a href=\"http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/\">Using IDAPython to Make Your Life Easier: Part 6\n</a><sup>3</sup>，脚本和命令都没什么问题，不知是不是因为 Demo 版的缘故。。。</p>\n<p><code>idaq -c -Stest.py heap_test</code>倒是一切正常，只好暂且如此了。。。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"http://blog.csdn.net/zhangmiaoping23/article/details/14521995\">http://blog.csdn.net/zhangmiaoping23/article/details/14521995</a></li>\n<li><a href=\"http://www.h4ck.org.cn/2012/03/ida-batch-mode/\">http://www.h4ck.org.cn/2012/03/ida-batch-mode/</a></li>\n<li><a href=\"http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/\">http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/</a></li>\n</ol>\n"},{"title":"idapython-elf-gadget","date":"2016-10-08T03:38:29.000Z","_content":"\n# 目录结构\n```md\n.\n├── batch.py\n├── detail\n│   ├── heap_test.txt\n│   ├── heap_test_static.txt\n│   ├── libc2.21.txt\n│   ├── ls.txt\n│   ├── mv.txt\n│   ├── stack_test.txt\n│   └── stack_test_static.txt\n├── elf\n│   ├── heap_test\n│   ├── heap_test_static\n│   ├── libc2.21\n│   ├── ls\n│   ├── mv\n│   ├── stack_test\n│   └── stack_test_static\n├── fragment\n│   ├── heap_test.txt\n│   ├── heap_test_static.txt\n│   ├── libc2.21.txt\n│   ├── ls.txt\n│   ├── mv.txt\n│   ├── stack_test.txt\n│   └── stack_test_static.txt\n├── ganalyzer.py\n├── gcollector.py\n├── gvalidator.py\n├── lib\n│   ├── __init__.py\n│   ├── __init__.pyc\n│   ├── classifier.py\n│   ├── classifier.pyc\n│   ├── extra_archinfo.py\n│   ├── extra_archinfo.pyc\n│   ├── gadget.py\n│   ├── gadget.pyc\n│   ├── utils.py\n│   ├── utils.pyc\n│   ├── validator.py\n│   └── validator.pyc\n├── pin\n│   ├── heap_test.txt\n│   ├── heap_test_static.txt\n│   ├── libc2.21.txt\n│   ├── ls.txt\n│   ├── mv.txt\n│   ├── stack_test.txt\n│   └── stack_test_static.txt\n└── result.txt\n\n5 directories, 46 files\n```\n\n\n# 执行流程\n![img](/images/idapython-elf-gadget.png)\n\n\n# 具体步骤\n1. 将要分析的 elf 文件放入 elf 目录\n2. 在主目录运行`python batch.py`\n3. 脚本会批量使用 ida 静态分析 elf 目录内的所有 elf 文件并在完成后自动关闭 ida\n4. 由于版本功能限制，无法完全自动化，每个 elf 需要在弹窗时手动回车确认 2 次\n5. 中间结果分别保存于 fragment, detail 和 pin 目录，最终结果保存于主目录下的 result.txt\n\n# 主要模块\n\n## gcollector.py\n\n### 目标\n\n找到所有间接跳转（IBR)，再按 IBR 所在地址回溯，直到上一条跳转指令为止，输出其间所有可能构成 gadget 的指令片段，按不同文件名保存到 fragment 目录 \n\n### 例如\n\n```sh\n> length: 1\n|-- .fini:80485B7\tretn\nc3\n----------------------------------------\n> length: 2\n|-- .fini:80485B6\tpop     ebx\n|-- .fini:80485B7\tretn\n5bc3\n----------------------------------------\n> length: 3\n|-- .fini:80485B3\tadd     esp, 8\n|-- .fini:80485B6\tpop     ebx\n|-- .fini:80485B7\tretn\n83c4085bc3\n----------------------------------------\n> length: 4\n|-- .fini:80485AD\tadd     ebx, 1217h\n|-- .fini:80485B3\tadd     esp, 8\n|-- .fini:80485B6\tpop     ebx\n|-- .fini:80485B7\tretn\n81c31712000083c4085bc3\n```\n\n回溯到第 5 条指令时为另一条跳转指令，所以以 `80485B7\tretn`为结尾所有可能为 gadget 的指令片段一共只有 4 种\n\n## 思路\n\n1. 利用 ida-python 提供的 api `Segments()`获得所有段起始地址，`SegEnd()`获取段结束地址\n2. 根据对应段的起止地址，利用`Heads(start, end)`得到段内所有指令的起始地址\n3. 利用`disasm(head)`函数获得指令的机器码和汇编代码\n4. 通过正则表达式和机器码判断指令是否为`间接跳转指令`并按如上目标格式保存，同时加上`call-preceded`和`syscall`等标记\n5. 对总指令数等数据进行统计，同时利用`Functions()`收集所有函数入口\n\n\n## gvalidator.py\n\n### 目标\n\n以每个间接跳转为单位，对所有以该间接跳转为结尾的指令片段进行判断：\n\n1. 是否存在 functional gadget， 最大长度多少\n2. 是否存在 nop gadget， 最大长度多少\n3. 是否为 call-preceded gadget\n\n### 思路\n\n1. 遍历 fragment 目录中所有 txt 文件并依次进行逐行读取，根据`+>|-*`等预设标记判断该行内容类型，然后收集对应长度的指令片段、片段内部遭到修改的寄存器\n2. 读取到整个指令片段的机器码时，利用 Q 的 api `classifier.GadgetClassifier()`判断片段是否为 functional gadget，并统计相关数据\n3. 若非 functional gadget，根据可容忍的最大寄存器修改数量判断可否归为 nop gadget，并统计相关数据\n4. 按文件名保存所有统计数据到 detail 目录\n5. 另外按照 pin 动态分析所需的输入数据格式将对应部分数据保存到 pin 目录\n\n\n## ganalyzer.py\n\n### 目标\n\n将 detail 目录中所有统计数据汇总到 result.txt 中\n\n### 输出样例\n\n```py\nheap_test, heap_test_static, libc2, ls, mv, stack_test, stack_test_static\n+ Files: 7\n\n+ [AVG]\n|-- Functions: 794.00\n|-- Instructions: 86870.29\n|-- Branch instructions: 17118.00\n|-- Indirect branch instructions: 1609.29\n    |-- ret: 1211.43 (9 ~ 5587)\n    |-- jmp: 88.00 (1 ~ 408)\n    |-- call: 284.43 (4 ~ 1300)\n    |-- system call: 90.57 (0 ~ 462)\n    |-- call preceded: 284.43 (4 ~ 1300)\n|-- Functional gadgets: 6145.29\n    |-- length: 4.15 (0 ~ 48)\n|-- Nop gadgets: 3634.14\n    |-- length: 2.07 (0 ~ 71)\n|-- Normal code fragments: 924.57\n    |-- length: 9.01 (0 ~ 80)\n    \n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/idapython-elf-gadget.md","raw":"---\ntitle: idapython-elf-gadget\ndate: 2016-10-08 11:38:29\ncategory: ida\ntags: [idapython, python, ida]\n---\n\n# 目录结构\n```md\n.\n├── batch.py\n├── detail\n│   ├── heap_test.txt\n│   ├── heap_test_static.txt\n│   ├── libc2.21.txt\n│   ├── ls.txt\n│   ├── mv.txt\n│   ├── stack_test.txt\n│   └── stack_test_static.txt\n├── elf\n│   ├── heap_test\n│   ├── heap_test_static\n│   ├── libc2.21\n│   ├── ls\n│   ├── mv\n│   ├── stack_test\n│   └── stack_test_static\n├── fragment\n│   ├── heap_test.txt\n│   ├── heap_test_static.txt\n│   ├── libc2.21.txt\n│   ├── ls.txt\n│   ├── mv.txt\n│   ├── stack_test.txt\n│   └── stack_test_static.txt\n├── ganalyzer.py\n├── gcollector.py\n├── gvalidator.py\n├── lib\n│   ├── __init__.py\n│   ├── __init__.pyc\n│   ├── classifier.py\n│   ├── classifier.pyc\n│   ├── extra_archinfo.py\n│   ├── extra_archinfo.pyc\n│   ├── gadget.py\n│   ├── gadget.pyc\n│   ├── utils.py\n│   ├── utils.pyc\n│   ├── validator.py\n│   └── validator.pyc\n├── pin\n│   ├── heap_test.txt\n│   ├── heap_test_static.txt\n│   ├── libc2.21.txt\n│   ├── ls.txt\n│   ├── mv.txt\n│   ├── stack_test.txt\n│   └── stack_test_static.txt\n└── result.txt\n\n5 directories, 46 files\n```\n\n\n# 执行流程\n![img](/images/idapython-elf-gadget.png)\n\n\n# 具体步骤\n1. 将要分析的 elf 文件放入 elf 目录\n2. 在主目录运行`python batch.py`\n3. 脚本会批量使用 ida 静态分析 elf 目录内的所有 elf 文件并在完成后自动关闭 ida\n4. 由于版本功能限制，无法完全自动化，每个 elf 需要在弹窗时手动回车确认 2 次\n5. 中间结果分别保存于 fragment, detail 和 pin 目录，最终结果保存于主目录下的 result.txt\n\n# 主要模块\n\n## gcollector.py\n\n### 目标\n\n找到所有间接跳转（IBR)，再按 IBR 所在地址回溯，直到上一条跳转指令为止，输出其间所有可能构成 gadget 的指令片段，按不同文件名保存到 fragment 目录 \n\n### 例如\n\n```sh\n> length: 1\n|-- .fini:80485B7\tretn\nc3\n----------------------------------------\n> length: 2\n|-- .fini:80485B6\tpop     ebx\n|-- .fini:80485B7\tretn\n5bc3\n----------------------------------------\n> length: 3\n|-- .fini:80485B3\tadd     esp, 8\n|-- .fini:80485B6\tpop     ebx\n|-- .fini:80485B7\tretn\n83c4085bc3\n----------------------------------------\n> length: 4\n|-- .fini:80485AD\tadd     ebx, 1217h\n|-- .fini:80485B3\tadd     esp, 8\n|-- .fini:80485B6\tpop     ebx\n|-- .fini:80485B7\tretn\n81c31712000083c4085bc3\n```\n\n回溯到第 5 条指令时为另一条跳转指令，所以以 `80485B7\tretn`为结尾所有可能为 gadget 的指令片段一共只有 4 种\n\n## 思路\n\n1. 利用 ida-python 提供的 api `Segments()`获得所有段起始地址，`SegEnd()`获取段结束地址\n2. 根据对应段的起止地址，利用`Heads(start, end)`得到段内所有指令的起始地址\n3. 利用`disasm(head)`函数获得指令的机器码和汇编代码\n4. 通过正则表达式和机器码判断指令是否为`间接跳转指令`并按如上目标格式保存，同时加上`call-preceded`和`syscall`等标记\n5. 对总指令数等数据进行统计，同时利用`Functions()`收集所有函数入口\n\n\n## gvalidator.py\n\n### 目标\n\n以每个间接跳转为单位，对所有以该间接跳转为结尾的指令片段进行判断：\n\n1. 是否存在 functional gadget， 最大长度多少\n2. 是否存在 nop gadget， 最大长度多少\n3. 是否为 call-preceded gadget\n\n### 思路\n\n1. 遍历 fragment 目录中所有 txt 文件并依次进行逐行读取，根据`+>|-*`等预设标记判断该行内容类型，然后收集对应长度的指令片段、片段内部遭到修改的寄存器\n2. 读取到整个指令片段的机器码时，利用 Q 的 api `classifier.GadgetClassifier()`判断片段是否为 functional gadget，并统计相关数据\n3. 若非 functional gadget，根据可容忍的最大寄存器修改数量判断可否归为 nop gadget，并统计相关数据\n4. 按文件名保存所有统计数据到 detail 目录\n5. 另外按照 pin 动态分析所需的输入数据格式将对应部分数据保存到 pin 目录\n\n\n## ganalyzer.py\n\n### 目标\n\n将 detail 目录中所有统计数据汇总到 result.txt 中\n\n### 输出样例\n\n```py\nheap_test, heap_test_static, libc2, ls, mv, stack_test, stack_test_static\n+ Files: 7\n\n+ [AVG]\n|-- Functions: 794.00\n|-- Instructions: 86870.29\n|-- Branch instructions: 17118.00\n|-- Indirect branch instructions: 1609.29\n    |-- ret: 1211.43 (9 ~ 5587)\n    |-- jmp: 88.00 (1 ~ 408)\n    |-- call: 284.43 (4 ~ 1300)\n    |-- system call: 90.57 (0 ~ 462)\n    |-- call preceded: 284.43 (4 ~ 1300)\n|-- Functional gadgets: 6145.29\n    |-- length: 4.15 (0 ~ 48)\n|-- Nop gadgets: 3634.14\n    |-- length: 2.07 (0 ~ 71)\n|-- Normal code fragments: 924.57\n    |-- length: 9.01 (0 ~ 80)\n    \n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"idapython-elf-gadget","published":1,"updated":"2016-10-09T02:59:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fuv000r3npxlp2bpqmn","content":"<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── batch.py</div><div class=\"line\">├── detail</div><div class=\"line\">│   ├── heap_test.txt</div><div class=\"line\">│   ├── heap<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">│   ├── libc2.21.txt</div><div class=\"line\">│   ├── ls.txt</div><div class=\"line\">│   ├── mv.txt</div><div class=\"line\">│   ├── stack_test.txt</div><div class=\"line\">│   └── stack<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">├── elf</div><div class=\"line\">│   ├── heap_test</div><div class=\"line\">│   ├── heap<span class=\"emphasis\">_test_</span>static</div><div class=\"line\">│   ├── libc2.21</div><div class=\"line\">│   ├── ls</div><div class=\"line\">│   ├── mv</div><div class=\"line\">│   ├── stack_test</div><div class=\"line\">│   └── stack<span class=\"emphasis\">_test_</span>static</div><div class=\"line\">├── fragment</div><div class=\"line\">│   ├── heap_test.txt</div><div class=\"line\">│   ├── heap<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">│   ├── libc2.21.txt</div><div class=\"line\">│   ├── ls.txt</div><div class=\"line\">│   ├── mv.txt</div><div class=\"line\">│   ├── stack_test.txt</div><div class=\"line\">│   └── stack<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">├── ganalyzer.py</div><div class=\"line\">├── gcollector.py</div><div class=\"line\">├── gvalidator.py</div><div class=\"line\">├── lib</div><div class=\"line\">│   ├── <span class=\"strong\">__init__</span>.py</div><div class=\"line\">│   ├── <span class=\"strong\">__init__</span>.pyc</div><div class=\"line\">│   ├── classifier.py</div><div class=\"line\">│   ├── classifier.pyc</div><div class=\"line\">│   ├── extra_archinfo.py</div><div class=\"line\">│   ├── extra_archinfo.pyc</div><div class=\"line\">│   ├── gadget.py</div><div class=\"line\">│   ├── gadget.pyc</div><div class=\"line\">│   ├── utils.py</div><div class=\"line\">│   ├── utils.pyc</div><div class=\"line\">│   ├── validator.py</div><div class=\"line\">│   └── validator.pyc</div><div class=\"line\">├── pin</div><div class=\"line\">│   ├── heap_test.txt</div><div class=\"line\">│   ├── heap<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">│   ├── libc2.21.txt</div><div class=\"line\">│   ├── ls.txt</div><div class=\"line\">│   ├── mv.txt</div><div class=\"line\">│   ├── stack_test.txt</div><div class=\"line\">│   └── stack<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">└── result.txt</div><div class=\"line\"></div><div class=\"line\">5 directories, 46 files</div></pre></td></tr></table></figure>\n<h1 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h1><p><img src=\"/images/idapython-elf-gadget.png\" alt=\"img\"></p>\n<h1 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h1><ol>\n<li>将要分析的 elf 文件放入 elf 目录</li>\n<li>在主目录运行<code>python batch.py</code></li>\n<li>脚本会批量使用 ida 静态分析 elf 目录内的所有 elf 文件并在完成后自动关闭 ida</li>\n<li>由于版本功能限制，无法完全自动化，每个 elf 需要在弹窗时手动回车确认 2 次</li>\n<li>中间结果分别保存于 fragment, detail 和 pin 目录，最终结果保存于主目录下的 result.txt</li>\n</ol>\n<h1 id=\"主要模块\"><a href=\"#主要模块\" class=\"headerlink\" title=\"主要模块\"></a>主要模块</h1><h2 id=\"gcollector-py\"><a href=\"#gcollector-py\" class=\"headerlink\" title=\"gcollector.py\"></a>gcollector.py</h2><h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>找到所有间接跳转（IBR)，再按 IBR 所在地址回溯，直到上一条跳转指令为止，输出其间所有可能构成 gadget 的指令片段，按不同文件名保存到 fragment 目录 </p>\n<h3 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt; length: 1</div><div class=\"line\">|-- .fini:80485B7\tretn</div><div class=\"line\">c3</div><div class=\"line\">----------------------------------------</div><div class=\"line\">&gt; length: 2</div><div class=\"line\">|-- .fini:80485B6\tpop     ebx</div><div class=\"line\">|-- .fini:80485B7\tretn</div><div class=\"line\">5bc3</div><div class=\"line\">----------------------------------------</div><div class=\"line\">&gt; length: 3</div><div class=\"line\">|-- .fini:80485B3\tadd     esp, 8</div><div class=\"line\">|-- .fini:80485B6\tpop     ebx</div><div class=\"line\">|-- .fini:80485B7\tretn</div><div class=\"line\">83c4085bc3</div><div class=\"line\">----------------------------------------</div><div class=\"line\">&gt; length: 4</div><div class=\"line\">|-- .fini:80485AD\tadd     ebx, 1217h</div><div class=\"line\">|-- .fini:80485B3\tadd     esp, 8</div><div class=\"line\">|-- .fini:80485B6\tpop     ebx</div><div class=\"line\">|-- .fini:80485B7\tretn</div><div class=\"line\">81c31712000083c4085bc3</div></pre></td></tr></table></figure>\n<p>回溯到第 5 条指令时为另一条跳转指令，所以以 <code>80485B7    retn</code>为结尾所有可能为 gadget 的指令片段一共只有 4 种</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>利用 ida-python 提供的 api <code>Segments()</code>获得所有段起始地址，<code>SegEnd()</code>获取段结束地址</li>\n<li>根据对应段的起止地址，利用<code>Heads(start, end)</code>得到段内所有指令的起始地址</li>\n<li>利用<code>disasm(head)</code>函数获得指令的机器码和汇编代码</li>\n<li>通过正则表达式和机器码判断指令是否为<code>间接跳转指令</code>并按如上目标格式保存，同时加上<code>call-preceded</code>和<code>syscall</code>等标记</li>\n<li>对总指令数等数据进行统计，同时利用<code>Functions()</code>收集所有函数入口</li>\n</ol>\n<h2 id=\"gvalidator-py\"><a href=\"#gvalidator-py\" class=\"headerlink\" title=\"gvalidator.py\"></a>gvalidator.py</h2><h3 id=\"目标-1\"><a href=\"#目标-1\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>以每个间接跳转为单位，对所有以该间接跳转为结尾的指令片段进行判断：</p>\n<ol>\n<li>是否存在 functional gadget， 最大长度多少</li>\n<li>是否存在 nop gadget， 最大长度多少</li>\n<li>是否为 call-preceded gadget</li>\n</ol>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>遍历 fragment 目录中所有 txt 文件并依次进行逐行读取，根据<code>+&gt;|-*</code>等预设标记判断该行内容类型，然后收集对应长度的指令片段、片段内部遭到修改的寄存器</li>\n<li>读取到整个指令片段的机器码时，利用 Q 的 api <code>classifier.GadgetClassifier()</code>判断片段是否为 functional gadget，并统计相关数据</li>\n<li>若非 functional gadget，根据可容忍的最大寄存器修改数量判断可否归为 nop gadget，并统计相关数据</li>\n<li>按文件名保存所有统计数据到 detail 目录</li>\n<li>另外按照 pin 动态分析所需的输入数据格式将对应部分数据保存到 pin 目录</li>\n</ol>\n<h2 id=\"ganalyzer-py\"><a href=\"#ganalyzer-py\" class=\"headerlink\" title=\"ganalyzer.py\"></a>ganalyzer.py</h2><h3 id=\"目标-2\"><a href=\"#目标-2\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>将 detail 目录中所有统计数据汇总到 result.txt 中</p>\n<h3 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\">heap_test, heap_test_static, libc2, ls, mv, stack_test, stack_test_static</div><div class=\"line\">+ Files: <span class=\"number\">7</span></div><div class=\"line\"></div><div class=\"line\">+ [AVG]</div><div class=\"line\">|-- Functions: <span class=\"number\">794.00</span></div><div class=\"line\">|-- Instructions: <span class=\"number\">86870.29</span></div><div class=\"line\">|-- Branch instructions: <span class=\"number\">17118.00</span></div><div class=\"line\">|-- Indirect branch instructions: <span class=\"number\">1609.29</span></div><div class=\"line\">    |-- ret: <span class=\"number\">1211.43</span> (<span class=\"number\">9</span> ~ <span class=\"number\">5587</span>)</div><div class=\"line\">    |-- jmp: <span class=\"number\">88.00</span> (<span class=\"number\">1</span> ~ <span class=\"number\">408</span>)</div><div class=\"line\">    |-- call: <span class=\"number\">284.43</span> (<span class=\"number\">4</span> ~ <span class=\"number\">1300</span>)</div><div class=\"line\">    |-- system call: <span class=\"number\">90.57</span> (<span class=\"number\">0</span> ~ <span class=\"number\">462</span>)</div><div class=\"line\">    |-- call preceded: <span class=\"number\">284.43</span> (<span class=\"number\">4</span> ~ <span class=\"number\">1300</span>)</div><div class=\"line\">|-- Functional gadgets: <span class=\"number\">6145.29</span></div><div class=\"line\">    |-- length: <span class=\"number\">4.15</span> (<span class=\"number\">0</span> ~ <span class=\"number\">48</span>)</div><div class=\"line\">|-- Nop gadgets: <span class=\"number\">3634.14</span></div><div class=\"line\">    |-- length: <span class=\"number\">2.07</span> (<span class=\"number\">0</span> ~ <span class=\"number\">71</span>)</div><div class=\"line\">|-- Normal code fragments: <span class=\"number\">924.57</span></div><div class=\"line\">    |-- length: <span class=\"number\">9.01</span> (<span class=\"number\">0</span> ~ <span class=\"number\">80</span>)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── batch.py</div><div class=\"line\">├── detail</div><div class=\"line\">│   ├── heap_test.txt</div><div class=\"line\">│   ├── heap<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">│   ├── libc2.21.txt</div><div class=\"line\">│   ├── ls.txt</div><div class=\"line\">│   ├── mv.txt</div><div class=\"line\">│   ├── stack_test.txt</div><div class=\"line\">│   └── stack<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">├── elf</div><div class=\"line\">│   ├── heap_test</div><div class=\"line\">│   ├── heap<span class=\"emphasis\">_test_</span>static</div><div class=\"line\">│   ├── libc2.21</div><div class=\"line\">│   ├── ls</div><div class=\"line\">│   ├── mv</div><div class=\"line\">│   ├── stack_test</div><div class=\"line\">│   └── stack<span class=\"emphasis\">_test_</span>static</div><div class=\"line\">├── fragment</div><div class=\"line\">│   ├── heap_test.txt</div><div class=\"line\">│   ├── heap<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">│   ├── libc2.21.txt</div><div class=\"line\">│   ├── ls.txt</div><div class=\"line\">│   ├── mv.txt</div><div class=\"line\">│   ├── stack_test.txt</div><div class=\"line\">│   └── stack<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">├── ganalyzer.py</div><div class=\"line\">├── gcollector.py</div><div class=\"line\">├── gvalidator.py</div><div class=\"line\">├── lib</div><div class=\"line\">│   ├── <span class=\"strong\">__init__</span>.py</div><div class=\"line\">│   ├── <span class=\"strong\">__init__</span>.pyc</div><div class=\"line\">│   ├── classifier.py</div><div class=\"line\">│   ├── classifier.pyc</div><div class=\"line\">│   ├── extra_archinfo.py</div><div class=\"line\">│   ├── extra_archinfo.pyc</div><div class=\"line\">│   ├── gadget.py</div><div class=\"line\">│   ├── gadget.pyc</div><div class=\"line\">│   ├── utils.py</div><div class=\"line\">│   ├── utils.pyc</div><div class=\"line\">│   ├── validator.py</div><div class=\"line\">│   └── validator.pyc</div><div class=\"line\">├── pin</div><div class=\"line\">│   ├── heap_test.txt</div><div class=\"line\">│   ├── heap<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">│   ├── libc2.21.txt</div><div class=\"line\">│   ├── ls.txt</div><div class=\"line\">│   ├── mv.txt</div><div class=\"line\">│   ├── stack_test.txt</div><div class=\"line\">│   └── stack<span class=\"emphasis\">_test_</span>static.txt</div><div class=\"line\">└── result.txt</div><div class=\"line\"></div><div class=\"line\">5 directories, 46 files</div></pre></td></tr></table></figure>\n<h1 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h1><p><img src=\"/images/idapython-elf-gadget.png\" alt=\"img\"></p>\n<h1 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h1><ol>\n<li>将要分析的 elf 文件放入 elf 目录</li>\n<li>在主目录运行<code>python batch.py</code></li>\n<li>脚本会批量使用 ida 静态分析 elf 目录内的所有 elf 文件并在完成后自动关闭 ida</li>\n<li>由于版本功能限制，无法完全自动化，每个 elf 需要在弹窗时手动回车确认 2 次</li>\n<li>中间结果分别保存于 fragment, detail 和 pin 目录，最终结果保存于主目录下的 result.txt</li>\n</ol>\n<h1 id=\"主要模块\"><a href=\"#主要模块\" class=\"headerlink\" title=\"主要模块\"></a>主要模块</h1><h2 id=\"gcollector-py\"><a href=\"#gcollector-py\" class=\"headerlink\" title=\"gcollector.py\"></a>gcollector.py</h2><h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>找到所有间接跳转（IBR)，再按 IBR 所在地址回溯，直到上一条跳转指令为止，输出其间所有可能构成 gadget 的指令片段，按不同文件名保存到 fragment 目录 </p>\n<h3 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt; length: 1</div><div class=\"line\">|-- .fini:80485B7\tretn</div><div class=\"line\">c3</div><div class=\"line\">----------------------------------------</div><div class=\"line\">&gt; length: 2</div><div class=\"line\">|-- .fini:80485B6\tpop     ebx</div><div class=\"line\">|-- .fini:80485B7\tretn</div><div class=\"line\">5bc3</div><div class=\"line\">----------------------------------------</div><div class=\"line\">&gt; length: 3</div><div class=\"line\">|-- .fini:80485B3\tadd     esp, 8</div><div class=\"line\">|-- .fini:80485B6\tpop     ebx</div><div class=\"line\">|-- .fini:80485B7\tretn</div><div class=\"line\">83c4085bc3</div><div class=\"line\">----------------------------------------</div><div class=\"line\">&gt; length: 4</div><div class=\"line\">|-- .fini:80485AD\tadd     ebx, 1217h</div><div class=\"line\">|-- .fini:80485B3\tadd     esp, 8</div><div class=\"line\">|-- .fini:80485B6\tpop     ebx</div><div class=\"line\">|-- .fini:80485B7\tretn</div><div class=\"line\">81c31712000083c4085bc3</div></pre></td></tr></table></figure>\n<p>回溯到第 5 条指令时为另一条跳转指令，所以以 <code>80485B7    retn</code>为结尾所有可能为 gadget 的指令片段一共只有 4 种</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>利用 ida-python 提供的 api <code>Segments()</code>获得所有段起始地址，<code>SegEnd()</code>获取段结束地址</li>\n<li>根据对应段的起止地址，利用<code>Heads(start, end)</code>得到段内所有指令的起始地址</li>\n<li>利用<code>disasm(head)</code>函数获得指令的机器码和汇编代码</li>\n<li>通过正则表达式和机器码判断指令是否为<code>间接跳转指令</code>并按如上目标格式保存，同时加上<code>call-preceded</code>和<code>syscall</code>等标记</li>\n<li>对总指令数等数据进行统计，同时利用<code>Functions()</code>收集所有函数入口</li>\n</ol>\n<h2 id=\"gvalidator-py\"><a href=\"#gvalidator-py\" class=\"headerlink\" title=\"gvalidator.py\"></a>gvalidator.py</h2><h3 id=\"目标-1\"><a href=\"#目标-1\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>以每个间接跳转为单位，对所有以该间接跳转为结尾的指令片段进行判断：</p>\n<ol>\n<li>是否存在 functional gadget， 最大长度多少</li>\n<li>是否存在 nop gadget， 最大长度多少</li>\n<li>是否为 call-preceded gadget</li>\n</ol>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>遍历 fragment 目录中所有 txt 文件并依次进行逐行读取，根据<code>+&gt;|-*</code>等预设标记判断该行内容类型，然后收集对应长度的指令片段、片段内部遭到修改的寄存器</li>\n<li>读取到整个指令片段的机器码时，利用 Q 的 api <code>classifier.GadgetClassifier()</code>判断片段是否为 functional gadget，并统计相关数据</li>\n<li>若非 functional gadget，根据可容忍的最大寄存器修改数量判断可否归为 nop gadget，并统计相关数据</li>\n<li>按文件名保存所有统计数据到 detail 目录</li>\n<li>另外按照 pin 动态分析所需的输入数据格式将对应部分数据保存到 pin 目录</li>\n</ol>\n<h2 id=\"ganalyzer-py\"><a href=\"#ganalyzer-py\" class=\"headerlink\" title=\"ganalyzer.py\"></a>ganalyzer.py</h2><h3 id=\"目标-2\"><a href=\"#目标-2\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>将 detail 目录中所有统计数据汇总到 result.txt 中</p>\n<h3 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\">heap_test, heap_test_static, libc2, ls, mv, stack_test, stack_test_static</div><div class=\"line\">+ Files: <span class=\"number\">7</span></div><div class=\"line\"></div><div class=\"line\">+ [AVG]</div><div class=\"line\">|-- Functions: <span class=\"number\">794.00</span></div><div class=\"line\">|-- Instructions: <span class=\"number\">86870.29</span></div><div class=\"line\">|-- Branch instructions: <span class=\"number\">17118.00</span></div><div class=\"line\">|-- Indirect branch instructions: <span class=\"number\">1609.29</span></div><div class=\"line\">    |-- ret: <span class=\"number\">1211.43</span> (<span class=\"number\">9</span> ~ <span class=\"number\">5587</span>)</div><div class=\"line\">    |-- jmp: <span class=\"number\">88.00</span> (<span class=\"number\">1</span> ~ <span class=\"number\">408</span>)</div><div class=\"line\">    |-- call: <span class=\"number\">284.43</span> (<span class=\"number\">4</span> ~ <span class=\"number\">1300</span>)</div><div class=\"line\">    |-- system call: <span class=\"number\">90.57</span> (<span class=\"number\">0</span> ~ <span class=\"number\">462</span>)</div><div class=\"line\">    |-- call preceded: <span class=\"number\">284.43</span> (<span class=\"number\">4</span> ~ <span class=\"number\">1300</span>)</div><div class=\"line\">|-- Functional gadgets: <span class=\"number\">6145.29</span></div><div class=\"line\">    |-- length: <span class=\"number\">4.15</span> (<span class=\"number\">0</span> ~ <span class=\"number\">48</span>)</div><div class=\"line\">|-- Nop gadgets: <span class=\"number\">3634.14</span></div><div class=\"line\">    |-- length: <span class=\"number\">2.07</span> (<span class=\"number\">0</span> ~ <span class=\"number\">71</span>)</div><div class=\"line\">|-- Normal code fragments: <span class=\"number\">924.57</span></div><div class=\"line\">    |-- length: <span class=\"number\">9.01</span> (<span class=\"number\">0</span> ~ <span class=\"number\">80</span>)</div></pre></td></tr></table></figure>\n"},{"title":"ionic 使用 popover 时的一点小问题","date":"2016-09-27T08:52:04.000Z","_content":"\n使用 ionic 附带的 ngResource 时需要在 index.html 中加上\n\n```\n    <script src=\"lib/ionic/js/angular/angular-resource.js\"></script>\n```\n\n否则会报错\n\n另外，[官方文档](http://ionicframework.com/docs/api/service/$ionicPopover/)中关于使用`popover`独立 html 模板的格式有点小问题：\n\n```\n<script id=\"my-popover.html\" type=\"text/ng-template\">\n  <ion-popover-view>\n    <ion-header-bar>\n      <h1 class=\"title\">My Popover Title</h1>\n    </ion-header-bar>\n    <ion-content>\n      Hello!\n    </ion-content>\n  </ion-popover-view>\n</script>\n```\n\n需改为\n\n```\n<ion-popover-view>\n  <ion-header-bar>\n    <h1 class=\"title\">My Popover Title</h1>\n  </ion-header-bar>\n  <ion-content>\n    Hello!qwew\n  </ion-content>\n</ion-popover-view>\n```\n\n否则会无法找到对应 template 而产生`Error: popoverEle[0] is undefined`\n\n","source":"_posts/ionic-popover.md","raw":"---\ntitle: ionic 使用 popover 时的一点小问题\ndate: 2016-09-27 16:52:04\ncategory: ionic\ntags: [JavaScript, ionic, AngularJS, ngResource]\n---\n\n使用 ionic 附带的 ngResource 时需要在 index.html 中加上\n\n```\n    <script src=\"lib/ionic/js/angular/angular-resource.js\"></script>\n```\n\n否则会报错\n\n另外，[官方文档](http://ionicframework.com/docs/api/service/$ionicPopover/)中关于使用`popover`独立 html 模板的格式有点小问题：\n\n```\n<script id=\"my-popover.html\" type=\"text/ng-template\">\n  <ion-popover-view>\n    <ion-header-bar>\n      <h1 class=\"title\">My Popover Title</h1>\n    </ion-header-bar>\n    <ion-content>\n      Hello!\n    </ion-content>\n  </ion-popover-view>\n</script>\n```\n\n需改为\n\n```\n<ion-popover-view>\n  <ion-header-bar>\n    <h1 class=\"title\">My Popover Title</h1>\n  </ion-header-bar>\n  <ion-content>\n    Hello!qwew\n  </ion-content>\n</ion-popover-view>\n```\n\n否则会无法找到对应 template 而产生`Error: popoverEle[0] is undefined`\n\n","slug":"ionic-popover","published":1,"updated":"2016-09-29T08:58:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fux000s3npx3i7tq3na","content":"<p>使用 ionic 附带的 ngResource 时需要在 index.html 中加上</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/ionic/js/angular/angular-resource.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>否则会报错</p>\n<p>另外，<a href=\"http://ionicframework.com/docs/api/service/$ionicPopover/\" target=\"_blank\" rel=\"external\">官方文档</a>中关于使用<code>popover</code>独立 html 模板的格式有点小问题：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"my-popover.html\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/ng-template\"</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\"></span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-popover-view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ion-header-bar</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>My Popover Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ion-header-bar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ion-content</span>&gt;</span></div><div class=\"line\">      Hello!</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ion-content</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ion-popover-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>需改为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ion-popover-view</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-header-bar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>My Popover Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ion-header-bar</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-content</span>&gt;</span></div><div class=\"line\">    Hello!qwew</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ion-content</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ion-popover-view</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>否则会无法找到对应 template 而产生<code>Error: popoverEle[0] is undefined</code></p>\n","excerpt":"","more":"<p>使用 ionic 附带的 ngResource 时需要在 index.html 中加上</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"lib/ionic/js/angular/angular-resource.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>否则会报错</p>\n<p>另外，<a href=\"http://ionicframework.com/docs/api/service/$ionicPopover/\">官方文档</a>中关于使用<code>popover</code>独立 html 模板的格式有点小问题：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"my-popover.html\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/ng-template\"</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-popover-view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ion-header-bar</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>My Popover Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ion-header-bar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ion-content</span>&gt;</span></div><div class=\"line\">      Hello!</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ion-content</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ion-popover-view</span>&gt;</span></div><div class=\"line\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>需改为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ion-popover-view</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-header-bar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>My Popover Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ion-header-bar</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-content</span>&gt;</span></div><div class=\"line\">    Hello!qwew</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ion-content</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ion-popover-view</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>否则会无法找到对应 template 而产生<code>Error: popoverEle[0] is undefined</code></p>\n"},{"title":"keystone","date":"2016-11-30T07:37:27.000Z","_content":"\nPython 的反汇编框架很多，尤其是 capstone 非常好用\n但是将常见汇编语句汇编成对应机器码的框架居然一直没找到\n难道没有其他懒得记机器码的人了吗╮(╯_╰)╭\n\n今天突然发现 capstone 的作者似乎居然早就听到了我的心声\n在上半年就发布了一个汇编框架 [keystone](http://www.keystone-engine.org/)\n`pip install keystone-engine` 就可以安装，用法和 capstone 非常相似\n甚至连毛病也一样，把动态库放到正确的位置才能正常使用...\n\n```\ncp /usr/local/lib/python2.7/site-packages/usr/local/Cellar/python/2.7.12_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/keystone/libkeystone.dylib /usr/local/lib/python2.7/site-packages/keystone/libkeystone.dylib\n```\n\n使用起来非常简单\n\n```\n#!/usr/bin/python\n\nfrom __future__ import print_function\nfrom keystone import *\n\n\ndef ks_asm(code, arch=KS_ARCH_X86, mode=KS_MODE_64, syntax=0):\n    ks = Ks(arch, mode)\n    if syntax != 0:\n        ks.syntax = syntax\n\n    encoding, count = ks.asm(code)\n    # print(encoding)\n\n    print('{} = '.format(code), end='')\n    for i in encoding:\n        print('{:02x} '.format(i), end='')\n\n\ncode = 'mov rax, rsp; syscall; nop; pop rbx; ret'\nks_asm(code)\n# mov rax, rsp; syscall; nop; pop rbx; ret = 48 89 e0 0f 05 90 5b c3\n\n```\n\n另外官方用例：https://github.com/keystone-engine/keystone/blob/master/bindings/python/sample.py\n\n简直爱死这个作者了 -0-\n另外发现他还有一个 CPU emulator 框架 [Unicorn](http://www.unicorn-engine.org/docs/tutorial.html)\n有时间了可以学习下\n\n\n","source":"_posts/keystone.md","raw":"---\ntitle: keystone\ndate: 2016-11-30 15:37:27\ncategory: rop\ntags: [python, rop, keystone, capstone, unicorn]\n---\n\nPython 的反汇编框架很多，尤其是 capstone 非常好用\n但是将常见汇编语句汇编成对应机器码的框架居然一直没找到\n难道没有其他懒得记机器码的人了吗╮(╯_╰)╭\n\n今天突然发现 capstone 的作者似乎居然早就听到了我的心声\n在上半年就发布了一个汇编框架 [keystone](http://www.keystone-engine.org/)\n`pip install keystone-engine` 就可以安装，用法和 capstone 非常相似\n甚至连毛病也一样，把动态库放到正确的位置才能正常使用...\n\n```\ncp /usr/local/lib/python2.7/site-packages/usr/local/Cellar/python/2.7.12_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/keystone/libkeystone.dylib /usr/local/lib/python2.7/site-packages/keystone/libkeystone.dylib\n```\n\n使用起来非常简单\n\n```\n#!/usr/bin/python\n\nfrom __future__ import print_function\nfrom keystone import *\n\n\ndef ks_asm(code, arch=KS_ARCH_X86, mode=KS_MODE_64, syntax=0):\n    ks = Ks(arch, mode)\n    if syntax != 0:\n        ks.syntax = syntax\n\n    encoding, count = ks.asm(code)\n    # print(encoding)\n\n    print('{} = '.format(code), end='')\n    for i in encoding:\n        print('{:02x} '.format(i), end='')\n\n\ncode = 'mov rax, rsp; syscall; nop; pop rbx; ret'\nks_asm(code)\n# mov rax, rsp; syscall; nop; pop rbx; ret = 48 89 e0 0f 05 90 5b c3\n\n```\n\n另外官方用例：https://github.com/keystone-engine/keystone/blob/master/bindings/python/sample.py\n\n简直爱死这个作者了 -0-\n另外发现他还有一个 CPU emulator 框架 [Unicorn](http://www.unicorn-engine.org/docs/tutorial.html)\n有时间了可以学习下\n\n\n","slug":"keystone","published":1,"updated":"2017-05-29T13:10:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fux000t3npx1noh5d7r","content":"<p>Python 的反汇编框架很多，尤其是 capstone 非常好用<br>但是将常见汇编语句汇编成对应机器码的框架居然一直没找到<br>难道没有其他懒得记机器码的人了吗╮(╯_╰)╭</p>\n<p>今天突然发现 capstone 的作者似乎居然早就听到了我的心声<br>在上半年就发布了一个汇编框架 <a href=\"http://www.keystone-engine.org/\" target=\"_blank\" rel=\"external\">keystone</a><br><code>pip install keystone-engine</code> 就可以安装，用法和 capstone 非常相似<br>甚至连毛病也一样，把动态库放到正确的位置才能正常使用…</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><div class=\"line\">cp <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/lib/</span>python2.<span class=\"number\">7</span><span class=\"regexp\">/site-packages/u</span>sr<span class=\"regexp\">/local/</span>Cellar<span class=\"regexp\">/python/</span><span class=\"number\">2.7</span>.<span class=\"number\">12</span>_1<span class=\"regexp\">/Frameworks/</span>Python.framework<span class=\"regexp\">/Versions/</span><span class=\"number\">2.7</span><span class=\"regexp\">/lib/</span>python2.<span class=\"number\">7</span><span class=\"regexp\">/site-packages/</span>keystone<span class=\"regexp\">/libkeystone.dylib /u</span>sr<span class=\"regexp\">/local/</span>lib<span class=\"regexp\">/python2.7/</span>site-packages<span class=\"regexp\">/keystone/</span>libkeystone.dylib</div></pre></td></tr></table></figure>\n<p>使用起来非常简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</div><div class=\"line\"><span class=\"keyword\">from</span> keystone <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ks_asm</span><span class=\"params\">(code, arch=KS_ARCH_X86, mode=KS_MODE_64, syntax=<span class=\"number\">0</span>)</span>:</span></div><div class=\"line\">    ks = Ks(arch, mode)</div><div class=\"line\">    <span class=\"keyword\">if</span> syntax != <span class=\"number\">0</span>:</div><div class=\"line\">        ks.syntax = syntax</div><div class=\"line\"></div><div class=\"line\">    encoding, count = ks.asm(code)</div><div class=\"line\">    <span class=\"comment\"># print(encoding)</span></div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'&#123;&#125; = '</span>.format(code), end=<span class=\"string\">''</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> encoding:</div><div class=\"line\">        print(<span class=\"string\">'&#123;:02x&#125; '</span>.format(i), end=<span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">code = <span class=\"string\">'mov rax, rsp; syscall; nop; pop rbx; ret'</span></div><div class=\"line\">ks_asm(code)</div><div class=\"line\"><span class=\"comment\"># mov rax, rsp; syscall; nop; pop rbx; ret = 48 89 e0 0f 05 90 5b c3</span></div></pre></td></tr></table></figure>\n<p>另外官方用例：<a href=\"https://github.com/keystone-engine/keystone/blob/master/bindings/python/sample.py\" target=\"_blank\" rel=\"external\">https://github.com/keystone-engine/keystone/blob/master/bindings/python/sample.py</a></p>\n<p>简直爱死这个作者了 -0-<br>另外发现他还有一个 CPU emulator 框架 <a href=\"http://www.unicorn-engine.org/docs/tutorial.html\" target=\"_blank\" rel=\"external\">Unicorn</a><br>有时间了可以学习下</p>\n","excerpt":"","more":"<p>Python 的反汇编框架很多，尤其是 capstone 非常好用<br>但是将常见汇编语句汇编成对应机器码的框架居然一直没找到<br>难道没有其他懒得记机器码的人了吗╮(╯_╰)╭</p>\n<p>今天突然发现 capstone 的作者似乎居然早就听到了我的心声<br>在上半年就发布了一个汇编框架 <a href=\"http://www.keystone-engine.org/\">keystone</a><br><code>pip install keystone-engine</code> 就可以安装，用法和 capstone 非常相似<br>甚至连毛病也一样，把动态库放到正确的位置才能正常使用…</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><div class=\"line\">cp <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/lib/</span>python2.<span class=\"number\">7</span><span class=\"regexp\">/site-packages/u</span>sr<span class=\"regexp\">/local/</span>Cellar<span class=\"regexp\">/python/</span><span class=\"number\">2.7</span>.<span class=\"number\">12</span>_1<span class=\"regexp\">/Frameworks/</span>Python.framework<span class=\"regexp\">/Versions/</span><span class=\"number\">2.7</span><span class=\"regexp\">/lib/</span>python2.<span class=\"number\">7</span><span class=\"regexp\">/site-packages/</span>keystone<span class=\"regexp\">/libkeystone.dylib /u</span>sr<span class=\"regexp\">/local/</span>lib<span class=\"regexp\">/python2.7/</span>site-packages<span class=\"regexp\">/keystone/</span>libkeystone.dylib</div></pre></td></tr></table></figure>\n<p>使用起来非常简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</div><div class=\"line\"><span class=\"keyword\">from</span> keystone <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ks_asm</span><span class=\"params\">(code, arch=KS_ARCH_X86, mode=KS_MODE_64, syntax=<span class=\"number\">0</span>)</span>:</span></div><div class=\"line\">    ks = Ks(arch, mode)</div><div class=\"line\">    <span class=\"keyword\">if</span> syntax != <span class=\"number\">0</span>:</div><div class=\"line\">        ks.syntax = syntax</div><div class=\"line\"></div><div class=\"line\">    encoding, count = ks.asm(code)</div><div class=\"line\">    <span class=\"comment\"># print(encoding)</span></div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'&#123;&#125; = '</span>.format(code), end=<span class=\"string\">''</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> encoding:</div><div class=\"line\">        print(<span class=\"string\">'&#123;:02x&#125; '</span>.format(i), end=<span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">code = <span class=\"string\">'mov rax, rsp; syscall; nop; pop rbx; ret'</span></div><div class=\"line\">ks_asm(code)</div><div class=\"line\"><span class=\"comment\"># mov rax, rsp; syscall; nop; pop rbx; ret = 48 89 e0 0f 05 90 5b c3</span></div></pre></td></tr></table></figure>\n<p>另外官方用例：<a href=\"https://github.com/keystone-engine/keystone/blob/master/bindings/python/sample.py\">https://github.com/keystone-engine/keystone/blob/master/bindings/python/sample.py</a></p>\n<p>简直爱死这个作者了 -0-<br>另外发现他还有一个 CPU emulator 框架 <a href=\"http://www.unicorn-engine.org/docs/tutorial.html\">Unicorn</a><br>有时间了可以学习下</p>\n"},{"title":"Mac 安装 mongodb","date":"2016-09-22T12:35:03.000Z","_content":"\nMac 下按照[官网说明][1] 安装 mongodb 并配置好`PATH`后直接`mongo`会报错：\n\n```\n$ brew install mongodb\n...\n$ export PATH=$PATH:/usr/local/Cellar/mongodb/3.2.9/bin\n$ mongo\nMongoDB shell version: 3.2.9\nconnecting to: test\n2016-09-22T20:15:48.787+0800 W NETWORK  [thread1] Failed to connect to 127.0.0.1:27017, reason: errno:61 Connection refused\n2016-09-22T20:15:48.789+0800 E QUERY    [thread1] Error: couldn't connect to server 127.0.0.1:27017, connection attempt failed :\nconnect@src/mongo/shell/mongo.js:229:14\n@(connect):1:6\n\nexception: connect failed\n```\n\n好在 [Stackoverflow][2] 一个答案提到，是因为没有启动 mongodb service:\n\n> Did you run mongod before running mongo?\n\n> I followed installation instructions for mongodb from http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/ and I had the same error as you only when I ran mongo before actually running the mongo process with mongod. I thought installing mongodb would also launch it but you need to launch it manually with mongod before you do anything else that needs mongodb.\n\n不过还是报错：\n\n```\n$ mongod\n2016-09-22T20:28:37.094+0800 I CONTROL  [initandlisten] MongoDB starting : pid=75109 port=27017 dbpath=/data/db 64-bit host=localhost\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] db version v3.2.9\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] git version: 22ec9e93b40c85fc7cae7d56e7d6a02fd811088c\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] allocator: system\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] modules: none\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] build environment:\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten]     distarch: x86_64\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten]     target_arch: x86_64\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] options: {}\n2016-09-22T20:28:37.097+0800 I -        [initandlisten] Detected data files in /data/db created by the 'mmapv1' storage engine, so setting the active storage engine to 'mmapv1'.\n2016-09-22T20:28:37.100+0800 I STORAGE  [initandlisten] exception in initAndListen: 98 Unable to create/open lock file: /data/db/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating\n2016-09-22T20:28:37.100+0800 I CONTROL  [initandlisten] dbexit:  rc: 100\n```\n\n看见`lock file`习惯性想去删掉，结果依然不行\n\n最后还是在 [Stackoverflow][3] 找到解决方法：\n\n```\n$ sudo chown -R $USER /data/db\n$ mongod\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] MongoDB starting : pid=75729 port=27017 dbpath=/data/db 64-bit host=localhost\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] db version v3.2.9\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] git version: 22ec9e93b40c85fc7cae7d56e7d6a02fd811088c\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] allocator: system\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] modules: none\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] build environment:\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten]     distarch: x86_64\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten]     target_arch: x86_64\n2016-09-22T21:08:07.067+0800 I CONTROL  [initandlisten] options: {}\n2016-09-22T21:08:07.069+0800 I -        [initandlisten] Detected data files in /data/db created by the 'mmapv1' storage engine, so setting the active storage engine to 'mmapv1'.\n2016-09-22T21:08:07.096+0800 I JOURNAL  [initandlisten] journal dir=/data/db/journal\n2016-09-22T21:08:07.096+0800 I JOURNAL  [initandlisten] recover : no journal files present, no recovery needed\n2016-09-22T21:08:07.112+0800 I JOURNAL  [durability] Durability thread started\n2016-09-22T21:08:07.112+0800 I JOURNAL  [journal writer] Journal writer thread started\n2016-09-22T21:08:07.438+0800 I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory '/data/db/diagnostic.data'\n2016-09-22T21:08:07.438+0800 I NETWORK  [HostnameCanonicalizationWorker] Starting hostname canonicalization worker\n2016-09-22T21:08:07.439+0800 I NETWORK  [initandlisten] waiting for connections on port 27017\n\n```\n\n开启`mongod`后再`mongo`就可以了\n\n```\n$ mongo\nMongoDB shell version: 3.2.9\nconnecting to: test\n>\n```\n\n感觉 mongodb 的官方文档有点掉链子啊...\n\n[1]:\thttps://docs.mongodb.com/manual/mongo/\n[2]:\thttp://stackoverflow.com/questions/12831939/couldnt-connect-to-server-127-0-0-127017/17220732#17220732\n[3]:\thttp://stackoverflow.com/questions/15229412/unable-to-create-open-lock-file-data-mongod-lock-errno13-permission-denied/22623543#22623543","source":"_posts/mac-mongod.md","raw":"---\ntitle: Mac 安装 mongodb\ndate: 2016-09-22 20:35:03\ncategory: Mac\ntags: [Mac, mongodb]\n---\n\nMac 下按照[官网说明][1] 安装 mongodb 并配置好`PATH`后直接`mongo`会报错：\n\n```\n$ brew install mongodb\n...\n$ export PATH=$PATH:/usr/local/Cellar/mongodb/3.2.9/bin\n$ mongo\nMongoDB shell version: 3.2.9\nconnecting to: test\n2016-09-22T20:15:48.787+0800 W NETWORK  [thread1] Failed to connect to 127.0.0.1:27017, reason: errno:61 Connection refused\n2016-09-22T20:15:48.789+0800 E QUERY    [thread1] Error: couldn't connect to server 127.0.0.1:27017, connection attempt failed :\nconnect@src/mongo/shell/mongo.js:229:14\n@(connect):1:6\n\nexception: connect failed\n```\n\n好在 [Stackoverflow][2] 一个答案提到，是因为没有启动 mongodb service:\n\n> Did you run mongod before running mongo?\n\n> I followed installation instructions for mongodb from http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/ and I had the same error as you only when I ran mongo before actually running the mongo process with mongod. I thought installing mongodb would also launch it but you need to launch it manually with mongod before you do anything else that needs mongodb.\n\n不过还是报错：\n\n```\n$ mongod\n2016-09-22T20:28:37.094+0800 I CONTROL  [initandlisten] MongoDB starting : pid=75109 port=27017 dbpath=/data/db 64-bit host=localhost\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] db version v3.2.9\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] git version: 22ec9e93b40c85fc7cae7d56e7d6a02fd811088c\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] allocator: system\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] modules: none\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] build environment:\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten]     distarch: x86_64\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten]     target_arch: x86_64\n2016-09-22T20:28:37.095+0800 I CONTROL  [initandlisten] options: {}\n2016-09-22T20:28:37.097+0800 I -        [initandlisten] Detected data files in /data/db created by the 'mmapv1' storage engine, so setting the active storage engine to 'mmapv1'.\n2016-09-22T20:28:37.100+0800 I STORAGE  [initandlisten] exception in initAndListen: 98 Unable to create/open lock file: /data/db/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating\n2016-09-22T20:28:37.100+0800 I CONTROL  [initandlisten] dbexit:  rc: 100\n```\n\n看见`lock file`习惯性想去删掉，结果依然不行\n\n最后还是在 [Stackoverflow][3] 找到解决方法：\n\n```\n$ sudo chown -R $USER /data/db\n$ mongod\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] MongoDB starting : pid=75729 port=27017 dbpath=/data/db 64-bit host=localhost\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] db version v3.2.9\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] git version: 22ec9e93b40c85fc7cae7d56e7d6a02fd811088c\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] allocator: system\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] modules: none\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten] build environment:\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten]     distarch: x86_64\n2016-09-22T21:08:07.066+0800 I CONTROL  [initandlisten]     target_arch: x86_64\n2016-09-22T21:08:07.067+0800 I CONTROL  [initandlisten] options: {}\n2016-09-22T21:08:07.069+0800 I -        [initandlisten] Detected data files in /data/db created by the 'mmapv1' storage engine, so setting the active storage engine to 'mmapv1'.\n2016-09-22T21:08:07.096+0800 I JOURNAL  [initandlisten] journal dir=/data/db/journal\n2016-09-22T21:08:07.096+0800 I JOURNAL  [initandlisten] recover : no journal files present, no recovery needed\n2016-09-22T21:08:07.112+0800 I JOURNAL  [durability] Durability thread started\n2016-09-22T21:08:07.112+0800 I JOURNAL  [journal writer] Journal writer thread started\n2016-09-22T21:08:07.438+0800 I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory '/data/db/diagnostic.data'\n2016-09-22T21:08:07.438+0800 I NETWORK  [HostnameCanonicalizationWorker] Starting hostname canonicalization worker\n2016-09-22T21:08:07.439+0800 I NETWORK  [initandlisten] waiting for connections on port 27017\n\n```\n\n开启`mongod`后再`mongo`就可以了\n\n```\n$ mongo\nMongoDB shell version: 3.2.9\nconnecting to: test\n>\n```\n\n感觉 mongodb 的官方文档有点掉链子啊...\n\n[1]:\thttps://docs.mongodb.com/manual/mongo/\n[2]:\thttp://stackoverflow.com/questions/12831939/couldnt-connect-to-server-127-0-0-127017/17220732#17220732\n[3]:\thttp://stackoverflow.com/questions/15229412/unable-to-create-open-lock-file-data-mongod-lock-errno13-permission-denied/22623543#22623543","slug":"mac-mongod","published":1,"updated":"2016-09-27T01:18:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fuy000u3npxggygdnky","content":"<p>Mac 下按照<a href=\"https://docs.mongodb.com/manual/mongo/\" target=\"_blank\" rel=\"external\">官网说明</a> 安装 mongodb 并配置好<code>PATH</code>后直接<code>mongo</code>会报错：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ brew <span class=\"keyword\">install</span> mongodb</div><div class=\"line\">...</div><div class=\"line\">$ <span class=\"keyword\">export</span> <span class=\"keyword\">PATH</span>=$<span class=\"keyword\">PATH</span>:/usr/<span class=\"keyword\">local</span>/Cellar/mongodb/<span class=\"number\">3.2</span><span class=\"number\">.9</span>/<span class=\"keyword\">bin</span></div><div class=\"line\">$ mongo</div><div class=\"line\">MongoDB shell <span class=\"keyword\">version</span>: <span class=\"number\">3.2</span><span class=\"number\">.9</span></div><div class=\"line\">connecting <span class=\"keyword\">to</span>: <span class=\"keyword\">test</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-09</span><span class=\"number\">-22</span>T20:<span class=\"number\">15</span>:<span class=\"number\">48.787</span>+<span class=\"number\">0800</span> W NETWORK  [thread1] <span class=\"keyword\">Failed</span> <span class=\"keyword\">to</span> <span class=\"keyword\">connect</span> <span class=\"keyword\">to</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">27017</span>, reason: errno:<span class=\"number\">61</span> <span class=\"keyword\">Connection</span> refused</div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-09</span><span class=\"number\">-22</span>T20:<span class=\"number\">15</span>:<span class=\"number\">48.789</span>+<span class=\"number\">0800</span> E <span class=\"keyword\">QUERY</span>    [thread1] <span class=\"keyword\">Error</span>: couldn<span class=\"string\">'t connect to server 127.0.0.1:27017, connection attempt failed :</span></div><div class=\"line\">connect@src/mongo/shell/mongo.js:229:14</div><div class=\"line\">@(connect):1:6</div><div class=\"line\"></div><div class=\"line\">exception: connect failed</div></pre></td></tr></table></figure>\n<p>好在 <a href=\"http://stackoverflow.com/questions/12831939/couldnt-connect-to-server-127-0-0-127017/17220732#17220732\" target=\"_blank\" rel=\"external\">Stackoverflow</a> 一个答案提到，是因为没有启动 mongodb service:</p>\n<blockquote>\n<p>Did you run mongod before running mongo?</p>\n<p>I followed installation instructions for mongodb from <a href=\"http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/\" target=\"_blank\" rel=\"external\">http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/</a> and I had the same error as you only when I ran mongo before actually running the mongo process with mongod. I thought installing mongodb would also launch it but you need to launch it manually with mongod before you do anything else that needs mongodb.</p>\n</blockquote>\n<p>不过还是报错：</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mongod</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.094<span class=\"string\">+0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=75109 port=27017 dbpath=/data/db 64-bit host=localhost</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] db version v3.2.9</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] git version: 22ec9e93b40c85fc7cae7d56e7d6a02fd811088c</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] allocator: system</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] modules: none</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] build environment:</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten]     distarch: x86_64</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.097<span class=\"string\">+0800</span> I -        [initandlisten] Detected data files in /data/db created by the 'mmapv1' storage engine, so setting the active storage engine to 'mmapv1'.</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.100<span class=\"string\">+0800</span> I STORAGE  [initandlisten] exception in initAndListen: 98 Unable to create/open lock file: /data/db/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.100<span class=\"string\">+0800</span> I CONTROL  [initandlisten] dbexit:  rc: 100</div></pre></td></tr></table></figure>\n<p>看见<code>lock file</code>习惯性想去删掉，结果依然不行</p>\n<p>最后还是在 <a href=\"http://stackoverflow.com/questions/15229412/unable-to-create-open-lock-file-data-mongod-lock-errno13-permission-denied/22623543#22623543\" target=\"_blank\" rel=\"external\">Stackoverflow</a> 找到解决方法：</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo chown -R $USER /data/db</div><div class=\"line\">$ mongod</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=75729 port=27017 dbpath=/data/db 64-bit host=localhost</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] db version v3.2.9</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] git version: 22ec9e93b40c85fc7cae7d56e7d6a02fd811088c</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] allocator: system</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] modules: none</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] build environment:</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten]     distarch: x86_64</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.067<span class=\"string\">+0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.069<span class=\"string\">+0800</span> I -        [initandlisten] Detected data files in /data/db created by the 'mmapv1' storage engine, so setting the active storage engine to 'mmapv1'.</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.096<span class=\"string\">+0800</span> I JOURNAL  [initandlisten] journal dir=/data/db/journal</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.096<span class=\"string\">+0800</span> I JOURNAL  [initandlisten] recover : no journal files present, no recovery needed</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.112<span class=\"string\">+0800</span> I JOURNAL  [durability] Durability thread started</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.112<span class=\"string\">+0800</span> I JOURNAL  [journal writer] Journal writer thread started</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.438<span class=\"string\">+0800</span> I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory '/data/db/diagnostic.data'</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.438<span class=\"string\">+0800</span> I NETWORK  [HostnameCanonicalizationWorker] Starting hostname canonicalization worker</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.439<span class=\"string\">+0800</span> I NETWORK  [initandlisten] waiting for connections on port 27017</div></pre></td></tr></table></figure>\n<p>开启<code>mongod</code>后再<code>mongo</code>就可以了</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mongo</div><div class=\"line\">MongoDB <span class=\"built_in\">shell</span> <span class=\"built_in\">version</span>: <span class=\"number\">3.2</span><span class=\"number\">.9</span></div><div class=\"line\">connecting <span class=\"built_in\">to</span>: test</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>感觉 mongodb 的官方文档有点掉链子啊…</p>\n","excerpt":"","more":"<p>Mac 下按照<a href=\"https://docs.mongodb.com/manual/mongo/\">官网说明</a> 安装 mongodb 并配置好<code>PATH</code>后直接<code>mongo</code>会报错：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ brew <span class=\"keyword\">install</span> mongodb</div><div class=\"line\">...</div><div class=\"line\">$ <span class=\"keyword\">export</span> <span class=\"keyword\">PATH</span>=$<span class=\"keyword\">PATH</span>:/usr/<span class=\"keyword\">local</span>/Cellar/mongodb/<span class=\"number\">3.2</span><span class=\"number\">.9</span>/<span class=\"keyword\">bin</span></div><div class=\"line\">$ mongo</div><div class=\"line\">MongoDB shell <span class=\"keyword\">version</span>: <span class=\"number\">3.2</span><span class=\"number\">.9</span></div><div class=\"line\">connecting <span class=\"keyword\">to</span>: <span class=\"keyword\">test</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-09</span><span class=\"number\">-22</span>T20:<span class=\"number\">15</span>:<span class=\"number\">48.787</span>+<span class=\"number\">0800</span> W NETWORK  [thread1] <span class=\"keyword\">Failed</span> <span class=\"keyword\">to</span> <span class=\"keyword\">connect</span> <span class=\"keyword\">to</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">27017</span>, reason: errno:<span class=\"number\">61</span> <span class=\"keyword\">Connection</span> refused</div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-09</span><span class=\"number\">-22</span>T20:<span class=\"number\">15</span>:<span class=\"number\">48.789</span>+<span class=\"number\">0800</span> E <span class=\"keyword\">QUERY</span>    [thread1] <span class=\"keyword\">Error</span>: couldn<span class=\"string\">'t connect to server 127.0.0.1:27017, connection attempt failed :</div><div class=\"line\">connect@src/mongo/shell/mongo.js:229:14</div><div class=\"line\">@(connect):1:6</div><div class=\"line\"></div><div class=\"line\">exception: connect failed</span></div></pre></td></tr></table></figure>\n<p>好在 <a href=\"http://stackoverflow.com/questions/12831939/couldnt-connect-to-server-127-0-0-127017/17220732#17220732\">Stackoverflow</a> 一个答案提到，是因为没有启动 mongodb service:</p>\n<blockquote>\n<p>Did you run mongod before running mongo?</p>\n<p>I followed installation instructions for mongodb from <a href=\"http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/\">http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/</a> and I had the same error as you only when I ran mongo before actually running the mongo process with mongod. I thought installing mongodb would also launch it but you need to launch it manually with mongod before you do anything else that needs mongodb.</p>\n</blockquote>\n<p>不过还是报错：</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mongod</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.094<span class=\"string\">+0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=75109 port=27017 dbpath=/data/db 64-bit host=localhost</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] db version v3.2.9</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] git version: 22ec9e93b40c85fc7cae7d56e7d6a02fd811088c</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] allocator: system</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] modules: none</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] build environment:</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten]     distarch: x86_64</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.095<span class=\"string\">+0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.097<span class=\"string\">+0800</span> I -        [initandlisten] Detected data files in /data/db created by the 'mmapv1' storage engine, so setting the active storage engine to 'mmapv1'.</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.100<span class=\"string\">+0800</span> I STORAGE  [initandlisten] exception in initAndListen: 98 Unable to create/open lock file: /data/db/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T20:28:37.100<span class=\"string\">+0800</span> I CONTROL  [initandlisten] dbexit:  rc: 100</div></pre></td></tr></table></figure>\n<p>看见<code>lock file</code>习惯性想去删掉，结果依然不行</p>\n<p>最后还是在 <a href=\"http://stackoverflow.com/questions/15229412/unable-to-create-open-lock-file-data-mongod-lock-errno13-permission-denied/22623543#22623543\">Stackoverflow</a> 找到解决方法：</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo chown -R $USER /data/db</div><div class=\"line\">$ mongod</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=75729 port=27017 dbpath=/data/db 64-bit host=localhost</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] db version v3.2.9</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] git version: 22ec9e93b40c85fc7cae7d56e7d6a02fd811088c</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.2h  3 May 2016</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] allocator: system</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] modules: none</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten] build environment:</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten]     distarch: x86_64</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.066<span class=\"string\">+0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.067<span class=\"string\">+0800</span> I CONTROL  [initandlisten] options: &#123;&#125;</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.069<span class=\"string\">+0800</span> I -        [initandlisten] Detected data files in /data/db created by the 'mmapv1' storage engine, so setting the active storage engine to 'mmapv1'.</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.096<span class=\"string\">+0800</span> I JOURNAL  [initandlisten] journal dir=/data/db/journal</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.096<span class=\"string\">+0800</span> I JOURNAL  [initandlisten] recover : no journal files present, no recovery needed</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.112<span class=\"string\">+0800</span> I JOURNAL  [durability] Durability thread started</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.112<span class=\"string\">+0800</span> I JOURNAL  [journal writer] Journal writer thread started</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.438<span class=\"string\">+0800</span> I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory '/data/db/diagnostic.data'</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.438<span class=\"string\">+0800</span> I NETWORK  [HostnameCanonicalizationWorker] Starting hostname canonicalization worker</div><div class=\"line\">2016<span class=\"string\">-09</span><span class=\"string\">-22</span>T21:08:07.439<span class=\"string\">+0800</span> I NETWORK  [initandlisten] waiting for connections on port 27017</div></pre></td></tr></table></figure>\n<p>开启<code>mongod</code>后再<code>mongo</code>就可以了</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mongo</div><div class=\"line\">MongoDB <span class=\"built_in\">shell</span> <span class=\"built_in\">version</span>: <span class=\"number\">3.2</span><span class=\"number\">.9</span></div><div class=\"line\">connecting <span class=\"built_in\">to</span>: test</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>感觉 mongodb 的官方文档有点掉链子啊…</p>\n"},{"title":"Markdown 同步 Evernote","date":"2017-06-01T12:05:09.000Z","_content":"\n\n# evernote markdown\n\n用 vim 写 markdown 还是太捉急了: 输入法切换, URL 换行, 列表换行...\n\n另外考虑到同步问题, 把笔记全都放到一个地方还是更便于管理一点, 最终决定是 evernote 了, 有道的 mac 客户端太渣了连个全局搜索的快捷键都没有...\n\n## sublime evernote\n\n参照 [http://www.tuicool.com/articles/MfMZveq](http://www.tuicool.com/articles/MfMZveq) 配置好 sublime evernote 插件, 目前感觉还是挺不错的\n\n遇到了 package control 的同步问题([http://www.jianshu.com/p/a3af44257b15](http://www.jianshu.com/p/a3af44257b15)), 其实 ss 切全局后重启 sublime 就可以了, 以后出问题了记得 cmd + `\n\n本来想试试 cmd markdown 将本地笔记导入 Evernote 的, 结果这是付费功能而且不能批量导入... 还是 sublime 手动导入吧...\n\n### 常用命令\n\n*   ever new\n*   ever send\n*   ever recent\n*   ever open\n*   ever update\n\n## vscode evermonkey\n\nvscode 上有两个 evernote 相关的插件, evermonkey 远好于另外一个, 功能更全, 但还是比不上 sublime 的 evernote 插件, 不过也够用了, 另外也好看得多.\n\n### 常用命令\n\n*   ever new\n*   ever publish\n*   ever recent\n*   ever open\n*   ever client (用本地客户端打开, 这个很实用的功能是 sublime 没有的)\n\n### 优点\n\n*   Markdown 高亮比 st 好看\n*   最后生成的笔记排版也更好看些\n*   交互信息更友好\n\n### 缺点\n\n*   一旦保存文件到本地后, publish 附带的 update 功能就会失效, 会变成创建新文件\n*   open 后是一个 untitled 文件, 可能会出现莫名其妙的 html 标签\n*   不会记忆上一次的命令\n\n# vscode\n\n今天这一折腾, 突然发现 vscode 原来是个非常棒的编辑器. 目前已发现的优点:\n\n*   整体性更强, 没有 st 的分裂感, 扩展和配置的管理比 st 更先进, 注释也非常友好\n*   速度略逊于 st, 但远好于 atom 那个渣渣...\n*   大部分默认快捷键都近似 st, 基本无缝切换\n*   vim 插件居然是官方提供的, 质量远高于 st\n*   支持当前工作区设置, 项目目录下单独的配置文件, 十分简便\n\n推荐插件 [https://github.com/varHarrie/Dawn-Blossoms/issues/10](https://github.com/varHarrie/Dawn-Blossoms/issues/10)\n\n## shell\n参考 https://stackoverflow.com/questions/30065227/run-open-vscode-from-mac-terminal\n\n`Command + Shift + P` 后 `Shell Command : Install code in PATH`, vscode 就会在 `/usr/local/bin` 加入一个脚本命令, 然后就能在终端直接`code .`了\n\n\n\n","source":"_posts/markdown-evernote.md","raw":"---\ntitle: Markdown 同步 Evernote\ndate: 2017-06-01 20:05:09\ntags: [markdown, evernote, sublime, vscode]\n---\n\n\n# evernote markdown\n\n用 vim 写 markdown 还是太捉急了: 输入法切换, URL 换行, 列表换行...\n\n另外考虑到同步问题, 把笔记全都放到一个地方还是更便于管理一点, 最终决定是 evernote 了, 有道的 mac 客户端太渣了连个全局搜索的快捷键都没有...\n\n## sublime evernote\n\n参照 [http://www.tuicool.com/articles/MfMZveq](http://www.tuicool.com/articles/MfMZveq) 配置好 sublime evernote 插件, 目前感觉还是挺不错的\n\n遇到了 package control 的同步问题([http://www.jianshu.com/p/a3af44257b15](http://www.jianshu.com/p/a3af44257b15)), 其实 ss 切全局后重启 sublime 就可以了, 以后出问题了记得 cmd + `\n\n本来想试试 cmd markdown 将本地笔记导入 Evernote 的, 结果这是付费功能而且不能批量导入... 还是 sublime 手动导入吧...\n\n### 常用命令\n\n*   ever new\n*   ever send\n*   ever recent\n*   ever open\n*   ever update\n\n## vscode evermonkey\n\nvscode 上有两个 evernote 相关的插件, evermonkey 远好于另外一个, 功能更全, 但还是比不上 sublime 的 evernote 插件, 不过也够用了, 另外也好看得多.\n\n### 常用命令\n\n*   ever new\n*   ever publish\n*   ever recent\n*   ever open\n*   ever client (用本地客户端打开, 这个很实用的功能是 sublime 没有的)\n\n### 优点\n\n*   Markdown 高亮比 st 好看\n*   最后生成的笔记排版也更好看些\n*   交互信息更友好\n\n### 缺点\n\n*   一旦保存文件到本地后, publish 附带的 update 功能就会失效, 会变成创建新文件\n*   open 后是一个 untitled 文件, 可能会出现莫名其妙的 html 标签\n*   不会记忆上一次的命令\n\n# vscode\n\n今天这一折腾, 突然发现 vscode 原来是个非常棒的编辑器. 目前已发现的优点:\n\n*   整体性更强, 没有 st 的分裂感, 扩展和配置的管理比 st 更先进, 注释也非常友好\n*   速度略逊于 st, 但远好于 atom 那个渣渣...\n*   大部分默认快捷键都近似 st, 基本无缝切换\n*   vim 插件居然是官方提供的, 质量远高于 st\n*   支持当前工作区设置, 项目目录下单独的配置文件, 十分简便\n\n推荐插件 [https://github.com/varHarrie/Dawn-Blossoms/issues/10](https://github.com/varHarrie/Dawn-Blossoms/issues/10)\n\n## shell\n参考 https://stackoverflow.com/questions/30065227/run-open-vscode-from-mac-terminal\n\n`Command + Shift + P` 后 `Shell Command : Install code in PATH`, vscode 就会在 `/usr/local/bin` 加入一个脚本命令, 然后就能在终端直接`code .`了\n\n\n\n","slug":"markdown-evernote","published":1,"updated":"2017-06-02T15:50:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fuz000v3npxoe8cg8nu","content":"<h1 id=\"evernote-markdown\"><a href=\"#evernote-markdown\" class=\"headerlink\" title=\"evernote markdown\"></a>evernote markdown</h1><p>用 vim 写 markdown 还是太捉急了: 输入法切换, URL 换行, 列表换行…</p>\n<p>另外考虑到同步问题, 把笔记全都放到一个地方还是更便于管理一点, 最终决定是 evernote 了, 有道的 mac 客户端太渣了连个全局搜索的快捷键都没有…</p>\n<h2 id=\"sublime-evernote\"><a href=\"#sublime-evernote\" class=\"headerlink\" title=\"sublime evernote\"></a>sublime evernote</h2><p>参照 <a href=\"http://www.tuicool.com/articles/MfMZveq\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/MfMZveq</a> 配置好 sublime evernote 插件, 目前感觉还是挺不错的</p>\n<p>遇到了 package control 的同步问题(<a href=\"http://www.jianshu.com/p/a3af44257b15\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/a3af44257b15</a>), 其实 ss 切全局后重启 sublime 就可以了, 以后出问题了记得 cmd + `</p>\n<p>本来想试试 cmd markdown 将本地笔记导入 Evernote 的, 结果这是付费功能而且不能批量导入… 还是 sublime 手动导入吧…</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>ever new</li>\n<li>ever send</li>\n<li>ever recent</li>\n<li>ever open</li>\n<li>ever update</li>\n</ul>\n<h2 id=\"vscode-evermonkey\"><a href=\"#vscode-evermonkey\" class=\"headerlink\" title=\"vscode evermonkey\"></a>vscode evermonkey</h2><p>vscode 上有两个 evernote 相关的插件, evermonkey 远好于另外一个, 功能更全, 但还是比不上 sublime 的 evernote 插件, 不过也够用了, 另外也好看得多.</p>\n<h3 id=\"常用命令-1\"><a href=\"#常用命令-1\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>ever new</li>\n<li>ever publish</li>\n<li>ever recent</li>\n<li>ever open</li>\n<li>ever client (用本地客户端打开, 这个很实用的功能是 sublime 没有的)</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>Markdown 高亮比 st 好看</li>\n<li>最后生成的笔记排版也更好看些</li>\n<li>交互信息更友好</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>一旦保存文件到本地后, publish 附带的 update 功能就会失效, 会变成创建新文件</li>\n<li>open 后是一个 untitled 文件, 可能会出现莫名其妙的 html 标签</li>\n<li>不会记忆上一次的命令</li>\n</ul>\n<h1 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h1><p>今天这一折腾, 突然发现 vscode 原来是个非常棒的编辑器. 目前已发现的优点:</p>\n<ul>\n<li>整体性更强, 没有 st 的分裂感, 扩展和配置的管理比 st 更先进, 注释也非常友好</li>\n<li>速度略逊于 st, 但远好于 atom 那个渣渣…</li>\n<li>大部分默认快捷键都近似 st, 基本无缝切换</li>\n<li>vim 插件居然是官方提供的, 质量远高于 st</li>\n<li>支持当前工作区设置, 项目目录下单独的配置文件, 十分简便</li>\n</ul>\n<p>推荐插件 <a href=\"https://github.com/varHarrie/Dawn-Blossoms/issues/10\" target=\"_blank\" rel=\"external\">https://github.com/varHarrie/Dawn-Blossoms/issues/10</a></p>\n<h2 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h2><p>参考 <a href=\"https://stackoverflow.com/questions/30065227/run-open-vscode-from-mac-terminal\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/30065227/run-open-vscode-from-mac-terminal</a></p>\n<p><code>Command + Shift + P</code> 后 <code>Shell Command : Install code in PATH</code>, vscode 就会在 <code>/usr/local/bin</code> 加入一个脚本命令, 然后就能在终端直接<code>code .</code>了</p>\n","excerpt":"","more":"<h1 id=\"evernote-markdown\"><a href=\"#evernote-markdown\" class=\"headerlink\" title=\"evernote markdown\"></a>evernote markdown</h1><p>用 vim 写 markdown 还是太捉急了: 输入法切换, URL 换行, 列表换行…</p>\n<p>另外考虑到同步问题, 把笔记全都放到一个地方还是更便于管理一点, 最终决定是 evernote 了, 有道的 mac 客户端太渣了连个全局搜索的快捷键都没有…</p>\n<h2 id=\"sublime-evernote\"><a href=\"#sublime-evernote\" class=\"headerlink\" title=\"sublime evernote\"></a>sublime evernote</h2><p>参照 <a href=\"http://www.tuicool.com/articles/MfMZveq\">http://www.tuicool.com/articles/MfMZveq</a> 配置好 sublime evernote 插件, 目前感觉还是挺不错的</p>\n<p>遇到了 package control 的同步问题(<a href=\"http://www.jianshu.com/p/a3af44257b15\">http://www.jianshu.com/p/a3af44257b15</a>), 其实 ss 切全局后重启 sublime 就可以了, 以后出问题了记得 cmd + `</p>\n<p>本来想试试 cmd markdown 将本地笔记导入 Evernote 的, 结果这是付费功能而且不能批量导入… 还是 sublime 手动导入吧…</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>ever new</li>\n<li>ever send</li>\n<li>ever recent</li>\n<li>ever open</li>\n<li>ever update</li>\n</ul>\n<h2 id=\"vscode-evermonkey\"><a href=\"#vscode-evermonkey\" class=\"headerlink\" title=\"vscode evermonkey\"></a>vscode evermonkey</h2><p>vscode 上有两个 evernote 相关的插件, evermonkey 远好于另外一个, 功能更全, 但还是比不上 sublime 的 evernote 插件, 不过也够用了, 另外也好看得多.</p>\n<h3 id=\"常用命令-1\"><a href=\"#常用命令-1\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>ever new</li>\n<li>ever publish</li>\n<li>ever recent</li>\n<li>ever open</li>\n<li>ever client (用本地客户端打开, 这个很实用的功能是 sublime 没有的)</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>Markdown 高亮比 st 好看</li>\n<li>最后生成的笔记排版也更好看些</li>\n<li>交互信息更友好</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>一旦保存文件到本地后, publish 附带的 update 功能就会失效, 会变成创建新文件</li>\n<li>open 后是一个 untitled 文件, 可能会出现莫名其妙的 html 标签</li>\n<li>不会记忆上一次的命令</li>\n</ul>\n<h1 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h1><p>今天这一折腾, 突然发现 vscode 原来是个非常棒的编辑器. 目前已发现的优点:</p>\n<ul>\n<li>整体性更强, 没有 st 的分裂感, 扩展和配置的管理比 st 更先进, 注释也非常友好</li>\n<li>速度略逊于 st, 但远好于 atom 那个渣渣…</li>\n<li>大部分默认快捷键都近似 st, 基本无缝切换</li>\n<li>vim 插件居然是官方提供的, 质量远高于 st</li>\n<li>支持当前工作区设置, 项目目录下单独的配置文件, 十分简便</li>\n</ul>\n<p>推荐插件 <a href=\"https://github.com/varHarrie/Dawn-Blossoms/issues/10\">https://github.com/varHarrie/Dawn-Blossoms/issues/10</a></p>\n<h2 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h2><p>参考 <a href=\"https://stackoverflow.com/questions/30065227/run-open-vscode-from-mac-terminal\">https://stackoverflow.com/questions/30065227/run-open-vscode-from-mac-terminal</a></p>\n<p><code>Command + Shift + P</code> 后 <code>Shell Command : Install code in PATH</code>, vscode 就会在 <code>/usr/local/bin</code> 加入一个脚本命令, 然后就能在终端直接<code>code .</code>了</p>\n"},{"title":"Mac 安装 MySQL 并设置 utf-8","date":"2016-04-07T14:23:29.000Z","_content":"\n# 下载安装\nhttp://dev.mysql.com/downloads/mysql/5.6.html\n\n# 关闭服务\n`系统偏好设置 - MySQL - Stop MySQL Server`\n\n# 环境变量\n```shell\n$ vim ~/.zshrc\n\n...\n# Add mysql\nexport PATH=\"$PATH\":/usr/local/mysql/bin\n...\n\n$ source ~/.zshrc\n```\n\n# 设置 utf-8\n```shell\n$ sudo cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf\n$ sudo vim /etc/my.cnf\n\n...\n[client]\ndefault-character-set = utf8\n\n[mysqld]\ndefault-storage-engine = INNODB\ncharacter-set-server = utf8\ncollation-server = utf8_general_ci\n...\n```\n\n# 开启服务\n`系统偏好设置 - MySQL - Start MySQL Server`\n\n# 验证 utf-8\n```\n$ mysql -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 5\nServer version: 5.6.29 MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show variables like '%char%';\n+--------------------------+--------------------------------------------------------+\n| Variable_name            | Value                                                  |\n+--------------------------+--------------------------------------------------------+\n| character_set_client     | utf8                                                   |\n| character_set_connection | utf8                                                   |\n| character_set_database   | utf8                                                   |\n| character_set_filesystem | binary                                                 |\n| character_set_results    | utf8                                                   |\n| character_set_server     | utf8                                                   |\n| character_set_system     | utf8                                                   |\n| character_sets_dir       | /usr/local/mysql-5.6.29-osx10.8-x86_64/share/charsets/ |\n+--------------------------+--------------------------------------------------------+\n8 rows in set (0.00 sec)\n\nmysql>\n```\n\n# mysql.connector\n```\n(venv3.5)$ pip3 install mysql-connector-python-rf\n```\n\n# 参考\n\n- http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320107391860b39da6901ed41a296e574ed37104752000\n- http://blog.csdn.net/waleking/article/details/7620983\n- http://jingyan.baidu.com/article/48a42057e2b2b9a9242504a2.html","source":"_posts/mysql-utf-8.md","raw":"---\ntitle: Mac 安装 MySQL 并设置 utf-8\ndate: 2016-04-07 22:23:29\ncategory: Mac\ntags: [MySQL, UTF-8]\n---\n\n# 下载安装\nhttp://dev.mysql.com/downloads/mysql/5.6.html\n\n# 关闭服务\n`系统偏好设置 - MySQL - Stop MySQL Server`\n\n# 环境变量\n```shell\n$ vim ~/.zshrc\n\n...\n# Add mysql\nexport PATH=\"$PATH\":/usr/local/mysql/bin\n...\n\n$ source ~/.zshrc\n```\n\n# 设置 utf-8\n```shell\n$ sudo cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf\n$ sudo vim /etc/my.cnf\n\n...\n[client]\ndefault-character-set = utf8\n\n[mysqld]\ndefault-storage-engine = INNODB\ncharacter-set-server = utf8\ncollation-server = utf8_general_ci\n...\n```\n\n# 开启服务\n`系统偏好设置 - MySQL - Start MySQL Server`\n\n# 验证 utf-8\n```\n$ mysql -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 5\nServer version: 5.6.29 MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show variables like '%char%';\n+--------------------------+--------------------------------------------------------+\n| Variable_name            | Value                                                  |\n+--------------------------+--------------------------------------------------------+\n| character_set_client     | utf8                                                   |\n| character_set_connection | utf8                                                   |\n| character_set_database   | utf8                                                   |\n| character_set_filesystem | binary                                                 |\n| character_set_results    | utf8                                                   |\n| character_set_server     | utf8                                                   |\n| character_set_system     | utf8                                                   |\n| character_sets_dir       | /usr/local/mysql-5.6.29-osx10.8-x86_64/share/charsets/ |\n+--------------------------+--------------------------------------------------------+\n8 rows in set (0.00 sec)\n\nmysql>\n```\n\n# mysql.connector\n```\n(venv3.5)$ pip3 install mysql-connector-python-rf\n```\n\n# 参考\n\n- http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320107391860b39da6901ed41a296e574ed37104752000\n- http://blog.csdn.net/waleking/article/details/7620983\n- http://jingyan.baidu.com/article/48a42057e2b2b9a9242504a2.html","slug":"mysql-utf-8","published":1,"updated":"2016-07-06T14:09:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fv1000w3npx86l4eimg","content":"<h1 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h1><p><a href=\"http://dev.mysql.com/downloads/mysql/5.6.html\" target=\"_blank\" rel=\"external\">http://dev.mysql.com/downloads/mysql/5.6.html</a></p>\n<h1 id=\"关闭服务\"><a href=\"#关闭服务\" class=\"headerlink\" title=\"关闭服务\"></a>关闭服务</h1><p><code>系统偏好设置 - MySQL - Stop MySQL Server</code></p>\n<h1 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim ~/.zshrc</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"># Add mysql</div><div class=\"line\">export PATH=&quot;$PATH&quot;:/usr/local/mysql/bin</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">$ source ~/.zshrc</div></pre></td></tr></table></figure>\n<h1 id=\"设置-utf-8\"><a href=\"#设置-utf-8\" class=\"headerlink\" title=\"设置 utf-8\"></a>设置 utf-8</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf</div><div class=\"line\">$ sudo vim /etc/my.cnf</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">[client]</div><div class=\"line\">default-character-set = utf8</div><div class=\"line\"></div><div class=\"line\">[mysqld]</div><div class=\"line\">default-storage-engine = INNODB</div><div class=\"line\">character-set-server = utf8</div><div class=\"line\">collation-server = utf8_general_ci</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"开启服务\"><a href=\"#开启服务\" class=\"headerlink\" title=\"开启服务\"></a>开启服务</h1><p><code>系统偏好设置 - MySQL - Start MySQL Server</code></p>\n<h1 id=\"验证-utf-8\"><a href=\"#验证-utf-8\" class=\"headerlink\" title=\"验证 utf-8\"></a>验证 utf-8</h1><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mysql -u root -p</div><div class=\"line\">Enter password:</div><div class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</div><div class=\"line\">Your MySQL connection id is 5</div><div class=\"line\">Server version: 5.6.29 MySQL Community Server (GPL)</div><div class=\"line\"></div><div class=\"line\">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</div><div class=\"line\"></div><div class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class=\"line\">affiliates. Other names may be trademarks of their respective</div><div class=\"line\">owners.</div><div class=\"line\"></div><div class=\"line\">Type <span class=\"emphasis\">'help;'</span> or <span class=\"emphasis\">'\\h'</span> for help. Type <span class=\"emphasis\">'\\c'</span> to clear the current input statement.</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">mysql&gt; show variables like '%char%';</span></div><div class=\"line\">+--------------------------+--------------------------------------------------------+</div><div class=\"line\"><span class=\"section\">| Variable_name            | Value                                                  |</span></div><div class=\"line\">+--------------------------+--------------------------------------------------------+</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>client     | utf8                                                   |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>connection | utf8                                                   |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>database   | utf8                                                   |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>filesystem | binary                                                 |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>results    | utf8                                                   |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>server     | utf8                                                   |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>system     | utf8                                                   |</div><div class=\"line\"><span class=\"section\">| character_sets_dir       | /usr/local/mysql-5.6.29-osx10.8-x86_64/share/charsets/ |</span></div><div class=\"line\">+--------------------------+--------------------------------------------------------+</div><div class=\"line\">8 rows in set (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">mysql&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"mysql-connector\"><a href=\"#mysql-connector\" class=\"headerlink\" title=\"mysql.connector\"></a>mysql.connector</h1><figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><div class=\"line\">(venv3.5)$ pip3 install mysql-connector-python-rf</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320107391860b39da6901ed41a296e574ed37104752000\" target=\"_blank\" rel=\"external\">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320107391860b39da6901ed41a296e574ed37104752000</a></li>\n<li><a href=\"http://blog.csdn.net/waleking/article/details/7620983\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/waleking/article/details/7620983</a></li>\n<li><a href=\"http://jingyan.baidu.com/article/48a42057e2b2b9a9242504a2.html\" target=\"_blank\" rel=\"external\">http://jingyan.baidu.com/article/48a42057e2b2b9a9242504a2.html</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h1><p><a href=\"http://dev.mysql.com/downloads/mysql/5.6.html\">http://dev.mysql.com/downloads/mysql/5.6.html</a></p>\n<h1 id=\"关闭服务\"><a href=\"#关闭服务\" class=\"headerlink\" title=\"关闭服务\"></a>关闭服务</h1><p><code>系统偏好设置 - MySQL - Stop MySQL Server</code></p>\n<h1 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim ~/.zshrc</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"># Add mysql</div><div class=\"line\">export PATH=&quot;$PATH&quot;:/usr/local/mysql/bin</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">$ source ~/.zshrc</div></pre></td></tr></table></figure>\n<h1 id=\"设置-utf-8\"><a href=\"#设置-utf-8\" class=\"headerlink\" title=\"设置 utf-8\"></a>设置 utf-8</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf</div><div class=\"line\">$ sudo vim /etc/my.cnf</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">[client]</div><div class=\"line\">default-character-set = utf8</div><div class=\"line\"></div><div class=\"line\">[mysqld]</div><div class=\"line\">default-storage-engine = INNODB</div><div class=\"line\">character-set-server = utf8</div><div class=\"line\">collation-server = utf8_general_ci</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h1 id=\"开启服务\"><a href=\"#开启服务\" class=\"headerlink\" title=\"开启服务\"></a>开启服务</h1><p><code>系统偏好设置 - MySQL - Start MySQL Server</code></p>\n<h1 id=\"验证-utf-8\"><a href=\"#验证-utf-8\" class=\"headerlink\" title=\"验证 utf-8\"></a>验证 utf-8</h1><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mysql -u root -p</div><div class=\"line\">Enter password:</div><div class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</div><div class=\"line\">Your MySQL connection id is 5</div><div class=\"line\">Server version: 5.6.29 MySQL Community Server (GPL)</div><div class=\"line\"></div><div class=\"line\">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</div><div class=\"line\"></div><div class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class=\"line\">affiliates. Other names may be trademarks of their respective</div><div class=\"line\">owners.</div><div class=\"line\"></div><div class=\"line\">Type <span class=\"emphasis\">'help;'</span> or <span class=\"emphasis\">'\\h'</span> for help. Type <span class=\"emphasis\">'\\c'</span> to clear the current input statement.</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">mysql&gt; show variables like '%char%';</div><div class=\"line\">+--------------------------+--------------------------------------------------------+</span></div><div class=\"line\"><span class=\"section\">| Variable_name            | Value                                                  |</div><div class=\"line\">+--------------------------+--------------------------------------------------------+</span></div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>client     | utf8                                                   |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>connection | utf8                                                   |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>database   | utf8                                                   |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>filesystem | binary                                                 |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>results    | utf8                                                   |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>server     | utf8                                                   |</div><div class=\"line\">| character<span class=\"emphasis\">_set_</span>system     | utf8                                                   |</div><div class=\"line\"><span class=\"section\">| character_sets_dir       | /usr/local/mysql-5.6.29-osx10.8-x86_64/share/charsets/ |</div><div class=\"line\">+--------------------------+--------------------------------------------------------+</span></div><div class=\"line\">8 rows in set (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">mysql&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"mysql-connector\"><a href=\"#mysql-connector\" class=\"headerlink\" title=\"mysql.connector\"></a>mysql.connector</h1><figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><div class=\"line\">(venv3.5)$ pip3 install mysql-connector-python-rf</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320107391860b39da6901ed41a296e574ed37104752000\">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320107391860b39da6901ed41a296e574ed37104752000</a></li>\n<li><a href=\"http://blog.csdn.net/waleking/article/details/7620983\">http://blog.csdn.net/waleking/article/details/7620983</a></li>\n<li><a href=\"http://jingyan.baidu.com/article/48a42057e2b2b9a9242504a2.html\">http://jingyan.baidu.com/article/48a42057e2b2b9a9242504a2.html</a></li>\n</ul>\n"},{"title":"polipo+ss实现 iTerm2 终端科学上网","date":"2017-04-03T07:55:00.000Z","_content":"\n# polipo\n\n似乎 10.11 引入 SIP 以来 Proxychains 就不能正常工作了, 导致终端代理一直出问题, 今天意外发现 polipo 这个不受 SIP 影响的工具, 尝试了一下果然不错\n\n```\nbrew install polipo\npolipo socksParentProxy=localhost:1086\n```\n\n即可实现配合 Shadowsocks(sock5 默认工作在 1086 端口)\n\n为了方便日常切换, 在`.zshrc`中加入\n\n```\n#proxy\nalias proxy=\"polipo socksParentProxy=localhost:1086\"\nexport no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\npon () {\n    export http_proxy=\"http://127.0.0.1:8123/\"\n    export https_proxy=\"http://127.0.0.1:8123/\"\n    export ftp_proxy=\"http://127.0.0.1:8123/\"\n}\npoff () {\n    unset http_proxy\n    unset https_proxy\n    unset ftp_proxy\n}\n# charles proxy\npch () {\n    export http_proxy=\"http://127.0.0.1:8888/\"\n    export https_proxy=\"http://127.0.0.1:8888/\"\n    export ftp_proxy=\"http://127.0.0.1:8888/\"\n}\n```\n\n以后常驻一个 pane 挂着`proxy`, 然后其他 pane 通过`pon`和`poff`切换即可\n\n# Charles\n\n其中附加的`pch`, 可以实现 Charles 对终端的抓包\n\n如果 Charles 打开 macOS 模式, 同时将 External Proxy 端口设置为 1087(Shadowsocks http/https 代理的默认端口), 可以翻墙的同时进行抓包\n\n需要注意的是, 在没有导入证书的情况下对 HTTPS 抓包会出现失败或是乱码等问题\n\n\n# 测试\n\n```\n> $ pon\n\n> $ curl ip.cn\n当前 IP：x.x.x.x 来自：香港特别行政区 xTom\n\n> $ poff\n\n> $ curl ip.cn\n当前 IP：x.x.x.x 来自：北京市 电信\n\n> $ pch\n\n> $ curl ip.cn\n当前 IP：x.x.x.x 来自：香港特别行政区 xTom\n\n```\n![](https://ww1.sinaimg.cn/large/006tNbRwgy1fe9k951wo6j31kw0ydgti.jpg)\n\n\n\n\n","source":"_posts/polipo-ss实现终端代理.md","raw":"---\ntitle: polipo+ss实现 iTerm2 终端科学上网\ndate: 2017-04-03 15:55:00\ncategory: Mac\ntags: \n- proxy\n- iTerm\n- polipo\n- Shadowsocks\n- Charles\n- 科学上网\n---\n\n# polipo\n\n似乎 10.11 引入 SIP 以来 Proxychains 就不能正常工作了, 导致终端代理一直出问题, 今天意外发现 polipo 这个不受 SIP 影响的工具, 尝试了一下果然不错\n\n```\nbrew install polipo\npolipo socksParentProxy=localhost:1086\n```\n\n即可实现配合 Shadowsocks(sock5 默认工作在 1086 端口)\n\n为了方便日常切换, 在`.zshrc`中加入\n\n```\n#proxy\nalias proxy=\"polipo socksParentProxy=localhost:1086\"\nexport no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\npon () {\n    export http_proxy=\"http://127.0.0.1:8123/\"\n    export https_proxy=\"http://127.0.0.1:8123/\"\n    export ftp_proxy=\"http://127.0.0.1:8123/\"\n}\npoff () {\n    unset http_proxy\n    unset https_proxy\n    unset ftp_proxy\n}\n# charles proxy\npch () {\n    export http_proxy=\"http://127.0.0.1:8888/\"\n    export https_proxy=\"http://127.0.0.1:8888/\"\n    export ftp_proxy=\"http://127.0.0.1:8888/\"\n}\n```\n\n以后常驻一个 pane 挂着`proxy`, 然后其他 pane 通过`pon`和`poff`切换即可\n\n# Charles\n\n其中附加的`pch`, 可以实现 Charles 对终端的抓包\n\n如果 Charles 打开 macOS 模式, 同时将 External Proxy 端口设置为 1087(Shadowsocks http/https 代理的默认端口), 可以翻墙的同时进行抓包\n\n需要注意的是, 在没有导入证书的情况下对 HTTPS 抓包会出现失败或是乱码等问题\n\n\n# 测试\n\n```\n> $ pon\n\n> $ curl ip.cn\n当前 IP：x.x.x.x 来自：香港特别行政区 xTom\n\n> $ poff\n\n> $ curl ip.cn\n当前 IP：x.x.x.x 来自：北京市 电信\n\n> $ pch\n\n> $ curl ip.cn\n当前 IP：x.x.x.x 来自：香港特别行政区 xTom\n\n```\n![](https://ww1.sinaimg.cn/large/006tNbRwgy1fe9k951wo6j31kw0ydgti.jpg)\n\n\n\n\n","slug":"polipo-ss实现终端代理","published":1,"updated":"2017-06-01T15:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fv3000x3npxi24egd5t","content":"<h1 id=\"polipo\"><a href=\"#polipo\" class=\"headerlink\" title=\"polipo\"></a>polipo</h1><p>似乎 10.11 引入 SIP 以来 Proxychains 就不能正常工作了, 导致终端代理一直出问题, 今天意外发现 polipo 这个不受 SIP 影响的工具, 尝试了一下果然不错</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>polipo</div><div class=\"line\">polipo socksParentProxy=localhost:<span class=\"number\">1086</span></div></pre></td></tr></table></figure>\n<p>即可实现配合 Shadowsocks(sock5 默认工作在 1086 端口)</p>\n<p>为了方便日常切换, 在<code>.zshrc</code>中加入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#proxy</span></div><div class=\"line\"><span class=\"built_in\">alias</span> proxy=<span class=\"string\">\"polipo socksParentProxy=localhost:1086\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> no_proxy=<span class=\"string\">\"localhost,127.0.0.1,localaddress,.localdomain.com\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">pon</span></span> () &#123;</div><div class=\"line\">    <span class=\"built_in\">export</span> http_proxy=<span class=\"string\">\"http://127.0.0.1:8123/\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> https_proxy=<span class=\"string\">\"http://127.0.0.1:8123/\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> ftp_proxy=<span class=\"string\">\"http://127.0.0.1:8123/\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"title\">poff</span></span> () &#123;</div><div class=\"line\">    <span class=\"built_in\">unset</span> http_proxy</div><div class=\"line\">    <span class=\"built_in\">unset</span> https_proxy</div><div class=\"line\">    <span class=\"built_in\">unset</span> ftp_proxy</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># charles proxy</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">pch</span></span> () &#123;</div><div class=\"line\">    <span class=\"built_in\">export</span> http_proxy=<span class=\"string\">\"http://127.0.0.1:8888/\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> https_proxy=<span class=\"string\">\"http://127.0.0.1:8888/\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> ftp_proxy=<span class=\"string\">\"http://127.0.0.1:8888/\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以后常驻一个 pane 挂着<code>proxy</code>, 然后其他 pane 通过<code>pon</code>和<code>poff</code>切换即可</p>\n<h1 id=\"Charles\"><a href=\"#Charles\" class=\"headerlink\" title=\"Charles\"></a>Charles</h1><p>其中附加的<code>pch</code>, 可以实现 Charles 对终端的抓包</p>\n<p>如果 Charles 打开 macOS 模式, 同时将 External Proxy 端口设置为 1087(Shadowsocks http/https 代理的默认端口), 可以翻墙的同时进行抓包</p>\n<p>需要注意的是, 在没有导入证书的情况下对 HTTPS 抓包会出现失败或是乱码等问题</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt; $ pon</div><div class=\"line\"></div><div class=\"line\">&gt; $ curl ip<span class=\"selector-class\">.cn</span></div><div class=\"line\">当前 IP：x<span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span> 来自：香港特别行政区 xTom</div><div class=\"line\"></div><div class=\"line\">&gt; $ poff</div><div class=\"line\"></div><div class=\"line\">&gt; $ curl ip<span class=\"selector-class\">.cn</span></div><div class=\"line\">当前 IP：x<span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span> 来自：北京市 电信</div><div class=\"line\"></div><div class=\"line\">&gt; $ pch</div><div class=\"line\"></div><div class=\"line\">&gt; $ curl ip<span class=\"selector-class\">.cn</span></div><div class=\"line\">当前 IP：x<span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span> 来自：香港特别行政区 xTom</div></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNbRwgy1fe9k951wo6j31kw0ydgti.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<h1 id=\"polipo\"><a href=\"#polipo\" class=\"headerlink\" title=\"polipo\"></a>polipo</h1><p>似乎 10.11 引入 SIP 以来 Proxychains 就不能正常工作了, 导致终端代理一直出问题, 今天意外发现 polipo 这个不受 SIP 影响的工具, 尝试了一下果然不错</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>polipo</div><div class=\"line\">polipo socksParentProxy=localhost:<span class=\"number\">1086</span></div></pre></td></tr></table></figure>\n<p>即可实现配合 Shadowsocks(sock5 默认工作在 1086 端口)</p>\n<p>为了方便日常切换, 在<code>.zshrc</code>中加入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#proxy</span></div><div class=\"line\"><span class=\"built_in\">alias</span> proxy=<span class=\"string\">\"polipo socksParentProxy=localhost:1086\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> no_proxy=<span class=\"string\">\"localhost,127.0.0.1,localaddress,.localdomain.com\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">pon</span></span> () &#123;</div><div class=\"line\">    <span class=\"built_in\">export</span> http_proxy=<span class=\"string\">\"http://127.0.0.1:8123/\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> https_proxy=<span class=\"string\">\"http://127.0.0.1:8123/\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> ftp_proxy=<span class=\"string\">\"http://127.0.0.1:8123/\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"title\">poff</span></span> () &#123;</div><div class=\"line\">    <span class=\"built_in\">unset</span> http_proxy</div><div class=\"line\">    <span class=\"built_in\">unset</span> https_proxy</div><div class=\"line\">    <span class=\"built_in\">unset</span> ftp_proxy</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\"># charles proxy</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">pch</span></span> () &#123;</div><div class=\"line\">    <span class=\"built_in\">export</span> http_proxy=<span class=\"string\">\"http://127.0.0.1:8888/\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> https_proxy=<span class=\"string\">\"http://127.0.0.1:8888/\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> ftp_proxy=<span class=\"string\">\"http://127.0.0.1:8888/\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以后常驻一个 pane 挂着<code>proxy</code>, 然后其他 pane 通过<code>pon</code>和<code>poff</code>切换即可</p>\n<h1 id=\"Charles\"><a href=\"#Charles\" class=\"headerlink\" title=\"Charles\"></a>Charles</h1><p>其中附加的<code>pch</code>, 可以实现 Charles 对终端的抓包</p>\n<p>如果 Charles 打开 macOS 模式, 同时将 External Proxy 端口设置为 1087(Shadowsocks http/https 代理的默认端口), 可以翻墙的同时进行抓包</p>\n<p>需要注意的是, 在没有导入证书的情况下对 HTTPS 抓包会出现失败或是乱码等问题</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt; $ pon</div><div class=\"line\"></div><div class=\"line\">&gt; $ curl ip<span class=\"selector-class\">.cn</span></div><div class=\"line\">当前 IP：x<span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span> 来自：香港特别行政区 xTom</div><div class=\"line\"></div><div class=\"line\">&gt; $ poff</div><div class=\"line\"></div><div class=\"line\">&gt; $ curl ip<span class=\"selector-class\">.cn</span></div><div class=\"line\">当前 IP：x<span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span> 来自：北京市 电信</div><div class=\"line\"></div><div class=\"line\">&gt; $ pch</div><div class=\"line\"></div><div class=\"line\">&gt; $ curl ip<span class=\"selector-class\">.cn</span></div><div class=\"line\">当前 IP：x<span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span><span class=\"selector-class\">.x</span> 来自：香港特别行政区 xTom</div></pre></td></tr></table></figure>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNbRwgy1fe9k951wo6j31kw0ydgti.jpg\" alt=\"\"></p>\n"},{"title":"iTerm下配置Powerline","date":"2016-03-09T07:06:29.000Z","_content":"\n\n# Powerline\n\n今天指压师折腾powerline的时候也卡住了，帮他搞定之后，不禁想起以前我折腾这个的时候，网上各种教程都莫名其妙忽略了最关键的iTerm调字体部分，干脆把自己当时写的一篇笔记改一改发blog算了\n\n<img src=\"https://raw.githubusercontent.com/answerrrrrrrrr/Res/master/Blog/2015-10-03-powerline/powerline.png\" width=\"100%\" height=\"100%\">\n\n\n## For zsh\n\n* 手动下载 [powerline](https://github.com/powerline/powerline)并解压到主目录\n\t\n\t或者 \n\t\n\t$ `git clone https://github.com/powerline/powerline`\t\t\t\n\n* $ `vim ~/.zshrc`\n  \n在zsh配置文件里加入一行:  \n\n\t. ~/powerline-develop/powerline/bindings/zsh/powerline.zsh\n\t\t\n\n然后启用新配置：\n\t\n$ `source ~/.zshrc`\n\n* 手动下载 [powerline fonts](https://github.com/powerline/fonts)\n\t\n\t或者\n\t\n\t$ `git clone https://github.com/powerline/fonts`\n\t\n* 然后安装：\n\n\t$ `cd fonts`\n\t\n\t$ `./install.sh`\n\n* 打开 `iTerm` - `Preferences` - `Profiles` - `Text`  \n\n\t将 `Regular Font` & `Non-ASCII Font` 都改为带有 `for Powerline`后缀的字体\n\t\n\t我感觉看着比较舒服的是`Source Code Pro for Powerline`\n\t\n\t选好的瞬间，iTerm里面的预览效果应该就已经出来了\n\t\n\t稍微有点蛋疼的是，iTerm调了透明的时候，箭头符号却不会跟着透明，看着不太顺眼\n\t\n## For vim\n$ `vim ~/.vimrc`\n\n加入:\n\n\t\tset rtp+=~/powerline-develop/powerline/bindings/vim\n\t\tset guifont=Monaco\\ for\\ Powerline:h14.5\n\t\tset laststatus=2\n\t\tlet g:Powerline_symbols = 'fancy'\n\t\tset encoding=utf-8\n\t\tset t_Co=256\n\t\tset number\n\t\tset fillchars+=stl:\\ ,stlnc:\\\n\t\tset term=xterm-256color\n\t\tset termencoding=utf-8\n\t\tsyntax enable\n\t\tset background=light\t\n\t\t\n","source":"_posts/powerline.md","raw":"---\ntitle: \"iTerm下配置Powerline\"\ndate: 2016-03-09 15:06:29\ncategory: [Mac]\ntags: [Powerline, iTerm]\n---\n\n\n# Powerline\n\n今天指压师折腾powerline的时候也卡住了，帮他搞定之后，不禁想起以前我折腾这个的时候，网上各种教程都莫名其妙忽略了最关键的iTerm调字体部分，干脆把自己当时写的一篇笔记改一改发blog算了\n\n<img src=\"https://raw.githubusercontent.com/answerrrrrrrrr/Res/master/Blog/2015-10-03-powerline/powerline.png\" width=\"100%\" height=\"100%\">\n\n\n## For zsh\n\n* 手动下载 [powerline](https://github.com/powerline/powerline)并解压到主目录\n\t\n\t或者 \n\t\n\t$ `git clone https://github.com/powerline/powerline`\t\t\t\n\n* $ `vim ~/.zshrc`\n  \n在zsh配置文件里加入一行:  \n\n\t. ~/powerline-develop/powerline/bindings/zsh/powerline.zsh\n\t\t\n\n然后启用新配置：\n\t\n$ `source ~/.zshrc`\n\n* 手动下载 [powerline fonts](https://github.com/powerline/fonts)\n\t\n\t或者\n\t\n\t$ `git clone https://github.com/powerline/fonts`\n\t\n* 然后安装：\n\n\t$ `cd fonts`\n\t\n\t$ `./install.sh`\n\n* 打开 `iTerm` - `Preferences` - `Profiles` - `Text`  \n\n\t将 `Regular Font` & `Non-ASCII Font` 都改为带有 `for Powerline`后缀的字体\n\t\n\t我感觉看着比较舒服的是`Source Code Pro for Powerline`\n\t\n\t选好的瞬间，iTerm里面的预览效果应该就已经出来了\n\t\n\t稍微有点蛋疼的是，iTerm调了透明的时候，箭头符号却不会跟着透明，看着不太顺眼\n\t\n## For vim\n$ `vim ~/.vimrc`\n\n加入:\n\n\t\tset rtp+=~/powerline-develop/powerline/bindings/vim\n\t\tset guifont=Monaco\\ for\\ Powerline:h14.5\n\t\tset laststatus=2\n\t\tlet g:Powerline_symbols = 'fancy'\n\t\tset encoding=utf-8\n\t\tset t_Co=256\n\t\tset number\n\t\tset fillchars+=stl:\\ ,stlnc:\\\n\t\tset term=xterm-256color\n\t\tset termencoding=utf-8\n\t\tsyntax enable\n\t\tset background=light\t\n\t\t\n","slug":"powerline","published":1,"updated":"2016-03-09T07:17:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fv4000y3npxn3fvny2x","content":"<h1 id=\"Powerline\"><a href=\"#Powerline\" class=\"headerlink\" title=\"Powerline\"></a>Powerline</h1><p>今天指压师折腾powerline的时候也卡住了，帮他搞定之后，不禁想起以前我折腾这个的时候，网上各种教程都莫名其妙忽略了最关键的iTerm调字体部分，干脆把自己当时写的一篇笔记改一改发blog算了</p>\n<p><img src=\"https://raw.githubusercontent.com/answerrrrrrrrr/Res/master/Blog/2015-10-03-powerline/powerline.png\" width=\"100%\" height=\"100%\"></p>\n<h2 id=\"For-zsh\"><a href=\"#For-zsh\" class=\"headerlink\" title=\"For zsh\"></a>For zsh</h2><ul>\n<li><p>手动下载 <a href=\"https://github.com/powerline/powerline\" target=\"_blank\" rel=\"external\">powerline</a>并解压到主目录</p>\n<p>  或者 </p>\n<p>  $ <code>git clone https://github.com/powerline/powerline</code>            </p>\n</li>\n<li><p>$ <code>vim ~/.zshrc</code></p>\n</li>\n</ul>\n<p>在zsh配置文件里加入一行:  </p>\n<pre><code>. ~/powerline-develop/powerline/bindings/zsh/powerline.zsh\n</code></pre><p>然后启用新配置：</p>\n<p>$ <code>source ~/.zshrc</code></p>\n<ul>\n<li><p>手动下载 <a href=\"https://github.com/powerline/fonts\" target=\"_blank\" rel=\"external\">powerline fonts</a></p>\n<p>  或者</p>\n<p>  $ <code>git clone https://github.com/powerline/fonts</code></p>\n</li>\n<li><p>然后安装：</p>\n<p>  $ <code>cd fonts</code></p>\n<p>  $ <code>./install.sh</code></p>\n</li>\n<li><p>打开 <code>iTerm</code> - <code>Preferences</code> - <code>Profiles</code> - <code>Text</code>  </p>\n<p>  将 <code>Regular Font</code> &amp; <code>Non-ASCII Font</code> 都改为带有 <code>for Powerline</code>后缀的字体</p>\n<p>  我感觉看着比较舒服的是<code>Source Code Pro for Powerline</code></p>\n<p>  选好的瞬间，iTerm里面的预览效果应该就已经出来了</p>\n<p>  稍微有点蛋疼的是，iTerm调了透明的时候，箭头符号却不会跟着透明，看着不太顺眼</p>\n</li>\n</ul>\n<h2 id=\"For-vim\"><a href=\"#For-vim\" class=\"headerlink\" title=\"For vim\"></a>For vim</h2><p>$ <code>vim ~/.vimrc</code></p>\n<p>加入:</p>\n<pre><code>set rtp+=~/powerline-develop/powerline/bindings/vim\nset guifont=Monaco\\ for\\ Powerline:h14.5\nset laststatus=2\nlet g:Powerline_symbols = &apos;fancy&apos;\nset encoding=utf-8\nset t_Co=256\nset number\nset fillchars+=stl:\\ ,stlnc:\\\nset term=xterm-256color\nset termencoding=utf-8\nsyntax enable\nset background=light    \n</code></pre>","excerpt":"","more":"<h1 id=\"Powerline\"><a href=\"#Powerline\" class=\"headerlink\" title=\"Powerline\"></a>Powerline</h1><p>今天指压师折腾powerline的时候也卡住了，帮他搞定之后，不禁想起以前我折腾这个的时候，网上各种教程都莫名其妙忽略了最关键的iTerm调字体部分，干脆把自己当时写的一篇笔记改一改发blog算了</p>\n<p><img src=\"https://raw.githubusercontent.com/answerrrrrrrrr/Res/master/Blog/2015-10-03-powerline/powerline.png\" width=\"100%\" height=\"100%\"></p>\n<h2 id=\"For-zsh\"><a href=\"#For-zsh\" class=\"headerlink\" title=\"For zsh\"></a>For zsh</h2><ul>\n<li><p>手动下载 <a href=\"https://github.com/powerline/powerline\">powerline</a>并解压到主目录</p>\n<p>  或者 </p>\n<p>  $ <code>git clone https://github.com/powerline/powerline</code>            </p>\n</li>\n<li><p>$ <code>vim ~/.zshrc</code></p>\n</li>\n</ul>\n<p>在zsh配置文件里加入一行:  </p>\n<pre><code>. ~/powerline-develop/powerline/bindings/zsh/powerline.zsh\n</code></pre><p>然后启用新配置：</p>\n<p>$ <code>source ~/.zshrc</code></p>\n<ul>\n<li><p>手动下载 <a href=\"https://github.com/powerline/fonts\">powerline fonts</a></p>\n<p>  或者</p>\n<p>  $ <code>git clone https://github.com/powerline/fonts</code></p>\n</li>\n<li><p>然后安装：</p>\n<p>  $ <code>cd fonts</code></p>\n<p>  $ <code>./install.sh</code></p>\n</li>\n<li><p>打开 <code>iTerm</code> - <code>Preferences</code> - <code>Profiles</code> - <code>Text</code>  </p>\n<p>  将 <code>Regular Font</code> &amp; <code>Non-ASCII Font</code> 都改为带有 <code>for Powerline</code>后缀的字体</p>\n<p>  我感觉看着比较舒服的是<code>Source Code Pro for Powerline</code></p>\n<p>  选好的瞬间，iTerm里面的预览效果应该就已经出来了</p>\n<p>  稍微有点蛋疼的是，iTerm调了透明的时候，箭头符号却不会跟着透明，看着不太顺眼</p>\n</li>\n</ul>\n<h2 id=\"For-vim\"><a href=\"#For-vim\" class=\"headerlink\" title=\"For vim\"></a>For vim</h2><p>$ <code>vim ~/.vimrc</code></p>\n<p>加入:</p>\n<pre><code>set rtp+=~/powerline-develop/powerline/bindings/vim\nset guifont=Monaco\\ for\\ Powerline:h14.5\nset laststatus=2\nlet g:Powerline_symbols = &apos;fancy&apos;\nset encoding=utf-8\nset t_Co=256\nset number\nset fillchars+=stl:\\ ,stlnc:\\\nset term=xterm-256color\nset termencoding=utf-8\nsyntax enable\nset background=light    \n</code></pre>"},{"title":"Python-Cookbook-1.09 简化 translate 方法","date":"2016-05-25T13:46:44.000Z","_content":"\n# string.maketrans\n\n```\nHelp on built-in function maketrans in module strop:\n\nmaketrans(...)\n    maketrans(frm, to) -> string\n\n    Return a translation table (a string of 256 bytes long)\n    suitable for use in string.translate.  The strings frm and to\n    must be of the same length.\n(END)\n```\n生成一个供`string.translate`使用的 ASCII 表，其中`frm`中的所有字符都依序被替换成`to`中字符：\n\n```\n>>> maketrans('abc', 'fed')\n'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`feddefghijklmnopqrstuvwxyz{|}~\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff'\n>>>\n```\n\n\n# string.translate\n\n```\nHelp on function translate in module string:\n\ntranslate(s, table, deletions='')\n    translate(s,table [,deletions]) -> string\n\n    Return a copy of the string s, where all characters occurring\n    in the optional argument deletions are removed, and the\n    remaining characters have been mapped through the given\n    translation table, which must be a string of length 256.  The\n    deletions argument is not allowed for Unicode strings.\n(END)\n```\n(也可以`s.translate(table, deletions='')`为格式）\n\n以`maketrans`生成的映射表为基准进行字符转换：\n\n```\n>>> translate('abcdef', a)\n'feddef'\n>>> translate('abcdef', a, 'd')\n'fedef'\n>>> translate('abcdef', a, 'dd')\n'fedef'\n>>> translate('abcdef', a, 'de')\n'fedf'\n>>> translate('abcdef', a, 'ade')\n'edf'\n>>>\n```\n\n# 自建一个返回闭包的工厂函数 translator\n\n```python\nimport string\n\n\ndef translator(frm='', to='', delete='', keep=None):\n    if len(to) == 1:\n        to = to * len(frm)\n    trans = string.maketrans(frm, to)\n    if keep is not None:\n        allchars = string.maketrans('', '')\n        delete = allchars.translate(allchars, keep.translate(allchars, delete))\n\n    def translate(s):\n        return s.translate(trans, delete)\n        \n    return translate\n\n\nif __name__ == '__main__':\n    digits_only = translator(keep=string.digits)\n    print digits_only('qwedwefaf24215')\n\n    no_digits = translator(delete=string.digits)\n    print no_digits('qwedwefaf24215')\n```","source":"_posts/python-cookbook-translator.md","raw":"---\ntitle: Python-Cookbook-1.09 简化 translate 方法\ndate: 2016-05-25 21:46:44\ncategory: Python\ntags: [Python, cookbook, closure, factory, string]\n---\n\n# string.maketrans\n\n```\nHelp on built-in function maketrans in module strop:\n\nmaketrans(...)\n    maketrans(frm, to) -> string\n\n    Return a translation table (a string of 256 bytes long)\n    suitable for use in string.translate.  The strings frm and to\n    must be of the same length.\n(END)\n```\n生成一个供`string.translate`使用的 ASCII 表，其中`frm`中的所有字符都依序被替换成`to`中字符：\n\n```\n>>> maketrans('abc', 'fed')\n'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`feddefghijklmnopqrstuvwxyz{|}~\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff'\n>>>\n```\n\n\n# string.translate\n\n```\nHelp on function translate in module string:\n\ntranslate(s, table, deletions='')\n    translate(s,table [,deletions]) -> string\n\n    Return a copy of the string s, where all characters occurring\n    in the optional argument deletions are removed, and the\n    remaining characters have been mapped through the given\n    translation table, which must be a string of length 256.  The\n    deletions argument is not allowed for Unicode strings.\n(END)\n```\n(也可以`s.translate(table, deletions='')`为格式）\n\n以`maketrans`生成的映射表为基准进行字符转换：\n\n```\n>>> translate('abcdef', a)\n'feddef'\n>>> translate('abcdef', a, 'd')\n'fedef'\n>>> translate('abcdef', a, 'dd')\n'fedef'\n>>> translate('abcdef', a, 'de')\n'fedf'\n>>> translate('abcdef', a, 'ade')\n'edf'\n>>>\n```\n\n# 自建一个返回闭包的工厂函数 translator\n\n```python\nimport string\n\n\ndef translator(frm='', to='', delete='', keep=None):\n    if len(to) == 1:\n        to = to * len(frm)\n    trans = string.maketrans(frm, to)\n    if keep is not None:\n        allchars = string.maketrans('', '')\n        delete = allchars.translate(allchars, keep.translate(allchars, delete))\n\n    def translate(s):\n        return s.translate(trans, delete)\n        \n    return translate\n\n\nif __name__ == '__main__':\n    digits_only = translator(keep=string.digits)\n    print digits_only('qwedwefaf24215')\n\n    no_digits = translator(delete=string.digits)\n    print no_digits('qwedwefaf24215')\n```","slug":"python-cookbook-translator","published":1,"updated":"2016-07-06T14:07:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fv4000z3npxzeypn8by","content":"<h1 id=\"string-maketrans\"><a href=\"#string-maketrans\" class=\"headerlink\" title=\"string.maketrans\"></a>string.maketrans</h1><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Help</span> <span class=\"keyword\">on</span> built-<span class=\"keyword\">in</span> <span class=\"keyword\">function</span> maketrans <span class=\"keyword\">in</span> <span class=\"keyword\">module</span> strop:</div><div class=\"line\"></div><div class=\"line\">maketrans(...)</div><div class=\"line\">    maketrans(frm, <span class=\"keyword\">to</span>) -&gt; <span class=\"keyword\">string</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">Return</span> a <span class=\"keyword\">translation</span> <span class=\"keyword\">table</span> (a <span class=\"keyword\">string</span> <span class=\"keyword\">of</span> <span class=\"number\">256</span> <span class=\"keyword\">bytes</span> <span class=\"keyword\">long</span>)</div><div class=\"line\">    suitable <span class=\"keyword\">for</span> <span class=\"keyword\">use</span> <span class=\"keyword\">in</span> string.translate.  The strings frm <span class=\"keyword\">and</span> <span class=\"keyword\">to</span></div><div class=\"line\">    must be <span class=\"keyword\">of</span> the same length.</div><div class=\"line\">(<span class=\"keyword\">END</span>)</div></pre></td></tr></table></figure>\n<p>生成一个供<code>string.translate</code>使用的 ASCII 表，其中<code>frm</code>中的所有字符都依序被替换成<code>to</code>中字符：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; maketrans('abc', 'fed')</div><div class=\"line\">'<span class=\"tag\">\\<span class=\"name\">x</span></span>00<span class=\"tag\">\\<span class=\"name\">x</span></span>01<span class=\"tag\">\\<span class=\"name\">x</span></span>02<span class=\"tag\">\\<span class=\"name\">x</span></span>03<span class=\"tag\">\\<span class=\"name\">x</span></span>04<span class=\"tag\">\\<span class=\"name\">x</span></span>05<span class=\"tag\">\\<span class=\"name\">x</span></span>06<span class=\"tag\">\\<span class=\"name\">x</span></span>07<span class=\"tag\">\\<span class=\"name\">x</span></span>08<span class=\"tag\">\\<span class=\"name\">t</span></span><span class=\"tag\">\\<span class=\"name\">n</span></span><span class=\"tag\">\\<span class=\"name\">x</span></span>0b<span class=\"tag\">\\<span class=\"name\">x</span></span>0c<span class=\"tag\">\\<span class=\"name\">r</span></span><span class=\"tag\">\\<span class=\"name\">x</span></span>0e<span class=\"tag\">\\<span class=\"name\">x</span></span>0f<span class=\"tag\">\\<span class=\"name\">x</span></span>10<span class=\"tag\">\\<span class=\"name\">x</span></span>11<span class=\"tag\">\\<span class=\"name\">x</span></span>12<span class=\"tag\">\\<span class=\"name\">x</span></span>13<span class=\"tag\">\\<span class=\"name\">x</span></span>14<span class=\"tag\">\\<span class=\"name\">x</span></span>15<span class=\"tag\">\\<span class=\"name\">x</span></span>16<span class=\"tag\">\\<span class=\"name\">x</span></span>17<span class=\"tag\">\\<span class=\"name\">x</span></span>18<span class=\"tag\">\\<span class=\"name\">x</span></span>19<span class=\"tag\">\\<span class=\"name\">x</span></span>1a<span class=\"tag\">\\<span class=\"name\">x</span></span>1b<span class=\"tag\">\\<span class=\"name\">x</span></span>1c<span class=\"tag\">\\<span class=\"name\">x</span></span>1d<span class=\"tag\">\\<span class=\"name\">x</span></span>1e<span class=\"tag\">\\<span class=\"name\">x</span></span>1f !\"#<span class=\"formula\">$%&amp;<span class=\"tag\">\\<span class=\"name\">'</span></span>()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[<span class=\"tag\">\\<span class=\"name\">\\</span></span>]^_`feddefghijklmnopqrstuvwxyz&#123;|&#125;~<span class=\"tag\">\\<span class=\"name\">x</span></span>7f<span class=\"tag\">\\<span class=\"name\">x</span></span>80<span class=\"tag\">\\<span class=\"name\">x</span></span>81<span class=\"tag\">\\<span class=\"name\">x</span></span>82<span class=\"tag\">\\<span class=\"name\">x</span></span>83<span class=\"tag\">\\<span class=\"name\">x</span></span>84<span class=\"tag\">\\<span class=\"name\">x</span></span>85<span class=\"tag\">\\<span class=\"name\">x</span></span>86<span class=\"tag\">\\<span class=\"name\">x</span></span>87<span class=\"tag\">\\<span class=\"name\">x</span></span>88<span class=\"tag\">\\<span class=\"name\">x</span></span>89<span class=\"tag\">\\<span class=\"name\">x</span></span>8a<span class=\"tag\">\\<span class=\"name\">x</span></span>8b<span class=\"tag\">\\<span class=\"name\">x</span></span>8c<span class=\"tag\">\\<span class=\"name\">x</span></span>8d<span class=\"tag\">\\<span class=\"name\">x</span></span>8e<span class=\"tag\">\\<span class=\"name\">x</span></span>8f<span class=\"tag\">\\<span class=\"name\">x</span></span>90<span class=\"tag\">\\<span class=\"name\">x</span></span>91<span class=\"tag\">\\<span class=\"name\">x</span></span>92<span class=\"tag\">\\<span class=\"name\">x</span></span>93<span class=\"tag\">\\<span class=\"name\">x</span></span>94<span class=\"tag\">\\<span class=\"name\">x</span></span>95<span class=\"tag\">\\<span class=\"name\">x</span></span>96<span class=\"tag\">\\<span class=\"name\">x</span></span>97<span class=\"tag\">\\<span class=\"name\">x</span></span>98<span class=\"tag\">\\<span class=\"name\">x</span></span>99<span class=\"tag\">\\<span class=\"name\">x</span></span>9a<span class=\"tag\">\\<span class=\"name\">x</span></span>9b<span class=\"tag\">\\<span class=\"name\">x</span></span>9c<span class=\"tag\">\\<span class=\"name\">x</span></span>9d<span class=\"tag\">\\<span class=\"name\">x</span></span>9e<span class=\"tag\">\\<span class=\"name\">x</span></span>9f<span class=\"tag\">\\<span class=\"name\">xa</span></span>0<span class=\"tag\">\\<span class=\"name\">xa</span></span>1<span class=\"tag\">\\<span class=\"name\">xa</span></span>2<span class=\"tag\">\\<span class=\"name\">xa</span></span>3<span class=\"tag\">\\<span class=\"name\">xa</span></span>4<span class=\"tag\">\\<span class=\"name\">xa</span></span>5<span class=\"tag\">\\<span class=\"name\">xa</span></span>6<span class=\"tag\">\\<span class=\"name\">xa</span></span>7<span class=\"tag\">\\<span class=\"name\">xa</span></span>8<span class=\"tag\">\\<span class=\"name\">xa</span></span>9<span class=\"tag\">\\<span class=\"name\">xaa</span></span><span class=\"tag\">\\<span class=\"name\">xab</span></span><span class=\"tag\">\\<span class=\"name\">xac</span></span><span class=\"tag\">\\<span class=\"name\">xad</span></span><span class=\"tag\">\\<span class=\"name\">xae</span></span><span class=\"tag\">\\<span class=\"name\">xaf</span></span><span class=\"tag\">\\<span class=\"name\">xb</span></span>0<span class=\"tag\">\\<span class=\"name\">xb</span></span>1<span class=\"tag\">\\<span class=\"name\">xb</span></span>2<span class=\"tag\">\\<span class=\"name\">xb</span></span>3<span class=\"tag\">\\<span class=\"name\">xb</span></span>4<span class=\"tag\">\\<span class=\"name\">xb</span></span>5<span class=\"tag\">\\<span class=\"name\">xb</span></span>6<span class=\"tag\">\\<span class=\"name\">xb</span></span>7<span class=\"tag\">\\<span class=\"name\">xb</span></span>8<span class=\"tag\">\\<span class=\"name\">xb</span></span>9<span class=\"tag\">\\<span class=\"name\">xba</span></span><span class=\"tag\">\\<span class=\"name\">xbb</span></span><span class=\"tag\">\\<span class=\"name\">xbc</span></span><span class=\"tag\">\\<span class=\"name\">xbd</span></span><span class=\"tag\">\\<span class=\"name\">xbe</span></span><span class=\"tag\">\\<span class=\"name\">xbf</span></span><span class=\"tag\">\\<span class=\"name\">xc</span></span>0<span class=\"tag\">\\<span class=\"name\">xc</span></span>1<span class=\"tag\">\\<span class=\"name\">xc</span></span>2<span class=\"tag\">\\<span class=\"name\">xc</span></span>3<span class=\"tag\">\\<span class=\"name\">xc</span></span>4<span class=\"tag\">\\<span class=\"name\">xc</span></span>5<span class=\"tag\">\\<span class=\"name\">xc</span></span>6<span class=\"tag\">\\<span class=\"name\">xc</span></span>7<span class=\"tag\">\\<span class=\"name\">xc</span></span>8<span class=\"tag\">\\<span class=\"name\">xc</span></span>9<span class=\"tag\">\\<span class=\"name\">xca</span></span><span class=\"tag\">\\<span class=\"name\">xcb</span></span><span class=\"tag\">\\<span class=\"name\">xcc</span></span><span class=\"tag\">\\<span class=\"name\">xcd</span></span><span class=\"tag\">\\<span class=\"name\">xce</span></span><span class=\"tag\">\\<span class=\"name\">xcf</span></span><span class=\"tag\">\\<span class=\"name\">xd</span></span>0<span class=\"tag\">\\<span class=\"name\">xd</span></span>1<span class=\"tag\">\\<span class=\"name\">xd</span></span>2<span class=\"tag\">\\<span class=\"name\">xd</span></span>3<span class=\"tag\">\\<span class=\"name\">xd</span></span>4<span class=\"tag\">\\<span class=\"name\">xd</span></span>5<span class=\"tag\">\\<span class=\"name\">xd</span></span>6<span class=\"tag\">\\<span class=\"name\">xd</span></span>7<span class=\"tag\">\\<span class=\"name\">xd</span></span>8<span class=\"tag\">\\<span class=\"name\">xd</span></span>9<span class=\"tag\">\\<span class=\"name\">xda</span></span><span class=\"tag\">\\<span class=\"name\">xdb</span></span><span class=\"tag\">\\<span class=\"name\">xdc</span></span><span class=\"tag\">\\<span class=\"name\">xdd</span></span><span class=\"tag\">\\<span class=\"name\">xde</span></span><span class=\"tag\">\\<span class=\"name\">xdf</span></span><span class=\"tag\">\\<span class=\"name\">xe</span></span>0<span class=\"tag\">\\<span class=\"name\">xe</span></span>1<span class=\"tag\">\\<span class=\"name\">xe</span></span>2<span class=\"tag\">\\<span class=\"name\">xe</span></span>3<span class=\"tag\">\\<span class=\"name\">xe</span></span>4<span class=\"tag\">\\<span class=\"name\">xe</span></span>5<span class=\"tag\">\\<span class=\"name\">xe</span></span>6<span class=\"tag\">\\<span class=\"name\">xe</span></span>7<span class=\"tag\">\\<span class=\"name\">xe</span></span>8<span class=\"tag\">\\<span class=\"name\">xe</span></span>9<span class=\"tag\">\\<span class=\"name\">xea</span></span><span class=\"tag\">\\<span class=\"name\">xeb</span></span><span class=\"tag\">\\<span class=\"name\">xec</span></span><span class=\"tag\">\\<span class=\"name\">xed</span></span><span class=\"tag\">\\<span class=\"name\">xee</span></span><span class=\"tag\">\\<span class=\"name\">xef</span></span><span class=\"tag\">\\<span class=\"name\">xf</span></span>0<span class=\"tag\">\\<span class=\"name\">xf</span></span>1<span class=\"tag\">\\<span class=\"name\">xf</span></span>2<span class=\"tag\">\\<span class=\"name\">xf</span></span>3<span class=\"tag\">\\<span class=\"name\">xf</span></span>4<span class=\"tag\">\\<span class=\"name\">xf</span></span>5<span class=\"tag\">\\<span class=\"name\">xf</span></span>6<span class=\"tag\">\\<span class=\"name\">xf</span></span>7<span class=\"tag\">\\<span class=\"name\">xf</span></span>8<span class=\"tag\">\\<span class=\"name\">xf</span></span>9<span class=\"tag\">\\<span class=\"name\">xfa</span></span><span class=\"tag\">\\<span class=\"name\">xfb</span></span><span class=\"tag\">\\<span class=\"name\">xfc</span></span><span class=\"tag\">\\<span class=\"name\">xfd</span></span><span class=\"tag\">\\<span class=\"name\">xfe</span></span><span class=\"tag\">\\<span class=\"name\">xff</span></span>'</span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"string-translate\"><a href=\"#string-translate\" class=\"headerlink\" title=\"string.translate\"></a>string.translate</h1><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Help</span> <span class=\"keyword\">on</span> <span class=\"keyword\">function</span> <span class=\"keyword\">translate</span> <span class=\"keyword\">in</span> <span class=\"keyword\">module</span> <span class=\"keyword\">string</span>:</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">translate</span>(s, <span class=\"keyword\">table</span>, deletions=<span class=\"string\">''</span>)</div><div class=\"line\">    <span class=\"keyword\">translate</span>(s,<span class=\"keyword\">table</span> [,deletions]) -&gt; <span class=\"keyword\">string</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">Return</span> a copy <span class=\"keyword\">of</span> the <span class=\"keyword\">string</span> s, <span class=\"keyword\">where</span> all <span class=\"keyword\">characters</span> occurring</div><div class=\"line\">    <span class=\"keyword\">in</span> the optional argument deletions <span class=\"keyword\">are</span> removed, <span class=\"keyword\">and</span> the</div><div class=\"line\">    remaining <span class=\"keyword\">characters</span> have been mapped <span class=\"keyword\">through</span> the given</div><div class=\"line\">    <span class=\"keyword\">translation</span> <span class=\"keyword\">table</span>, which must be a <span class=\"keyword\">string</span> <span class=\"keyword\">of</span> <span class=\"keyword\">length</span> <span class=\"number\">256.</span>  The</div><div class=\"line\">    deletions argument <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> allowed <span class=\"keyword\">for</span> <span class=\"keyword\">Unicode</span> strings.</div><div class=\"line\">(<span class=\"keyword\">END</span>)</div></pre></td></tr></table></figure>\n<p>(也可以<code>s.translate(table, deletions=&#39;&#39;)</code>为格式）</p>\n<p>以<code>maketrans</code>生成的映射表为基准进行字符转换：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; translate(<span class=\"string\">'abcdef'</span>, a)</div><div class=\"line\"><span class=\"string\">'feddef'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; translate(<span class=\"string\">'abcdef'</span>, a, <span class=\"string\">'d'</span>)</div><div class=\"line\"><span class=\"string\">'fedef'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; translate(<span class=\"string\">'abcdef'</span>, a, <span class=\"string\">'dd'</span>)</div><div class=\"line\"><span class=\"string\">'fedef'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; translate(<span class=\"string\">'abcdef'</span>, a, <span class=\"string\">'de'</span>)</div><div class=\"line\"><span class=\"string\">'fedf'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; translate(<span class=\"string\">'abcdef'</span>, a, <span class=\"string\">'ade'</span>)</div><div class=\"line\"><span class=\"string\">'edf'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"自建一个返回闭包的工厂函数-translator\"><a href=\"#自建一个返回闭包的工厂函数-translator\" class=\"headerlink\" title=\"自建一个返回闭包的工厂函数 translator\"></a>自建一个返回闭包的工厂函数 translator</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> string</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">translator</span><span class=\"params\">(frm=<span class=\"string\">''</span>, to=<span class=\"string\">''</span>, delete=<span class=\"string\">''</span>, keep=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len(to) == <span class=\"number\">1</span>:</div><div class=\"line\">        to = to * len(frm)</div><div class=\"line\">    trans = string.maketrans(frm, to)</div><div class=\"line\">    <span class=\"keyword\">if</span> keep <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        allchars = string.maketrans(<span class=\"string\">''</span>, <span class=\"string\">''</span>)</div><div class=\"line\">        delete = allchars.translate(allchars, keep.translate(allchars, delete))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">translate</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> s.translate(trans, delete)</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">return</span> translate</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    digits_only = translator(keep=string.digits)</div><div class=\"line\">    <span class=\"keyword\">print</span> digits_only(<span class=\"string\">'qwedwefaf24215'</span>)</div><div class=\"line\"></div><div class=\"line\">    no_digits = translator(delete=string.digits)</div><div class=\"line\">    <span class=\"keyword\">print</span> no_digits(<span class=\"string\">'qwedwefaf24215'</span>)</div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"string-maketrans\"><a href=\"#string-maketrans\" class=\"headerlink\" title=\"string.maketrans\"></a>string.maketrans</h1><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Help</span> <span class=\"keyword\">on</span> built-<span class=\"keyword\">in</span> <span class=\"keyword\">function</span> maketrans <span class=\"keyword\">in</span> <span class=\"keyword\">module</span> strop:</div><div class=\"line\"></div><div class=\"line\">maketrans(...)</div><div class=\"line\">    maketrans(frm, <span class=\"keyword\">to</span>) -&gt; <span class=\"keyword\">string</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">Return</span> a <span class=\"keyword\">translation</span> <span class=\"keyword\">table</span> (a <span class=\"keyword\">string</span> <span class=\"keyword\">of</span> <span class=\"number\">256</span> <span class=\"keyword\">bytes</span> <span class=\"keyword\">long</span>)</div><div class=\"line\">    suitable <span class=\"keyword\">for</span> <span class=\"keyword\">use</span> <span class=\"keyword\">in</span> string.translate.  The strings frm <span class=\"keyword\">and</span> <span class=\"keyword\">to</span></div><div class=\"line\">    must be <span class=\"keyword\">of</span> the same length.</div><div class=\"line\">(<span class=\"keyword\">END</span>)</div></pre></td></tr></table></figure>\n<p>生成一个供<code>string.translate</code>使用的 ASCII 表，其中<code>frm</code>中的所有字符都依序被替换成<code>to</code>中字符：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; maketrans('abc', 'fed')</div><div class=\"line\">'<span class=\"tag\">\\<span class=\"name\">x</span></span>00<span class=\"tag\">\\<span class=\"name\">x</span></span>01<span class=\"tag\">\\<span class=\"name\">x</span></span>02<span class=\"tag\">\\<span class=\"name\">x</span></span>03<span class=\"tag\">\\<span class=\"name\">x</span></span>04<span class=\"tag\">\\<span class=\"name\">x</span></span>05<span class=\"tag\">\\<span class=\"name\">x</span></span>06<span class=\"tag\">\\<span class=\"name\">x</span></span>07<span class=\"tag\">\\<span class=\"name\">x</span></span>08<span class=\"tag\">\\<span class=\"name\">t</span></span><span class=\"tag\">\\<span class=\"name\">n</span></span><span class=\"tag\">\\<span class=\"name\">x</span></span>0b<span class=\"tag\">\\<span class=\"name\">x</span></span>0c<span class=\"tag\">\\<span class=\"name\">r</span></span><span class=\"tag\">\\<span class=\"name\">x</span></span>0e<span class=\"tag\">\\<span class=\"name\">x</span></span>0f<span class=\"tag\">\\<span class=\"name\">x</span></span>10<span class=\"tag\">\\<span class=\"name\">x</span></span>11<span class=\"tag\">\\<span class=\"name\">x</span></span>12<span class=\"tag\">\\<span class=\"name\">x</span></span>13<span class=\"tag\">\\<span class=\"name\">x</span></span>14<span class=\"tag\">\\<span class=\"name\">x</span></span>15<span class=\"tag\">\\<span class=\"name\">x</span></span>16<span class=\"tag\">\\<span class=\"name\">x</span></span>17<span class=\"tag\">\\<span class=\"name\">x</span></span>18<span class=\"tag\">\\<span class=\"name\">x</span></span>19<span class=\"tag\">\\<span class=\"name\">x</span></span>1a<span class=\"tag\">\\<span class=\"name\">x</span></span>1b<span class=\"tag\">\\<span class=\"name\">x</span></span>1c<span class=\"tag\">\\<span class=\"name\">x</span></span>1d<span class=\"tag\">\\<span class=\"name\">x</span></span>1e<span class=\"tag\">\\<span class=\"name\">x</span></span>1f !\"#<span class=\"formula\">$%&amp;<span class=\"tag\">\\<span class=\"name\">'</span></span>()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[<span class=\"tag\">\\<span class=\"name\">\\</span></span>]^_`feddefghijklmnopqrstuvwxyz&#123;|&#125;~<span class=\"tag\">\\<span class=\"name\">x</span></span>7f<span class=\"tag\">\\<span class=\"name\">x</span></span>80<span class=\"tag\">\\<span class=\"name\">x</span></span>81<span class=\"tag\">\\<span class=\"name\">x</span></span>82<span class=\"tag\">\\<span class=\"name\">x</span></span>83<span class=\"tag\">\\<span class=\"name\">x</span></span>84<span class=\"tag\">\\<span class=\"name\">x</span></span>85<span class=\"tag\">\\<span class=\"name\">x</span></span>86<span class=\"tag\">\\<span class=\"name\">x</span></span>87<span class=\"tag\">\\<span class=\"name\">x</span></span>88<span class=\"tag\">\\<span class=\"name\">x</span></span>89<span class=\"tag\">\\<span class=\"name\">x</span></span>8a<span class=\"tag\">\\<span class=\"name\">x</span></span>8b<span class=\"tag\">\\<span class=\"name\">x</span></span>8c<span class=\"tag\">\\<span class=\"name\">x</span></span>8d<span class=\"tag\">\\<span class=\"name\">x</span></span>8e<span class=\"tag\">\\<span class=\"name\">x</span></span>8f<span class=\"tag\">\\<span class=\"name\">x</span></span>90<span class=\"tag\">\\<span class=\"name\">x</span></span>91<span class=\"tag\">\\<span class=\"name\">x</span></span>92<span class=\"tag\">\\<span class=\"name\">x</span></span>93<span class=\"tag\">\\<span class=\"name\">x</span></span>94<span class=\"tag\">\\<span class=\"name\">x</span></span>95<span class=\"tag\">\\<span class=\"name\">x</span></span>96<span class=\"tag\">\\<span class=\"name\">x</span></span>97<span class=\"tag\">\\<span class=\"name\">x</span></span>98<span class=\"tag\">\\<span class=\"name\">x</span></span>99<span class=\"tag\">\\<span class=\"name\">x</span></span>9a<span class=\"tag\">\\<span class=\"name\">x</span></span>9b<span class=\"tag\">\\<span class=\"name\">x</span></span>9c<span class=\"tag\">\\<span class=\"name\">x</span></span>9d<span class=\"tag\">\\<span class=\"name\">x</span></span>9e<span class=\"tag\">\\<span class=\"name\">x</span></span>9f<span class=\"tag\">\\<span class=\"name\">xa</span></span>0<span class=\"tag\">\\<span class=\"name\">xa</span></span>1<span class=\"tag\">\\<span class=\"name\">xa</span></span>2<span class=\"tag\">\\<span class=\"name\">xa</span></span>3<span class=\"tag\">\\<span class=\"name\">xa</span></span>4<span class=\"tag\">\\<span class=\"name\">xa</span></span>5<span class=\"tag\">\\<span class=\"name\">xa</span></span>6<span class=\"tag\">\\<span class=\"name\">xa</span></span>7<span class=\"tag\">\\<span class=\"name\">xa</span></span>8<span class=\"tag\">\\<span class=\"name\">xa</span></span>9<span class=\"tag\">\\<span class=\"name\">xaa</span></span><span class=\"tag\">\\<span class=\"name\">xab</span></span><span class=\"tag\">\\<span class=\"name\">xac</span></span><span class=\"tag\">\\<span class=\"name\">xad</span></span><span class=\"tag\">\\<span class=\"name\">xae</span></span><span class=\"tag\">\\<span class=\"name\">xaf</span></span><span class=\"tag\">\\<span class=\"name\">xb</span></span>0<span class=\"tag\">\\<span class=\"name\">xb</span></span>1<span class=\"tag\">\\<span class=\"name\">xb</span></span>2<span class=\"tag\">\\<span class=\"name\">xb</span></span>3<span class=\"tag\">\\<span class=\"name\">xb</span></span>4<span class=\"tag\">\\<span class=\"name\">xb</span></span>5<span class=\"tag\">\\<span class=\"name\">xb</span></span>6<span class=\"tag\">\\<span class=\"name\">xb</span></span>7<span class=\"tag\">\\<span class=\"name\">xb</span></span>8<span class=\"tag\">\\<span class=\"name\">xb</span></span>9<span class=\"tag\">\\<span class=\"name\">xba</span></span><span class=\"tag\">\\<span class=\"name\">xbb</span></span><span class=\"tag\">\\<span class=\"name\">xbc</span></span><span class=\"tag\">\\<span class=\"name\">xbd</span></span><span class=\"tag\">\\<span class=\"name\">xbe</span></span><span class=\"tag\">\\<span class=\"name\">xbf</span></span><span class=\"tag\">\\<span class=\"name\">xc</span></span>0<span class=\"tag\">\\<span class=\"name\">xc</span></span>1<span class=\"tag\">\\<span class=\"name\">xc</span></span>2<span class=\"tag\">\\<span class=\"name\">xc</span></span>3<span class=\"tag\">\\<span class=\"name\">xc</span></span>4<span class=\"tag\">\\<span class=\"name\">xc</span></span>5<span class=\"tag\">\\<span class=\"name\">xc</span></span>6<span class=\"tag\">\\<span class=\"name\">xc</span></span>7<span class=\"tag\">\\<span class=\"name\">xc</span></span>8<span class=\"tag\">\\<span class=\"name\">xc</span></span>9<span class=\"tag\">\\<span class=\"name\">xca</span></span><span class=\"tag\">\\<span class=\"name\">xcb</span></span><span class=\"tag\">\\<span class=\"name\">xcc</span></span><span class=\"tag\">\\<span class=\"name\">xcd</span></span><span class=\"tag\">\\<span class=\"name\">xce</span></span><span class=\"tag\">\\<span class=\"name\">xcf</span></span><span class=\"tag\">\\<span class=\"name\">xd</span></span>0<span class=\"tag\">\\<span class=\"name\">xd</span></span>1<span class=\"tag\">\\<span class=\"name\">xd</span></span>2<span class=\"tag\">\\<span class=\"name\">xd</span></span>3<span class=\"tag\">\\<span class=\"name\">xd</span></span>4<span class=\"tag\">\\<span class=\"name\">xd</span></span>5<span class=\"tag\">\\<span class=\"name\">xd</span></span>6<span class=\"tag\">\\<span class=\"name\">xd</span></span>7<span class=\"tag\">\\<span class=\"name\">xd</span></span>8<span class=\"tag\">\\<span class=\"name\">xd</span></span>9<span class=\"tag\">\\<span class=\"name\">xda</span></span><span class=\"tag\">\\<span class=\"name\">xdb</span></span><span class=\"tag\">\\<span class=\"name\">xdc</span></span><span class=\"tag\">\\<span class=\"name\">xdd</span></span><span class=\"tag\">\\<span class=\"name\">xde</span></span><span class=\"tag\">\\<span class=\"name\">xdf</span></span><span class=\"tag\">\\<span class=\"name\">xe</span></span>0<span class=\"tag\">\\<span class=\"name\">xe</span></span>1<span class=\"tag\">\\<span class=\"name\">xe</span></span>2<span class=\"tag\">\\<span class=\"name\">xe</span></span>3<span class=\"tag\">\\<span class=\"name\">xe</span></span>4<span class=\"tag\">\\<span class=\"name\">xe</span></span>5<span class=\"tag\">\\<span class=\"name\">xe</span></span>6<span class=\"tag\">\\<span class=\"name\">xe</span></span>7<span class=\"tag\">\\<span class=\"name\">xe</span></span>8<span class=\"tag\">\\<span class=\"name\">xe</span></span>9<span class=\"tag\">\\<span class=\"name\">xea</span></span><span class=\"tag\">\\<span class=\"name\">xeb</span></span><span class=\"tag\">\\<span class=\"name\">xec</span></span><span class=\"tag\">\\<span class=\"name\">xed</span></span><span class=\"tag\">\\<span class=\"name\">xee</span></span><span class=\"tag\">\\<span class=\"name\">xef</span></span><span class=\"tag\">\\<span class=\"name\">xf</span></span>0<span class=\"tag\">\\<span class=\"name\">xf</span></span>1<span class=\"tag\">\\<span class=\"name\">xf</span></span>2<span class=\"tag\">\\<span class=\"name\">xf</span></span>3<span class=\"tag\">\\<span class=\"name\">xf</span></span>4<span class=\"tag\">\\<span class=\"name\">xf</span></span>5<span class=\"tag\">\\<span class=\"name\">xf</span></span>6<span class=\"tag\">\\<span class=\"name\">xf</span></span>7<span class=\"tag\">\\<span class=\"name\">xf</span></span>8<span class=\"tag\">\\<span class=\"name\">xf</span></span>9<span class=\"tag\">\\<span class=\"name\">xfa</span></span><span class=\"tag\">\\<span class=\"name\">xfb</span></span><span class=\"tag\">\\<span class=\"name\">xfc</span></span><span class=\"tag\">\\<span class=\"name\">xfd</span></span><span class=\"tag\">\\<span class=\"name\">xfe</span></span><span class=\"tag\">\\<span class=\"name\">xff</span></span>'</div><div class=\"line\">&gt;&gt;&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"string-translate\"><a href=\"#string-translate\" class=\"headerlink\" title=\"string.translate\"></a>string.translate</h1><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Help</span> <span class=\"keyword\">on</span> <span class=\"keyword\">function</span> <span class=\"keyword\">translate</span> <span class=\"keyword\">in</span> <span class=\"keyword\">module</span> <span class=\"keyword\">string</span>:</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">translate</span>(s, <span class=\"keyword\">table</span>, deletions=<span class=\"string\">''</span>)</div><div class=\"line\">    <span class=\"keyword\">translate</span>(s,<span class=\"keyword\">table</span> [,deletions]) -&gt; <span class=\"keyword\">string</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">Return</span> a copy <span class=\"keyword\">of</span> the <span class=\"keyword\">string</span> s, <span class=\"keyword\">where</span> all <span class=\"keyword\">characters</span> occurring</div><div class=\"line\">    <span class=\"keyword\">in</span> the optional argument deletions <span class=\"keyword\">are</span> removed, <span class=\"keyword\">and</span> the</div><div class=\"line\">    remaining <span class=\"keyword\">characters</span> have been mapped <span class=\"keyword\">through</span> the given</div><div class=\"line\">    <span class=\"keyword\">translation</span> <span class=\"keyword\">table</span>, which must be a <span class=\"keyword\">string</span> <span class=\"keyword\">of</span> <span class=\"keyword\">length</span> <span class=\"number\">256.</span>  The</div><div class=\"line\">    deletions argument <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> allowed <span class=\"keyword\">for</span> <span class=\"keyword\">Unicode</span> strings.</div><div class=\"line\">(<span class=\"keyword\">END</span>)</div></pre></td></tr></table></figure>\n<p>(也可以<code>s.translate(table, deletions=&#39;&#39;)</code>为格式）</p>\n<p>以<code>maketrans</code>生成的映射表为基准进行字符转换：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; translate(<span class=\"string\">'abcdef'</span>, a)</div><div class=\"line\"><span class=\"string\">'feddef'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; translate(<span class=\"string\">'abcdef'</span>, a, <span class=\"string\">'d'</span>)</div><div class=\"line\"><span class=\"string\">'fedef'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; translate(<span class=\"string\">'abcdef'</span>, a, <span class=\"string\">'dd'</span>)</div><div class=\"line\"><span class=\"string\">'fedef'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; translate(<span class=\"string\">'abcdef'</span>, a, <span class=\"string\">'de'</span>)</div><div class=\"line\"><span class=\"string\">'fedf'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; translate(<span class=\"string\">'abcdef'</span>, a, <span class=\"string\">'ade'</span>)</div><div class=\"line\"><span class=\"string\">'edf'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"自建一个返回闭包的工厂函数-translator\"><a href=\"#自建一个返回闭包的工厂函数-translator\" class=\"headerlink\" title=\"自建一个返回闭包的工厂函数 translator\"></a>自建一个返回闭包的工厂函数 translator</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> string</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">translator</span><span class=\"params\">(frm=<span class=\"string\">''</span>, to=<span class=\"string\">''</span>, delete=<span class=\"string\">''</span>, keep=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len(to) == <span class=\"number\">1</span>:</div><div class=\"line\">        to = to * len(frm)</div><div class=\"line\">    trans = string.maketrans(frm, to)</div><div class=\"line\">    <span class=\"keyword\">if</span> keep <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        allchars = string.maketrans(<span class=\"string\">''</span>, <span class=\"string\">''</span>)</div><div class=\"line\">        delete = allchars.translate(allchars, keep.translate(allchars, delete))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">translate</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> s.translate(trans, delete)</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">return</span> translate</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    digits_only = translator(keep=string.digits)</div><div class=\"line\">    <span class=\"keyword\">print</span> digits_only(<span class=\"string\">'qwedwefaf24215'</span>)</div><div class=\"line\"></div><div class=\"line\">    no_digits = translator(delete=string.digits)</div><div class=\"line\">    <span class=\"keyword\">print</span> no_digits(<span class=\"string\">'qwedwefaf24215'</span>)</div></pre></td></tr></table></figure>"},{"title":"python-magic has no attribute 'from_file'","date":"2016-10-11T01:32:53.000Z","_content":"\n[python-magic](https://github.com/ahupp/python-magic) 是一个用来判断文件类型的第三方库，效果与 linux 命令`file`类似\n\n使用`pip install python-magic`安装后，在 mac 上还需要`brew install libmagic`，之后即可正常使用\n\n```\n>>> import magic\n>>> magic.from_file('readme.md')\n'ASCII text'\n```\n\n不过在 kali rolling 上则会报错\n\n```\n>>> import magic\n>>> magic.from_file(\"testdata/test.pdf\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'module' object has no attribute 'from_file'\n```\n\n在 [stackoverflow](http://stackoverflow.com/questions/25286176/how-to-use-python-magic-5-19-1) 中有人提到原因：\n\npython-magic 有多种实现，apt-get 中预装了 5.19.1 版，`import`时优先于刚刚用 pip 安装的版本，使用起来相对复杂一些\n\n```\n>>> import magic\n>>> m=magic.open(magic.MAGIC_NONE)\n>>> m.load()\n0\n>>> m.file('/etc/passwd')\n'ASCII text'\n>>> m.file('/usr/share/cups/data/default.pdf')\n'PDF document, version 1.5'\n\n\n>>> m=magic.open(magic.MAGIC_MIME)\n>>> m.load()\n0\n>>> m.file('/etc/passwd')\n'text/plain; charset=us-ascii'\n>>> m.file('/usr/share/cups/data/default.pdf')\n'application/pdf; charset=binary'\n```\n\n如果想使用带有`from_file`方法的版本将其替换为 pip 版即可\n\n```\napt-get remove python-magic\npip install python-magic\n```\n\n\n","source":"_posts/python-magic.md","raw":"---\ntitle: python-magic has no attribute 'from_file'\ndate: 2016-10-11 09:32:53\ncategory: Python\ntags: [Python, python-magic, mime, apt-get, pip]\n---\n\n[python-magic](https://github.com/ahupp/python-magic) 是一个用来判断文件类型的第三方库，效果与 linux 命令`file`类似\n\n使用`pip install python-magic`安装后，在 mac 上还需要`brew install libmagic`，之后即可正常使用\n\n```\n>>> import magic\n>>> magic.from_file('readme.md')\n'ASCII text'\n```\n\n不过在 kali rolling 上则会报错\n\n```\n>>> import magic\n>>> magic.from_file(\"testdata/test.pdf\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'module' object has no attribute 'from_file'\n```\n\n在 [stackoverflow](http://stackoverflow.com/questions/25286176/how-to-use-python-magic-5-19-1) 中有人提到原因：\n\npython-magic 有多种实现，apt-get 中预装了 5.19.1 版，`import`时优先于刚刚用 pip 安装的版本，使用起来相对复杂一些\n\n```\n>>> import magic\n>>> m=magic.open(magic.MAGIC_NONE)\n>>> m.load()\n0\n>>> m.file('/etc/passwd')\n'ASCII text'\n>>> m.file('/usr/share/cups/data/default.pdf')\n'PDF document, version 1.5'\n\n\n>>> m=magic.open(magic.MAGIC_MIME)\n>>> m.load()\n0\n>>> m.file('/etc/passwd')\n'text/plain; charset=us-ascii'\n>>> m.file('/usr/share/cups/data/default.pdf')\n'application/pdf; charset=binary'\n```\n\n如果想使用带有`from_file`方法的版本将其替换为 pip 版即可\n\n```\napt-get remove python-magic\npip install python-magic\n```\n\n\n","slug":"python-magic","published":1,"updated":"2016-10-11T02:00:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fv500103npxvoi3n9bx","content":"<p><a href=\"https://github.com/ahupp/python-magic\" target=\"_blank\" rel=\"external\">python-magic</a> 是一个用来判断文件类型的第三方库，效果与 linux 命令<code>file</code>类似</p>\n<p>使用<code>pip install python-magic</code>安装后，在 mac 上还需要<code>brew install libmagic</code>，之后即可正常使用</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; import magic</div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; magic.from_file(<span class=\"string\">'readme.md'</span>)</div><div class=\"line\"><span class=\"string\">'ASCII text'</span></div></pre></td></tr></table></figure>\n<p>不过在 kali rolling 上则会报错</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; import magic</div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; magic.from_file(<span class=\"string\">\"testdata/test.pdf\"</span>)</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;<span class=\"class\"><span class=\"keyword\">module</span>&gt;</span></div><div class=\"line\"><span class=\"symbol\">AttributeError:</span> <span class=\"string\">'module'</span> object has no attribute <span class=\"string\">'from_file'</span></div></pre></td></tr></table></figure>\n<p>在 <a href=\"http://stackoverflow.com/questions/25286176/how-to-use-python-magic-5-19-1\" target=\"_blank\" rel=\"external\">stackoverflow</a> 中有人提到原因：</p>\n<p>python-magic 有多种实现，apt-get 中预装了 5.19.1 版，<code>import</code>时优先于刚刚用 pip 安装的版本，使用起来相对复杂一些</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; import magic</div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m=magic.open(magic.MAGIC_NONE)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.load()</div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.file(<span class=\"string\">'/etc/passwd'</span>)</div><div class=\"line\"><span class=\"string\">'ASCII text'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.file(<span class=\"string\">'/usr/share/cups/data/default.pdf'</span>)</div><div class=\"line\"><span class=\"string\">'PDF document, version 1.5'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m=magic.open(magic.MAGIC_MIME)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.load()</div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.file(<span class=\"string\">'/etc/passwd'</span>)</div><div class=\"line\"><span class=\"string\">'text/plain; charset=us-ascii'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.file(<span class=\"string\">'/usr/share/cups/data/default.pdf'</span>)</div><div class=\"line\"><span class=\"string\">'application/pdf; charset=binary'</span></div></pre></td></tr></table></figure>\n<p>如果想使用带有<code>from_file</code>方法的版本将其替换为 pip 版即可</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><div class=\"line\">apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">python</span>-magic</div><div class=\"line\">pip install <span class=\"keyword\">python</span>-magic</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"https://github.com/ahupp/python-magic\">python-magic</a> 是一个用来判断文件类型的第三方库，效果与 linux 命令<code>file</code>类似</p>\n<p>使用<code>pip install python-magic</code>安装后，在 mac 上还需要<code>brew install libmagic</code>，之后即可正常使用</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; import magic</div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; magic.from_file(<span class=\"string\">'readme.md'</span>)</div><div class=\"line\"><span class=\"string\">'ASCII text'</span></div></pre></td></tr></table></figure>\n<p>不过在 kali rolling 上则会报错</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; import magic</div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; magic.from_file(<span class=\"string\">\"testdata/test.pdf\"</span>)</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;<span class=\"class\"><span class=\"keyword\">module</span>&gt;</span></div><div class=\"line\"><span class=\"symbol\">AttributeError:</span> <span class=\"string\">'module'</span> object has no attribute <span class=\"string\">'from_file'</span></div></pre></td></tr></table></figure>\n<p>在 <a href=\"http://stackoverflow.com/questions/25286176/how-to-use-python-magic-5-19-1\">stackoverflow</a> 中有人提到原因：</p>\n<p>python-magic 有多种实现，apt-get 中预装了 5.19.1 版，<code>import</code>时优先于刚刚用 pip 安装的版本，使用起来相对复杂一些</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; import magic</div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m=magic.open(magic.MAGIC_NONE)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.load()</div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.file(<span class=\"string\">'/etc/passwd'</span>)</div><div class=\"line\"><span class=\"string\">'ASCII text'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.file(<span class=\"string\">'/usr/share/cups/data/default.pdf'</span>)</div><div class=\"line\"><span class=\"string\">'PDF document, version 1.5'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m=magic.open(magic.MAGIC_MIME)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.load()</div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.file(<span class=\"string\">'/etc/passwd'</span>)</div><div class=\"line\"><span class=\"string\">'text/plain; charset=us-ascii'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; m.file(<span class=\"string\">'/usr/share/cups/data/default.pdf'</span>)</div><div class=\"line\"><span class=\"string\">'application/pdf; charset=binary'</span></div></pre></td></tr></table></figure>\n<p>如果想使用带有<code>from_file</code>方法的版本将其替换为 pip 版即可</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><div class=\"line\">apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">python</span>-magic</div><div class=\"line\">pip install <span class=\"keyword\">python</span>-magic</div></pre></td></tr></table></figure>\n"},{"title":"Python 控制终端输出颜色 & ANSI 控制码","date":"2016-10-12T11:12:40.000Z","_content":"\n今天知道了一个控制终端输出颜色的第三方库 termcolor，代码很简单：\n\n```\n# coding: utf-8\n# Copyright (c) 2008-2011 Volvox Development Team\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n#\n# Author: Konstantin Lepa <konstantin.lepa@gmail.com>\n\n\"\"\"ANSII Color formatting for output in terminal.\"\"\"\n\nfrom __future__ import print_function\nimport os\n\n\n__ALL__ = [ 'colored', 'cprint' ]\n\nVERSION = (1, 1, 0)\n\nATTRIBUTES = dict(\n        list(zip([\n            'bold',\n            'dark',\n            '',\n            'underline',\n            'blink',\n            '',\n            'reverse',\n            'concealed'\n            ],\n            list(range(1, 9))\n            ))\n        )\ndel ATTRIBUTES['']\n\n\nHIGHLIGHTS = dict(\n        list(zip([\n            'on_grey',\n            'on_red',\n            'on_green',\n            'on_yellow',\n            'on_blue',\n            'on_magenta',\n            'on_cyan',\n            'on_white'\n            ],\n            list(range(40, 48))\n            ))\n        )\n\n\nCOLORS = dict(\n        list(zip([\n            'grey',\n            'red',\n            'green',\n            'yellow',\n            'blue',\n            'magenta',\n            'cyan',\n            'white',\n            ],\n            list(range(30, 38))\n            ))\n        )\n\n\nRESET = '\\033[0m'\n\n\ndef colored(text, color=None, on_color=None, attrs=None):\n    \"\"\"Colorize text.\n\n    Available text colors:\n        red, green, yellow, blue, magenta, cyan, white.\n\n    Available text highlights:\n        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white.\n\n    Available attributes:\n        bold, dark, underline, blink, reverse, concealed.\n\n    Example:\n        colored('Hello, World!', 'red', 'on_grey', ['blue', 'blink'])\n        colored('Hello, World!', 'green')\n    \"\"\"\n    if os.getenv('ANSI_COLORS_DISABLED') is None:\n        fmt_str = '\\033[%dm%s'\n        if color is not None:\n            text = fmt_str % (COLORS[color], text)\n\n        if on_color is not None:\n            text = fmt_str % (HIGHLIGHTS[on_color], text)\n\n        if attrs is not None:\n            for attr in attrs:\n                text = fmt_str % (ATTRIBUTES[attr], text)\n\n        text += RESET\n    return text\n\n\ndef cprint(text, color=None, on_color=None, attrs=None, **kwargs):\n    \"\"\"Print colorize text.\n\n    It accepts arguments of print function.\n    \"\"\"\n\n    print((colored(text, color, on_color, attrs)), **kwargs)\n\n\nif __name__ == '__main__':\n    print('Current terminal type: %s' % os.getenv('TERM'))\n    print('Test basic colors:')\n    cprint('Grey color', 'grey')\n    cprint('Red color', 'red')\n    cprint('Green color', 'green')\n    cprint('Yellow color', 'yellow')\n    cprint('Blue color', 'blue')\n    cprint('Magenta color', 'magenta')\n    cprint('Cyan color', 'cyan')\n    cprint('White color', 'white')\n    print(('-' * 78))\n\n    print('Test highlights:')\n    cprint('On grey color', on_color='on_grey')\n    cprint('On red color', on_color='on_red')\n    cprint('On green color', on_color='on_green')\n    cprint('On yellow color', on_color='on_yellow')\n    cprint('On blue color', on_color='on_blue')\n    cprint('On magenta color', on_color='on_magenta')\n    cprint('On cyan color', on_color='on_cyan')\n    cprint('On white color', color='grey', on_color='on_white')\n    print('-' * 78)\n\n    print('Test attributes:')\n    cprint('Bold grey color', 'grey', attrs=['bold'])\n    cprint('Dark red color', 'red', attrs=['dark'])\n    cprint('Underline green color', 'green', attrs=['underline'])\n    cprint('Blink yellow color', 'yellow', attrs=['blink'])\n    cprint('Reversed blue color', 'blue', attrs=['reverse'])\n    cprint('Concealed Magenta color', 'magenta', attrs=['concealed'])\n    cprint('Bold underline reverse cyan color', 'cyan',\n            attrs=['bold', 'underline', 'reverse'])\n    cprint('Dark blink concealed white color', 'white',\n            attrs=['dark', 'blink', 'concealed'])\n    print(('-' * 78))\n\n    print('Test mixing:')\n    cprint('Underline red on grey color', 'red', 'on_grey',\n            ['underline'])\n    cprint('Reversed green on red color', 'green', 'on_red', ['reverse'])\n\n```\n\n不过它不支持 Windows，另外有一个复杂一些但是全平台通用的 colorama，见 http://stackoverflow.com/questions/21858567/why-termcolor-doesnt-work-in-python\n\n\n\n代码中设置颜色的部分有点费解，查阅其用到的知识点如下\n\n# ANSI 控制码\n\nANSI 控制码即控制序列（Control Sequence）。大多数终端模拟器（Unix，Linux，Windows）都支持 ANSI 控制码。ANSI 控制码以 ESC 字符（ASCII 27/0x1b/033）开头，分为两类：\n\n- 非 CSI 序列   \n    双字符控制码，格式为`ESC``字符`，第二个字符的范围是 ASCII 64~95 ('@'~'_') \n- CSI 序列   \n    多于两个字符，格式为`ESC[``其余字符`\n\n常用序列表可见 https://en.wikipedia.org/wiki/ANSI_escape_code\n  \n# 颜色控制\n  \n其中设定终端文本颜色的序列格式为`ESC[``编号``;编号``m`    \n    \n颜色分为字体色（前景色）和背景色，30~37用来设置字体色，40~47设置背景色，其他常用控制码：\n\n- \\033[0m   重置所有属性   \n- \\033[1m   设置高亮度   \n- \\033[4m   下划线   \n- \\033[5m   闪烁   \n- \\033[7m   反色   \n  \n# 用例\n\n`\\033[1;31;40m`\n1-高亮显示，31-前景色红色，40-背景色黑色\n\n\n`\\033[0m`\n重置，即恢复默认设置\n\n\n\n","source":"_posts/python-termcolor.md","raw":"---\ntitle: Python 控制终端输出颜色 & ANSI 控制码\ndate: 2016-10-12 19:12:40\ncategory: [Python]\ntags: [Python, ANSI, termcolor, colorama]\n---\n\n今天知道了一个控制终端输出颜色的第三方库 termcolor，代码很简单：\n\n```\n# coding: utf-8\n# Copyright (c) 2008-2011 Volvox Development Team\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n#\n# Author: Konstantin Lepa <konstantin.lepa@gmail.com>\n\n\"\"\"ANSII Color formatting for output in terminal.\"\"\"\n\nfrom __future__ import print_function\nimport os\n\n\n__ALL__ = [ 'colored', 'cprint' ]\n\nVERSION = (1, 1, 0)\n\nATTRIBUTES = dict(\n        list(zip([\n            'bold',\n            'dark',\n            '',\n            'underline',\n            'blink',\n            '',\n            'reverse',\n            'concealed'\n            ],\n            list(range(1, 9))\n            ))\n        )\ndel ATTRIBUTES['']\n\n\nHIGHLIGHTS = dict(\n        list(zip([\n            'on_grey',\n            'on_red',\n            'on_green',\n            'on_yellow',\n            'on_blue',\n            'on_magenta',\n            'on_cyan',\n            'on_white'\n            ],\n            list(range(40, 48))\n            ))\n        )\n\n\nCOLORS = dict(\n        list(zip([\n            'grey',\n            'red',\n            'green',\n            'yellow',\n            'blue',\n            'magenta',\n            'cyan',\n            'white',\n            ],\n            list(range(30, 38))\n            ))\n        )\n\n\nRESET = '\\033[0m'\n\n\ndef colored(text, color=None, on_color=None, attrs=None):\n    \"\"\"Colorize text.\n\n    Available text colors:\n        red, green, yellow, blue, magenta, cyan, white.\n\n    Available text highlights:\n        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white.\n\n    Available attributes:\n        bold, dark, underline, blink, reverse, concealed.\n\n    Example:\n        colored('Hello, World!', 'red', 'on_grey', ['blue', 'blink'])\n        colored('Hello, World!', 'green')\n    \"\"\"\n    if os.getenv('ANSI_COLORS_DISABLED') is None:\n        fmt_str = '\\033[%dm%s'\n        if color is not None:\n            text = fmt_str % (COLORS[color], text)\n\n        if on_color is not None:\n            text = fmt_str % (HIGHLIGHTS[on_color], text)\n\n        if attrs is not None:\n            for attr in attrs:\n                text = fmt_str % (ATTRIBUTES[attr], text)\n\n        text += RESET\n    return text\n\n\ndef cprint(text, color=None, on_color=None, attrs=None, **kwargs):\n    \"\"\"Print colorize text.\n\n    It accepts arguments of print function.\n    \"\"\"\n\n    print((colored(text, color, on_color, attrs)), **kwargs)\n\n\nif __name__ == '__main__':\n    print('Current terminal type: %s' % os.getenv('TERM'))\n    print('Test basic colors:')\n    cprint('Grey color', 'grey')\n    cprint('Red color', 'red')\n    cprint('Green color', 'green')\n    cprint('Yellow color', 'yellow')\n    cprint('Blue color', 'blue')\n    cprint('Magenta color', 'magenta')\n    cprint('Cyan color', 'cyan')\n    cprint('White color', 'white')\n    print(('-' * 78))\n\n    print('Test highlights:')\n    cprint('On grey color', on_color='on_grey')\n    cprint('On red color', on_color='on_red')\n    cprint('On green color', on_color='on_green')\n    cprint('On yellow color', on_color='on_yellow')\n    cprint('On blue color', on_color='on_blue')\n    cprint('On magenta color', on_color='on_magenta')\n    cprint('On cyan color', on_color='on_cyan')\n    cprint('On white color', color='grey', on_color='on_white')\n    print('-' * 78)\n\n    print('Test attributes:')\n    cprint('Bold grey color', 'grey', attrs=['bold'])\n    cprint('Dark red color', 'red', attrs=['dark'])\n    cprint('Underline green color', 'green', attrs=['underline'])\n    cprint('Blink yellow color', 'yellow', attrs=['blink'])\n    cprint('Reversed blue color', 'blue', attrs=['reverse'])\n    cprint('Concealed Magenta color', 'magenta', attrs=['concealed'])\n    cprint('Bold underline reverse cyan color', 'cyan',\n            attrs=['bold', 'underline', 'reverse'])\n    cprint('Dark blink concealed white color', 'white',\n            attrs=['dark', 'blink', 'concealed'])\n    print(('-' * 78))\n\n    print('Test mixing:')\n    cprint('Underline red on grey color', 'red', 'on_grey',\n            ['underline'])\n    cprint('Reversed green on red color', 'green', 'on_red', ['reverse'])\n\n```\n\n不过它不支持 Windows，另外有一个复杂一些但是全平台通用的 colorama，见 http://stackoverflow.com/questions/21858567/why-termcolor-doesnt-work-in-python\n\n\n\n代码中设置颜色的部分有点费解，查阅其用到的知识点如下\n\n# ANSI 控制码\n\nANSI 控制码即控制序列（Control Sequence）。大多数终端模拟器（Unix，Linux，Windows）都支持 ANSI 控制码。ANSI 控制码以 ESC 字符（ASCII 27/0x1b/033）开头，分为两类：\n\n- 非 CSI 序列   \n    双字符控制码，格式为`ESC``字符`，第二个字符的范围是 ASCII 64~95 ('@'~'_') \n- CSI 序列   \n    多于两个字符，格式为`ESC[``其余字符`\n\n常用序列表可见 https://en.wikipedia.org/wiki/ANSI_escape_code\n  \n# 颜色控制\n  \n其中设定终端文本颜色的序列格式为`ESC[``编号``;编号``m`    \n    \n颜色分为字体色（前景色）和背景色，30~37用来设置字体色，40~47设置背景色，其他常用控制码：\n\n- \\033[0m   重置所有属性   \n- \\033[1m   设置高亮度   \n- \\033[4m   下划线   \n- \\033[5m   闪烁   \n- \\033[7m   反色   \n  \n# 用例\n\n`\\033[1;31;40m`\n1-高亮显示，31-前景色红色，40-背景色黑色\n\n\n`\\033[0m`\n重置，即恢复默认设置\n\n\n\n","slug":"python-termcolor","published":1,"updated":"2016-10-12T12:22:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fv600113npxt44yjww6","content":"<p>今天知道了一个控制终端输出颜色的第三方库 termcolor，代码很简单：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># Copyright (c) 2008-2011 Volvox Development Team</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class=\"line\"><span class=\"comment\"># of this software and associated documentation files (the \"Software\"), to deal</span></div><div class=\"line\"><span class=\"comment\"># in the Software without restriction, including without limitation the rights</span></div><div class=\"line\"><span class=\"comment\"># to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></div><div class=\"line\"><span class=\"comment\"># copies of the Software, and to permit persons to whom the Software is</span></div><div class=\"line\"><span class=\"comment\"># furnished to do so, subject to the following conditions:</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># The above copyright notice and this permission notice shall be included in</span></div><div class=\"line\"><span class=\"comment\"># all copies or substantial portions of the Software.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class=\"line\"><span class=\"comment\"># IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class=\"line\"><span class=\"comment\"># FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class=\"line\"><span class=\"comment\"># AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class=\"line\"><span class=\"comment\"># LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class=\"line\"><span class=\"comment\"># OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span></div><div class=\"line\"><span class=\"comment\"># THE SOFTWARE.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Author: Konstantin Lepa &lt;konstantin.lepa@gmail.com&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"\"\"ANSII Color formatting for output in terminal.\"\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">__ALL__ = [ <span class=\"string\">'colored'</span>, <span class=\"string\">'cprint'</span> ]</div><div class=\"line\"></div><div class=\"line\">VERSION = (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">ATTRIBUTES = dict(</div><div class=\"line\">        list(zip([</div><div class=\"line\">            <span class=\"string\">'bold'</span>,</div><div class=\"line\">            <span class=\"string\">'dark'</span>,</div><div class=\"line\">            <span class=\"string\">''</span>,</div><div class=\"line\">            <span class=\"string\">'underline'</span>,</div><div class=\"line\">            <span class=\"string\">'blink'</span>,</div><div class=\"line\">            <span class=\"string\">''</span>,</div><div class=\"line\">            <span class=\"string\">'reverse'</span>,</div><div class=\"line\">            <span class=\"string\">'concealed'</span></div><div class=\"line\">            ],</div><div class=\"line\">            list(range(<span class=\"number\">1</span>, <span class=\"number\">9</span>))</div><div class=\"line\">            ))</div><div class=\"line\">        )</div><div class=\"line\"><span class=\"keyword\">del</span> ATTRIBUTES[<span class=\"string\">''</span>]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">HIGHLIGHTS = dict(</div><div class=\"line\">        list(zip([</div><div class=\"line\">            <span class=\"string\">'on_grey'</span>,</div><div class=\"line\">            <span class=\"string\">'on_red'</span>,</div><div class=\"line\">            <span class=\"string\">'on_green'</span>,</div><div class=\"line\">            <span class=\"string\">'on_yellow'</span>,</div><div class=\"line\">            <span class=\"string\">'on_blue'</span>,</div><div class=\"line\">            <span class=\"string\">'on_magenta'</span>,</div><div class=\"line\">            <span class=\"string\">'on_cyan'</span>,</div><div class=\"line\">            <span class=\"string\">'on_white'</span></div><div class=\"line\">            ],</div><div class=\"line\">            list(range(<span class=\"number\">40</span>, <span class=\"number\">48</span>))</div><div class=\"line\">            ))</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">COLORS = dict(</div><div class=\"line\">        list(zip([</div><div class=\"line\">            <span class=\"string\">'grey'</span>,</div><div class=\"line\">            <span class=\"string\">'red'</span>,</div><div class=\"line\">            <span class=\"string\">'green'</span>,</div><div class=\"line\">            <span class=\"string\">'yellow'</span>,</div><div class=\"line\">            <span class=\"string\">'blue'</span>,</div><div class=\"line\">            <span class=\"string\">'magenta'</span>,</div><div class=\"line\">            <span class=\"string\">'cyan'</span>,</div><div class=\"line\">            <span class=\"string\">'white'</span>,</div><div class=\"line\">            ],</div><div class=\"line\">            list(range(<span class=\"number\">30</span>, <span class=\"number\">38</span>))</div><div class=\"line\">            ))</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">RESET = <span class=\"string\">'\\033[0m'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">colored</span><span class=\"params\">(text, color=None, on_color=None, attrs=None)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"Colorize text.</span></div><div class=\"line\"></div><div class=\"line\">    Available text colors:</div><div class=\"line\">        red, green, yellow, blue, magenta, cyan, white.</div><div class=\"line\"></div><div class=\"line\">    Available text highlights:</div><div class=\"line\">        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white.</div><div class=\"line\"></div><div class=\"line\">    Available attributes:</div><div class=\"line\">        bold, dark, underline, blink, reverse, concealed.</div><div class=\"line\"></div><div class=\"line\">    Example:</div><div class=\"line\">        colored('Hello, World!', 'red', 'on_grey', ['blue', 'blink'])</div><div class=\"line\">        colored('Hello, World!', 'green')</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"keyword\">if</span> os.getenv(<span class=\"string\">'ANSI_COLORS_DISABLED'</span>) <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        fmt_str = <span class=\"string\">'\\033[%dm%s'</span></div><div class=\"line\">        <span class=\"keyword\">if</span> color <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            text = fmt_str % (COLORS[color], text)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> on_color <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            text = fmt_str % (HIGHLIGHTS[on_color], text)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> attrs <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span> attr <span class=\"keyword\">in</span> attrs:</div><div class=\"line\">                text = fmt_str % (ATTRIBUTES[attr], text)</div><div class=\"line\"></div><div class=\"line\">        text += RESET</div><div class=\"line\">    <span class=\"keyword\">return</span> text</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cprint</span><span class=\"params\">(text, color=None, on_color=None, attrs=None, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"Print colorize text.</span></div><div class=\"line\"></div><div class=\"line\">    It accepts arguments of print function.</div><div class=\"line\">    \"\"\"</div><div class=\"line\"></div><div class=\"line\">    print((colored(text, color, on_color, attrs)), **kwargs)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">'Current terminal type: %s'</span> % os.getenv(<span class=\"string\">'TERM'</span>))</div><div class=\"line\">    print(<span class=\"string\">'Test basic colors:'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Grey color'</span>, <span class=\"string\">'grey'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Red color'</span>, <span class=\"string\">'red'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Green color'</span>, <span class=\"string\">'green'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Yellow color'</span>, <span class=\"string\">'yellow'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Blue color'</span>, <span class=\"string\">'blue'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Magenta color'</span>, <span class=\"string\">'magenta'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Cyan color'</span>, <span class=\"string\">'cyan'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'White color'</span>, <span class=\"string\">'white'</span>)</div><div class=\"line\">    print((<span class=\"string\">'-'</span> * <span class=\"number\">78</span>))</div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'Test highlights:'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On grey color'</span>, on_color=<span class=\"string\">'on_grey'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On red color'</span>, on_color=<span class=\"string\">'on_red'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On green color'</span>, on_color=<span class=\"string\">'on_green'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On yellow color'</span>, on_color=<span class=\"string\">'on_yellow'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On blue color'</span>, on_color=<span class=\"string\">'on_blue'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On magenta color'</span>, on_color=<span class=\"string\">'on_magenta'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On cyan color'</span>, on_color=<span class=\"string\">'on_cyan'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On white color'</span>, color=<span class=\"string\">'grey'</span>, on_color=<span class=\"string\">'on_white'</span>)</div><div class=\"line\">    print(<span class=\"string\">'-'</span> * <span class=\"number\">78</span>)</div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'Test attributes:'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Bold grey color'</span>, <span class=\"string\">'grey'</span>, attrs=[<span class=\"string\">'bold'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Dark red color'</span>, <span class=\"string\">'red'</span>, attrs=[<span class=\"string\">'dark'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Underline green color'</span>, <span class=\"string\">'green'</span>, attrs=[<span class=\"string\">'underline'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Blink yellow color'</span>, <span class=\"string\">'yellow'</span>, attrs=[<span class=\"string\">'blink'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Reversed blue color'</span>, <span class=\"string\">'blue'</span>, attrs=[<span class=\"string\">'reverse'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Concealed Magenta color'</span>, <span class=\"string\">'magenta'</span>, attrs=[<span class=\"string\">'concealed'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Bold underline reverse cyan color'</span>, <span class=\"string\">'cyan'</span>,</div><div class=\"line\">            attrs=[<span class=\"string\">'bold'</span>, <span class=\"string\">'underline'</span>, <span class=\"string\">'reverse'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Dark blink concealed white color'</span>, <span class=\"string\">'white'</span>,</div><div class=\"line\">            attrs=[<span class=\"string\">'dark'</span>, <span class=\"string\">'blink'</span>, <span class=\"string\">'concealed'</span>])</div><div class=\"line\">    print((<span class=\"string\">'-'</span> * <span class=\"number\">78</span>))</div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'Test mixing:'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Underline red on grey color'</span>, <span class=\"string\">'red'</span>, <span class=\"string\">'on_grey'</span>,</div><div class=\"line\">            [<span class=\"string\">'underline'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Reversed green on red color'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'on_red'</span>, [<span class=\"string\">'reverse'</span>])</div></pre></td></tr></table></figure>\n<p>不过它不支持 Windows，另外有一个复杂一些但是全平台通用的 colorama，见 <a href=\"http://stackoverflow.com/questions/21858567/why-termcolor-doesnt-work-in-python\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/21858567/why-termcolor-doesnt-work-in-python</a></p>\n<p>代码中设置颜色的部分有点费解，查阅其用到的知识点如下</p>\n<h1 id=\"ANSI-控制码\"><a href=\"#ANSI-控制码\" class=\"headerlink\" title=\"ANSI 控制码\"></a>ANSI 控制码</h1><p>ANSI 控制码即控制序列（Control Sequence）。大多数终端模拟器（Unix，Linux，Windows）都支持 ANSI 控制码。ANSI 控制码以 ESC 字符（ASCII 27/0x1b/033）开头，分为两类：</p>\n<ul>\n<li>非 CSI 序列<br>  双字符控制码，格式为<code>ESC``字符</code>，第二个字符的范围是 ASCII 64~95 (‘@’~’_’) </li>\n<li>CSI 序列<br>  多于两个字符，格式为<code>ESC[``其余字符</code></li>\n</ul>\n<p>常用序列表可见 <a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code\" target=\"_blank\" rel=\"external\">https://en.wikipedia.org/wiki/ANSI_escape_code</a></p>\n<h1 id=\"颜色控制\"><a href=\"#颜色控制\" class=\"headerlink\" title=\"颜色控制\"></a>颜色控制</h1><p>其中设定终端文本颜色的序列格式为<code>ESC[``编号``;编号``m</code>    </p>\n<p>颜色分为字体色（前景色）和背景色，30~37用来设置字体色，40~47设置背景色，其他常用控制码：</p>\n<ul>\n<li>\\033[0m   重置所有属性   </li>\n<li>\\033[1m   设置高亮度   </li>\n<li>\\033[4m   下划线   </li>\n<li>\\033[5m   闪烁   </li>\n<li>\\033[7m   反色   </li>\n</ul>\n<h1 id=\"用例\"><a href=\"#用例\" class=\"headerlink\" title=\"用例\"></a>用例</h1><p><code>\\033[1;31;40m</code><br>1-高亮显示，31-前景色红色，40-背景色黑色</p>\n<p><code>\\033[0m</code><br>重置，即恢复默认设置</p>\n","excerpt":"","more":"<p>今天知道了一个控制终端输出颜色的第三方库 termcolor，代码很简单：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"><span class=\"comment\"># Copyright (c) 2008-2011 Volvox Development Team</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class=\"line\"><span class=\"comment\"># of this software and associated documentation files (the \"Software\"), to deal</span></div><div class=\"line\"><span class=\"comment\"># in the Software without restriction, including without limitation the rights</span></div><div class=\"line\"><span class=\"comment\"># to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></div><div class=\"line\"><span class=\"comment\"># copies of the Software, and to permit persons to whom the Software is</span></div><div class=\"line\"><span class=\"comment\"># furnished to do so, subject to the following conditions:</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># The above copyright notice and this permission notice shall be included in</span></div><div class=\"line\"><span class=\"comment\"># all copies or substantial portions of the Software.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class=\"line\"><span class=\"comment\"># IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class=\"line\"><span class=\"comment\"># FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class=\"line\"><span class=\"comment\"># AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class=\"line\"><span class=\"comment\"># LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class=\"line\"><span class=\"comment\"># OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span></div><div class=\"line\"><span class=\"comment\"># THE SOFTWARE.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Author: Konstantin Lepa &lt;konstantin.lepa@gmail.com&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"\"\"ANSII Color formatting for output in terminal.\"\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">__ALL__ = [ <span class=\"string\">'colored'</span>, <span class=\"string\">'cprint'</span> ]</div><div class=\"line\"></div><div class=\"line\">VERSION = (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">ATTRIBUTES = dict(</div><div class=\"line\">        list(zip([</div><div class=\"line\">            <span class=\"string\">'bold'</span>,</div><div class=\"line\">            <span class=\"string\">'dark'</span>,</div><div class=\"line\">            <span class=\"string\">''</span>,</div><div class=\"line\">            <span class=\"string\">'underline'</span>,</div><div class=\"line\">            <span class=\"string\">'blink'</span>,</div><div class=\"line\">            <span class=\"string\">''</span>,</div><div class=\"line\">            <span class=\"string\">'reverse'</span>,</div><div class=\"line\">            <span class=\"string\">'concealed'</span></div><div class=\"line\">            ],</div><div class=\"line\">            list(range(<span class=\"number\">1</span>, <span class=\"number\">9</span>))</div><div class=\"line\">            ))</div><div class=\"line\">        )</div><div class=\"line\"><span class=\"keyword\">del</span> ATTRIBUTES[<span class=\"string\">''</span>]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">HIGHLIGHTS = dict(</div><div class=\"line\">        list(zip([</div><div class=\"line\">            <span class=\"string\">'on_grey'</span>,</div><div class=\"line\">            <span class=\"string\">'on_red'</span>,</div><div class=\"line\">            <span class=\"string\">'on_green'</span>,</div><div class=\"line\">            <span class=\"string\">'on_yellow'</span>,</div><div class=\"line\">            <span class=\"string\">'on_blue'</span>,</div><div class=\"line\">            <span class=\"string\">'on_magenta'</span>,</div><div class=\"line\">            <span class=\"string\">'on_cyan'</span>,</div><div class=\"line\">            <span class=\"string\">'on_white'</span></div><div class=\"line\">            ],</div><div class=\"line\">            list(range(<span class=\"number\">40</span>, <span class=\"number\">48</span>))</div><div class=\"line\">            ))</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">COLORS = dict(</div><div class=\"line\">        list(zip([</div><div class=\"line\">            <span class=\"string\">'grey'</span>,</div><div class=\"line\">            <span class=\"string\">'red'</span>,</div><div class=\"line\">            <span class=\"string\">'green'</span>,</div><div class=\"line\">            <span class=\"string\">'yellow'</span>,</div><div class=\"line\">            <span class=\"string\">'blue'</span>,</div><div class=\"line\">            <span class=\"string\">'magenta'</span>,</div><div class=\"line\">            <span class=\"string\">'cyan'</span>,</div><div class=\"line\">            <span class=\"string\">'white'</span>,</div><div class=\"line\">            ],</div><div class=\"line\">            list(range(<span class=\"number\">30</span>, <span class=\"number\">38</span>))</div><div class=\"line\">            ))</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">RESET = <span class=\"string\">'\\033[0m'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">colored</span><span class=\"params\">(text, color=None, on_color=None, attrs=None)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"Colorize text.</div><div class=\"line\"></div><div class=\"line\">    Available text colors:</div><div class=\"line\">        red, green, yellow, blue, magenta, cyan, white.</div><div class=\"line\"></div><div class=\"line\">    Available text highlights:</div><div class=\"line\">        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white.</div><div class=\"line\"></div><div class=\"line\">    Available attributes:</div><div class=\"line\">        bold, dark, underline, blink, reverse, concealed.</div><div class=\"line\"></div><div class=\"line\">    Example:</div><div class=\"line\">        colored('Hello, World!', 'red', 'on_grey', ['blue', 'blink'])</div><div class=\"line\">        colored('Hello, World!', 'green')</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">if</span> os.getenv(<span class=\"string\">'ANSI_COLORS_DISABLED'</span>) <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        fmt_str = <span class=\"string\">'\\033[%dm%s'</span></div><div class=\"line\">        <span class=\"keyword\">if</span> color <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            text = fmt_str % (COLORS[color], text)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> on_color <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            text = fmt_str % (HIGHLIGHTS[on_color], text)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> attrs <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span> attr <span class=\"keyword\">in</span> attrs:</div><div class=\"line\">                text = fmt_str % (ATTRIBUTES[attr], text)</div><div class=\"line\"></div><div class=\"line\">        text += RESET</div><div class=\"line\">    <span class=\"keyword\">return</span> text</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cprint</span><span class=\"params\">(text, color=None, on_color=None, attrs=None, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"Print colorize text.</div><div class=\"line\"></div><div class=\"line\">    It accepts arguments of print function.</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\"></div><div class=\"line\">    print((colored(text, color, on_color, attrs)), **kwargs)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">'Current terminal type: %s'</span> % os.getenv(<span class=\"string\">'TERM'</span>))</div><div class=\"line\">    print(<span class=\"string\">'Test basic colors:'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Grey color'</span>, <span class=\"string\">'grey'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Red color'</span>, <span class=\"string\">'red'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Green color'</span>, <span class=\"string\">'green'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Yellow color'</span>, <span class=\"string\">'yellow'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Blue color'</span>, <span class=\"string\">'blue'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Magenta color'</span>, <span class=\"string\">'magenta'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Cyan color'</span>, <span class=\"string\">'cyan'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'White color'</span>, <span class=\"string\">'white'</span>)</div><div class=\"line\">    print((<span class=\"string\">'-'</span> * <span class=\"number\">78</span>))</div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'Test highlights:'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On grey color'</span>, on_color=<span class=\"string\">'on_grey'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On red color'</span>, on_color=<span class=\"string\">'on_red'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On green color'</span>, on_color=<span class=\"string\">'on_green'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On yellow color'</span>, on_color=<span class=\"string\">'on_yellow'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On blue color'</span>, on_color=<span class=\"string\">'on_blue'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On magenta color'</span>, on_color=<span class=\"string\">'on_magenta'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On cyan color'</span>, on_color=<span class=\"string\">'on_cyan'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'On white color'</span>, color=<span class=\"string\">'grey'</span>, on_color=<span class=\"string\">'on_white'</span>)</div><div class=\"line\">    print(<span class=\"string\">'-'</span> * <span class=\"number\">78</span>)</div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'Test attributes:'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Bold grey color'</span>, <span class=\"string\">'grey'</span>, attrs=[<span class=\"string\">'bold'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Dark red color'</span>, <span class=\"string\">'red'</span>, attrs=[<span class=\"string\">'dark'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Underline green color'</span>, <span class=\"string\">'green'</span>, attrs=[<span class=\"string\">'underline'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Blink yellow color'</span>, <span class=\"string\">'yellow'</span>, attrs=[<span class=\"string\">'blink'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Reversed blue color'</span>, <span class=\"string\">'blue'</span>, attrs=[<span class=\"string\">'reverse'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Concealed Magenta color'</span>, <span class=\"string\">'magenta'</span>, attrs=[<span class=\"string\">'concealed'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Bold underline reverse cyan color'</span>, <span class=\"string\">'cyan'</span>,</div><div class=\"line\">            attrs=[<span class=\"string\">'bold'</span>, <span class=\"string\">'underline'</span>, <span class=\"string\">'reverse'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Dark blink concealed white color'</span>, <span class=\"string\">'white'</span>,</div><div class=\"line\">            attrs=[<span class=\"string\">'dark'</span>, <span class=\"string\">'blink'</span>, <span class=\"string\">'concealed'</span>])</div><div class=\"line\">    print((<span class=\"string\">'-'</span> * <span class=\"number\">78</span>))</div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'Test mixing:'</span>)</div><div class=\"line\">    cprint(<span class=\"string\">'Underline red on grey color'</span>, <span class=\"string\">'red'</span>, <span class=\"string\">'on_grey'</span>,</div><div class=\"line\">            [<span class=\"string\">'underline'</span>])</div><div class=\"line\">    cprint(<span class=\"string\">'Reversed green on red color'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'on_red'</span>, [<span class=\"string\">'reverse'</span>])</div></pre></td></tr></table></figure>\n<p>不过它不支持 Windows，另外有一个复杂一些但是全平台通用的 colorama，见 <a href=\"http://stackoverflow.com/questions/21858567/why-termcolor-doesnt-work-in-python\">http://stackoverflow.com/questions/21858567/why-termcolor-doesnt-work-in-python</a></p>\n<p>代码中设置颜色的部分有点费解，查阅其用到的知识点如下</p>\n<h1 id=\"ANSI-控制码\"><a href=\"#ANSI-控制码\" class=\"headerlink\" title=\"ANSI 控制码\"></a>ANSI 控制码</h1><p>ANSI 控制码即控制序列（Control Sequence）。大多数终端模拟器（Unix，Linux，Windows）都支持 ANSI 控制码。ANSI 控制码以 ESC 字符（ASCII 27/0x1b/033）开头，分为两类：</p>\n<ul>\n<li>非 CSI 序列<br>  双字符控制码，格式为<code>ESC``字符</code>，第二个字符的范围是 ASCII 64~95 (‘@’~’_’) </li>\n<li>CSI 序列<br>  多于两个字符，格式为<code>ESC[``其余字符</code></li>\n</ul>\n<p>常用序列表可见 <a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code\">https://en.wikipedia.org/wiki/ANSI_escape_code</a></p>\n<h1 id=\"颜色控制\"><a href=\"#颜色控制\" class=\"headerlink\" title=\"颜色控制\"></a>颜色控制</h1><p>其中设定终端文本颜色的序列格式为<code>ESC[``编号``;编号``m</code>    </p>\n<p>颜色分为字体色（前景色）和背景色，30~37用来设置字体色，40~47设置背景色，其他常用控制码：</p>\n<ul>\n<li>\\033[0m   重置所有属性   </li>\n<li>\\033[1m   设置高亮度   </li>\n<li>\\033[4m   下划线   </li>\n<li>\\033[5m   闪烁   </li>\n<li>\\033[7m   反色   </li>\n</ul>\n<h1 id=\"用例\"><a href=\"#用例\" class=\"headerlink\" title=\"用例\"></a>用例</h1><p><code>\\033[1;31;40m</code><br>1-高亮显示，31-前景色红色，40-背景色黑色</p>\n<p><code>\\033[0m</code><br>重置，即恢复默认设置</p>\n"},{"title":"树莓派初体验","date":"2018-05-19T14:37:06.000Z","_content":"\n树莓派\n\n都不清楚自己为啥好像一直很忙的样子, 买来树莓派吃灰了快一年, 今天终于有闲心再好好折腾下了\n\n\n首先是装系统, 按着这里 http://www.ruanyifeng.com/blog/2017/06/raspberry-pi-tutorial.html 的步骤\n* 下载 NOOBS。\n* 在 mac 磁盘工具格式化 Micro SD 卡为 FAT 格式（操作指导）。\n* 解压 NOOBS.zip 到 Micro SD 卡根目录。\n* 插入 Micro SD 卡到树莓派底部的卡槽，接通电源，启动系统。\n插上鼠标点击安装, 等个十来分钟就好, 然后把 ssh 打开, 密码改一下(顺便把 root 也改了)\n\n\n之前可能是没找对小触屏的驱动, 本来好好的系统一装完这个就挂了\n今天好好看了下壳子上的版本号: KeDei 3.5 inch SPI TFTLCD version 6.3, 才发现官网其实很好找(只要用的是Google而不是百度...)\nhttp://www.kedei.net/raspberry/raspberry.html\nv6.3 用的应该就是这个驱动 http://www.kedei.net/raspberry/v6_1/LCD_show_v6_1_3.tar.gz\n\n\n不过保险起见, 先备份一下系统吧\nshutdown 后拔下 SD 卡, 插回 mac 可以看到自动挂载了 /boot 和 /recover 分区, 但其实还有两个分区, 打开磁盘工具可以看到\nmount 看一下 /boot 和 /recover 是什么盘符:\n/dev/disk3s6                           68Mi   23Mi   45Mi    34%       0          0  100%   /Volumes/boot\n/dev/disk3s1                          1.8Gi  1.7Gi   90Mi    96%       0          0  100%   /Volumes/RECOVERY\n\n所以把整个 disk3 备份一下就可以了\nsudo dd if=/dev/disk3 of=/Users/air9/Downloads/raspi/backup.img\n不过因为是整个 32G 的 SD 卡, 很是有些慢...\n\n以后要恢复的话, 反着来就行(当然也是要先 mount 看一下啦)\nsudo dd if=/Users/air9/Downloads/raspi/backup.img of=/dev/disk3\n\n\n准备就绪, 开始尝试触屏了\n将之前下载的 6.3 驱动 scp 到树莓派里\n然后按照 http://blog.sina.com.cn/s/blog_163c3da910102whds.html 的步骤\n解压驱动并 cd 进入\nsudo apt-get update\nsudo ./LCD_backup  # 备份当前显示设置\nsudo ./LCD35_v   # 切换到小触屏的显示设置, 并自动重启\n\n这时外接的大显示屏已经不亮了, 一开始还以为系统又挂了, 后来插上小触屏才发现...原来这俩显示模式不能共存...\n然后用手指触控基本不可能...只能用一个上个世纪电阻屏手机的那种触控笔...\n好吧...只能不情愿的接受这个设定了...\n\n这个命令切换回正常的显示模式\nsudo ./LCD_restore\n","source":"_posts/raspi.md","raw":"---\ntitle: 树莓派初体验\ndate: 2018-05-19 22:37:06\ncategory: raspi\ntags: [raspi]\n---\n\n树莓派\n\n都不清楚自己为啥好像一直很忙的样子, 买来树莓派吃灰了快一年, 今天终于有闲心再好好折腾下了\n\n\n首先是装系统, 按着这里 http://www.ruanyifeng.com/blog/2017/06/raspberry-pi-tutorial.html 的步骤\n* 下载 NOOBS。\n* 在 mac 磁盘工具格式化 Micro SD 卡为 FAT 格式（操作指导）。\n* 解压 NOOBS.zip 到 Micro SD 卡根目录。\n* 插入 Micro SD 卡到树莓派底部的卡槽，接通电源，启动系统。\n插上鼠标点击安装, 等个十来分钟就好, 然后把 ssh 打开, 密码改一下(顺便把 root 也改了)\n\n\n之前可能是没找对小触屏的驱动, 本来好好的系统一装完这个就挂了\n今天好好看了下壳子上的版本号: KeDei 3.5 inch SPI TFTLCD version 6.3, 才发现官网其实很好找(只要用的是Google而不是百度...)\nhttp://www.kedei.net/raspberry/raspberry.html\nv6.3 用的应该就是这个驱动 http://www.kedei.net/raspberry/v6_1/LCD_show_v6_1_3.tar.gz\n\n\n不过保险起见, 先备份一下系统吧\nshutdown 后拔下 SD 卡, 插回 mac 可以看到自动挂载了 /boot 和 /recover 分区, 但其实还有两个分区, 打开磁盘工具可以看到\nmount 看一下 /boot 和 /recover 是什么盘符:\n/dev/disk3s6                           68Mi   23Mi   45Mi    34%       0          0  100%   /Volumes/boot\n/dev/disk3s1                          1.8Gi  1.7Gi   90Mi    96%       0          0  100%   /Volumes/RECOVERY\n\n所以把整个 disk3 备份一下就可以了\nsudo dd if=/dev/disk3 of=/Users/air9/Downloads/raspi/backup.img\n不过因为是整个 32G 的 SD 卡, 很是有些慢...\n\n以后要恢复的话, 反着来就行(当然也是要先 mount 看一下啦)\nsudo dd if=/Users/air9/Downloads/raspi/backup.img of=/dev/disk3\n\n\n准备就绪, 开始尝试触屏了\n将之前下载的 6.3 驱动 scp 到树莓派里\n然后按照 http://blog.sina.com.cn/s/blog_163c3da910102whds.html 的步骤\n解压驱动并 cd 进入\nsudo apt-get update\nsudo ./LCD_backup  # 备份当前显示设置\nsudo ./LCD35_v   # 切换到小触屏的显示设置, 并自动重启\n\n这时外接的大显示屏已经不亮了, 一开始还以为系统又挂了, 后来插上小触屏才发现...原来这俩显示模式不能共存...\n然后用手指触控基本不可能...只能用一个上个世纪电阻屏手机的那种触控笔...\n好吧...只能不情愿的接受这个设定了...\n\n这个命令切换回正常的显示模式\nsudo ./LCD_restore\n","slug":"raspi","published":1,"updated":"2018-05-19T14:38:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fv700123npxmgoalomc","content":"<p>树莓派</p>\n<p>都不清楚自己为啥好像一直很忙的样子, 买来树莓派吃灰了快一年, 今天终于有闲心再好好折腾下了</p>\n<p>首先是装系统, 按着这里 <a href=\"http://www.ruanyifeng.com/blog/2017/06/raspberry-pi-tutorial.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2017/06/raspberry-pi-tutorial.html</a> 的步骤</p>\n<ul>\n<li>下载 NOOBS。</li>\n<li>在 mac 磁盘工具格式化 Micro SD 卡为 FAT 格式（操作指导）。</li>\n<li>解压 NOOBS.zip 到 Micro SD 卡根目录。</li>\n<li>插入 Micro SD 卡到树莓派底部的卡槽，接通电源，启动系统。<br>插上鼠标点击安装, 等个十来分钟就好, 然后把 ssh 打开, 密码改一下(顺便把 root 也改了)</li>\n</ul>\n<p>之前可能是没找对小触屏的驱动, 本来好好的系统一装完这个就挂了<br>今天好好看了下壳子上的版本号: KeDei 3.5 inch SPI TFTLCD version 6.3, 才发现官网其实很好找(只要用的是Google而不是百度…)<br><a href=\"http://www.kedei.net/raspberry/raspberry.html\" target=\"_blank\" rel=\"external\">http://www.kedei.net/raspberry/raspberry.html</a><br>v6.3 用的应该就是这个驱动 <a href=\"http://www.kedei.net/raspberry/v6_1/LCD_show_v6_1_3.tar.gz\" target=\"_blank\" rel=\"external\">http://www.kedei.net/raspberry/v6_1/LCD_show_v6_1_3.tar.gz</a></p>\n<p>不过保险起见, 先备份一下系统吧<br>shutdown 后拔下 SD 卡, 插回 mac 可以看到自动挂载了 /boot 和 /recover 分区, 但其实还有两个分区, 打开磁盘工具可以看到<br>mount 看一下 /boot 和 /recover 是什么盘符:<br>/dev/disk3s6                           68Mi   23Mi   45Mi    34%       0          0  100%   /Volumes/boot<br>/dev/disk3s1                          1.8Gi  1.7Gi   90Mi    96%       0          0  100%   /Volumes/RECOVERY</p>\n<p>所以把整个 disk3 备份一下就可以了<br>sudo dd if=/dev/disk3 of=/Users/air9/Downloads/raspi/backup.img<br>不过因为是整个 32G 的 SD 卡, 很是有些慢…</p>\n<p>以后要恢复的话, 反着来就行(当然也是要先 mount 看一下啦)<br>sudo dd if=/Users/air9/Downloads/raspi/backup.img of=/dev/disk3</p>\n<p>准备就绪, 开始尝试触屏了<br>将之前下载的 6.3 驱动 scp 到树莓派里<br>然后按照 <a href=\"http://blog.sina.com.cn/s/blog_163c3da910102whds.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_163c3da910102whds.html</a> 的步骤<br>解压驱动并 cd 进入<br>sudo apt-get update<br>sudo ./LCD_backup  # 备份当前显示设置<br>sudo ./LCD35_v   # 切换到小触屏的显示设置, 并自动重启</p>\n<p>这时外接的大显示屏已经不亮了, 一开始还以为系统又挂了, 后来插上小触屏才发现…原来这俩显示模式不能共存…<br>然后用手指触控基本不可能…只能用一个上个世纪电阻屏手机的那种触控笔…<br>好吧…只能不情愿的接受这个设定了…</p>\n<p>这个命令切换回正常的显示模式<br>sudo ./LCD_restore</p>\n","excerpt":"","more":"<p>树莓派</p>\n<p>都不清楚自己为啥好像一直很忙的样子, 买来树莓派吃灰了快一年, 今天终于有闲心再好好折腾下了</p>\n<p>首先是装系统, 按着这里 <a href=\"http://www.ruanyifeng.com/blog/2017/06/raspberry-pi-tutorial.html\">http://www.ruanyifeng.com/blog/2017/06/raspberry-pi-tutorial.html</a> 的步骤</p>\n<ul>\n<li>下载 NOOBS。</li>\n<li>在 mac 磁盘工具格式化 Micro SD 卡为 FAT 格式（操作指导）。</li>\n<li>解压 NOOBS.zip 到 Micro SD 卡根目录。</li>\n<li>插入 Micro SD 卡到树莓派底部的卡槽，接通电源，启动系统。<br>插上鼠标点击安装, 等个十来分钟就好, 然后把 ssh 打开, 密码改一下(顺便把 root 也改了)</li>\n</ul>\n<p>之前可能是没找对小触屏的驱动, 本来好好的系统一装完这个就挂了<br>今天好好看了下壳子上的版本号: KeDei 3.5 inch SPI TFTLCD version 6.3, 才发现官网其实很好找(只要用的是Google而不是百度…)<br><a href=\"http://www.kedei.net/raspberry/raspberry.html\">http://www.kedei.net/raspberry/raspberry.html</a><br>v6.3 用的应该就是这个驱动 <a href=\"http://www.kedei.net/raspberry/v6_1/LCD_show_v6_1_3.tar.gz\">http://www.kedei.net/raspberry/v6_1/LCD_show_v6_1_3.tar.gz</a></p>\n<p>不过保险起见, 先备份一下系统吧<br>shutdown 后拔下 SD 卡, 插回 mac 可以看到自动挂载了 /boot 和 /recover 分区, 但其实还有两个分区, 打开磁盘工具可以看到<br>mount 看一下 /boot 和 /recover 是什么盘符:<br>/dev/disk3s6                           68Mi   23Mi   45Mi    34%       0          0  100%   /Volumes/boot<br>/dev/disk3s1                          1.8Gi  1.7Gi   90Mi    96%       0          0  100%   /Volumes/RECOVERY</p>\n<p>所以把整个 disk3 备份一下就可以了<br>sudo dd if=/dev/disk3 of=/Users/air9/Downloads/raspi/backup.img<br>不过因为是整个 32G 的 SD 卡, 很是有些慢…</p>\n<p>以后要恢复的话, 反着来就行(当然也是要先 mount 看一下啦)<br>sudo dd if=/Users/air9/Downloads/raspi/backup.img of=/dev/disk3</p>\n<p>准备就绪, 开始尝试触屏了<br>将之前下载的 6.3 驱动 scp 到树莓派里<br>然后按照 <a href=\"http://blog.sina.com.cn/s/blog_163c3da910102whds.html\">http://blog.sina.com.cn/s/blog_163c3da910102whds.html</a> 的步骤<br>解压驱动并 cd 进入<br>sudo apt-get update<br>sudo ./LCD_backup  # 备份当前显示设置<br>sudo ./LCD35_v   # 切换到小触屏的显示设置, 并自动重启</p>\n<p>这时外接的大显示屏已经不亮了, 一开始还以为系统又挂了, 后来插上小触屏才发现…原来这俩显示模式不能共存…<br>然后用手指触控基本不可能…只能用一个上个世纪电阻屏手机的那种触控笔…<br>好吧…只能不情愿的接受这个设定了…</p>\n<p>这个命令切换回正常的显示模式<br>sudo ./LCD_restore</p>\n"},{"title":"Mac 下使用 homebrew 安装 redis","date":"2016-09-12T03:44:37.000Z","_content":"\n```\n$ brew install redis\n==> Downloading https://homebrew.bintray.com/bottles/redis-3.2.3.el_capitan.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring redis-3.2.3.el_capitan.bottle.tar.gz\n==> Caveats\nTo have launchd start redis now and restart at login:\n  brew services start redis\nOr, if you don't want/need a background service you can just run:\n  redis-server /usr/local/etc/redis.conf\n==> Summary\n🍺  /usr/local/Cellar/redis/3.2.3: 10 files, 1.7M\n```\n这样就安装好了，很是方便   \n不过暂时有一个问题：每次都要手动打开`redis-server`后才能`redis-cli`，否则提示`not connected`   \n\n\n```\n$ redis-cli\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\nnot connected>\n```\n\n其实`brew`很贴心，之前安装完已经提醒过可以`brew services start redis`来自动启动，另外还可以使用`brew info`来看看提示信息\n\n```\n...\n$ brew info redis\nredis: stable 3.2.3 (bottled), HEAD\nPersistent key-value database, with built-in net interface\nhttp://redis.io/\n/usr/local/Cellar/redis/3.2.3 (10 files, 1.7M) *\n  Poured from bottle on 2016-09-18 at 09:51:13\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/redis.rb\n==> Options\n--with-jemalloc\n\tSelect jemalloc as memory allocator when building Redis\n--HEAD\n\tInstall HEAD version\n==> Caveats\nTo have launchd start redis now and restart at login:\n  brew services start redis\nOr, if you don't want/need a background service you can just run:\n  redis-server /usr/local/etc/redis.conf\n$ brew services start redis\n==> Tapping homebrew/services\nCloning into '/usr/local/Library/Taps/homebrew/homebrew-services'...\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (6/6), done.\nremote: Total 7 (delta 0), reused 3 (delta 0), pack-reused 0\nUnpacking objects: 100% (7/7), done.\nChecking connectivity... done.\nTapped 0 formulae (32 files, 46.3K)\n==> Successfully started `redis` (label: homebrew.mxcl.redis)\n$ redis-cli\n127.0.0.1:6379>\n```\n\n这样就可以了","source":"_posts/redis-brew.md","raw":"---\ntitle: Mac 下使用 homebrew 安装 redis\ndate: 2016-09-12 11:44:37\ncategory: Mac\ntags: [redis, brew, Mac]\n---\n\n```\n$ brew install redis\n==> Downloading https://homebrew.bintray.com/bottles/redis-3.2.3.el_capitan.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring redis-3.2.3.el_capitan.bottle.tar.gz\n==> Caveats\nTo have launchd start redis now and restart at login:\n  brew services start redis\nOr, if you don't want/need a background service you can just run:\n  redis-server /usr/local/etc/redis.conf\n==> Summary\n🍺  /usr/local/Cellar/redis/3.2.3: 10 files, 1.7M\n```\n这样就安装好了，很是方便   \n不过暂时有一个问题：每次都要手动打开`redis-server`后才能`redis-cli`，否则提示`not connected`   \n\n\n```\n$ redis-cli\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\nnot connected>\n```\n\n其实`brew`很贴心，之前安装完已经提醒过可以`brew services start redis`来自动启动，另外还可以使用`brew info`来看看提示信息\n\n```\n...\n$ brew info redis\nredis: stable 3.2.3 (bottled), HEAD\nPersistent key-value database, with built-in net interface\nhttp://redis.io/\n/usr/local/Cellar/redis/3.2.3 (10 files, 1.7M) *\n  Poured from bottle on 2016-09-18 at 09:51:13\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/redis.rb\n==> Options\n--with-jemalloc\n\tSelect jemalloc as memory allocator when building Redis\n--HEAD\n\tInstall HEAD version\n==> Caveats\nTo have launchd start redis now and restart at login:\n  brew services start redis\nOr, if you don't want/need a background service you can just run:\n  redis-server /usr/local/etc/redis.conf\n$ brew services start redis\n==> Tapping homebrew/services\nCloning into '/usr/local/Library/Taps/homebrew/homebrew-services'...\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (6/6), done.\nremote: Total 7 (delta 0), reused 3 (delta 0), pack-reused 0\nUnpacking objects: 100% (7/7), done.\nChecking connectivity... done.\nTapped 0 formulae (32 files, 46.3K)\n==> Successfully started `redis` (label: homebrew.mxcl.redis)\n$ redis-cli\n127.0.0.1:6379>\n```\n\n这样就可以了","slug":"redis-brew","published":1,"updated":"2017-06-01T15:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fv800133npxcuiuhtr9","content":"<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ brew install redis</div><div class=\"line\">=<span class=\"function\">=&gt;</span> Downloading https:<span class=\"regexp\">//</span>homebrew.bintray.com/bottles/redis<span class=\"number\">-3.2</span><span class=\"number\">.3</span>.el_capitan.bottle.tar.gz</div><div class=\"line\"><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span> <span class=\"number\">100.0</span>%</div><div class=\"line\">=<span class=\"function\">=&gt;</span> Pouring redis<span class=\"number\">-3.2</span><span class=\"number\">.3</span>.el_capitan.bottle.tar.gz</div><div class=\"line\">=<span class=\"function\">=&gt;</span> Caveats</div><div class=\"line\">To have launchd start redis now <span class=\"keyword\">and</span> restart at login:</div><div class=\"line\">  brew services start redis</div><div class=\"line\">Or, <span class=\"keyword\">if</span> you don<span class=\"string\">'t want/need a background service you can just run:</span></div><div class=\"line\">  redis-server /usr/local/etc/redis.conf</div><div class=\"line\">==&gt; Summary</div><div class=\"line\">🍺  /usr/local/Cellar/redis/3.2.3: 10 files, 1.7M</div></pre></td></tr></table></figure>\n<p>这样就安装好了，很是方便<br>不过暂时有一个问题：每次都要手动打开<code>redis-server</code>后才能<code>redis-cli</code>，否则提示<code>not connected</code>   </p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ redis-<span class=\"keyword\">cli</span></div><div class=\"line\">Could <span class=\"keyword\">not</span> connect to Redis <span class=\"meta\">at</span> <span class=\"number\">127.0</span><span class=\"meta\">.0</span><span class=\"meta\">.1</span>:<span class=\"number\">6379</span>: Connection refused</div><div class=\"line\">Could <span class=\"keyword\">not</span> connect to Redis <span class=\"meta\">at</span> <span class=\"number\">127.0</span><span class=\"meta\">.0</span><span class=\"meta\">.1</span>:<span class=\"number\">6379</span>: Connection refused</div><div class=\"line\"><span class=\"keyword\">not</span> connected&gt;</div></pre></td></tr></table></figure>\n<p>其实<code>brew</code>很贴心，之前安装完已经提醒过可以<code>brew services start redis</code>来自动启动，另外还可以使用<code>brew info</code>来看看提示信息</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">$ brew info redis</div><div class=\"line\">redis: stable 3.2.3 (bottled), HEAD</div><div class=\"line\">Persistent key-value database, with built-in net interface</div><div class=\"line\">http://redis.io/</div><div class=\"line\"><span class=\"comment\">/usr/local/Cellar/redis/3.2.3 (10 files, 1.7M) *</span></div><div class=\"line\">  Poured from bottle on 2016-09-18 at 09:51:13</div><div class=\"line\">From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/redis.rb</div><div class=\"line\">=<span class=\"ruby\">=&gt; Options</span></div><div class=\"line\">-<span class=\"ruby\">-with-jemalloc</span></div><div class=\"line\">\tSelect jemalloc as memory allocator when building Redis</div><div class=\"line\">-<span class=\"ruby\">-HEAD</span></div><div class=\"line\">\tInstall HEAD version</div><div class=\"line\">=<span class=\"ruby\">=&gt; Caveats</span></div><div class=\"line\">To have launchd start redis now and restart at login:</div><div class=\"line\">  brew services start redis</div><div class=\"line\">Or, if you don't want/need a background service you can just run:</div><div class=\"line\">  redis-server /usr/local/etc/redis.conf</div><div class=\"line\">$ brew services start redis</div><div class=\"line\">=<span class=\"ruby\">=&gt; Tapping homebrew/services</span></div><div class=\"line\">Cloning into '/usr/local/Library/Taps/homebrew/homebrew-services'...</div><div class=\"line\">remote: Counting objects: 7, done.</div><div class=\"line\">remote: Compressing objects: 100% (6/6), done.</div><div class=\"line\">remote: Total 7 (delta 0), reused 3 (delta 0), pack-reused 0</div><div class=\"line\">Unpacking objects: 100% (7/7), done.</div><div class=\"line\">Checking connectivity... done.</div><div class=\"line\">Tapped 0 formulae (32 files, 46.3K)</div><div class=\"line\">=<span class=\"ruby\">=&gt; Successfully started <span class=\"string\">`redis`</span> (<span class=\"symbol\">label:</span> homebrew.mxcl.redis)</span></div><div class=\"line\">$ redis-cli</div><div class=\"line\">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure>\n<p>这样就可以了</p>\n","excerpt":"","more":"<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ brew install redis</div><div class=\"line\">=<span class=\"function\">=&gt;</span> Downloading https:<span class=\"regexp\">//</span>homebrew.bintray.com/bottles/redis<span class=\"number\">-3.2</span><span class=\"number\">.3</span>.el_capitan.bottle.tar.gz</div><div class=\"line\"><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span> <span class=\"number\">100.0</span>%</div><div class=\"line\">=<span class=\"function\">=&gt;</span> Pouring redis<span class=\"number\">-3.2</span><span class=\"number\">.3</span>.el_capitan.bottle.tar.gz</div><div class=\"line\">=<span class=\"function\">=&gt;</span> Caveats</div><div class=\"line\">To have launchd start redis now <span class=\"keyword\">and</span> restart at login:</div><div class=\"line\">  brew services start redis</div><div class=\"line\">Or, <span class=\"keyword\">if</span> you don<span class=\"string\">'t want/need a background service you can just run:</div><div class=\"line\">  redis-server /usr/local/etc/redis.conf</div><div class=\"line\">==&gt; Summary</div><div class=\"line\">🍺  /usr/local/Cellar/redis/3.2.3: 10 files, 1.7M</span></div></pre></td></tr></table></figure>\n<p>这样就安装好了，很是方便<br>不过暂时有一个问题：每次都要手动打开<code>redis-server</code>后才能<code>redis-cli</code>，否则提示<code>not connected</code>   </p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ redis-<span class=\"keyword\">cli</span></div><div class=\"line\">Could <span class=\"keyword\">not</span> connect to Redis <span class=\"meta\">at</span> <span class=\"number\">127.0</span><span class=\"meta\">.0</span><span class=\"meta\">.1</span>:<span class=\"number\">6379</span>: Connection refused</div><div class=\"line\">Could <span class=\"keyword\">not</span> connect to Redis <span class=\"meta\">at</span> <span class=\"number\">127.0</span><span class=\"meta\">.0</span><span class=\"meta\">.1</span>:<span class=\"number\">6379</span>: Connection refused</div><div class=\"line\"><span class=\"keyword\">not</span> connected&gt;</div></pre></td></tr></table></figure>\n<p>其实<code>brew</code>很贴心，之前安装完已经提醒过可以<code>brew services start redis</code>来自动启动，另外还可以使用<code>brew info</code>来看看提示信息</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">$ brew info redis</div><div class=\"line\">redis: stable 3.2.3 (bottled), HEAD</div><div class=\"line\">Persistent key-value database, with built-in net interface</div><div class=\"line\">http://redis.io/</div><div class=\"line\"><span class=\"comment\">/usr/local/Cellar/redis/3.2.3 (10 files, 1.7M) *</span></div><div class=\"line\">  Poured from bottle on 2016-09-18 at 09:51:13</div><div class=\"line\">From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/redis.rb</div><div class=\"line\">=<span class=\"ruby\">=&gt; Options</div><div class=\"line\"></span>-<span class=\"ruby\">-with-jemalloc</div><div class=\"line\"></span>\tSelect jemalloc as memory allocator when building Redis</div><div class=\"line\">-<span class=\"ruby\">-HEAD</div><div class=\"line\"></span>\tInstall HEAD version</div><div class=\"line\">=<span class=\"ruby\">=&gt; Caveats</div><div class=\"line\"></span>To have launchd start redis now and restart at login:</div><div class=\"line\">  brew services start redis</div><div class=\"line\">Or, if you don't want/need a background service you can just run:</div><div class=\"line\">  redis-server /usr/local/etc/redis.conf</div><div class=\"line\">$ brew services start redis</div><div class=\"line\">=<span class=\"ruby\">=&gt; Tapping homebrew/services</div><div class=\"line\"></span>Cloning into '/usr/local/Library/Taps/homebrew/homebrew-services'...</div><div class=\"line\">remote: Counting objects: 7, done.</div><div class=\"line\">remote: Compressing objects: 100% (6/6), done.</div><div class=\"line\">remote: Total 7 (delta 0), reused 3 (delta 0), pack-reused 0</div><div class=\"line\">Unpacking objects: 100% (7/7), done.</div><div class=\"line\">Checking connectivity... done.</div><div class=\"line\">Tapped 0 formulae (32 files, 46.3K)</div><div class=\"line\">=<span class=\"ruby\">=&gt; Successfully started <span class=\"string\">`redis`</span> (<span class=\"symbol\">label:</span> homebrew.mxcl.redis)</div><div class=\"line\"></span>$ redis-cli</div><div class=\"line\">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure>\n<p>这样就可以了</p>\n"},{"title":"tmux copy2clipboard","date":"2016-03-09T07:25:31.000Z","_content":"\n[https://wiki.archlinux.org/index.php/Tmux#Mouse_scrolling](https://wiki.archlinux.org/index.php/Tmux#Mouse_scrolling)\n\n\n# Mouse scrolling\n\n*Note: This interferes with selection buffer copying and pasting. To copy/paste to/from the selection buffer hold the `shift` key.*\n\nIf you want to scroll with your mouse wheel, ensure mode-mouse is on in .tmux.conf\n\n\tset -g mouse on\n\nYou can set scroll History with:\n\n\tset -g history-limit 30000\n\nFor mouse wheel scrolling as from tmux 2.1 try adding one or both of these to ~/.tmux.conf\n\t\n\tbind-key -T root WheelUpPane   if-shell -F -t = \"#{alternate_on}\" \"send-keys -M\" \"select-pane -t =; copy-mode -e; send-keys -M\"   \n\tbind-key -T root WheelDownPane if-shell -F -t = \"#{alternate_on}\" \"send-keys -M\" \"select-pane -t =; send-keys -M\"\n\n\n# Copy from tmux to clipboard\n\nHold the `shift` key to select the text, then copy & paste.","source":"_posts/tmux-copy2clipboard.md","raw":"---\ntitle: tmux copy2clipboard\ndate: 2016-03-09 15:25:31\ncategory: tmux\ntags: [tmux, Archlinux]\n---\n\n[https://wiki.archlinux.org/index.php/Tmux#Mouse_scrolling](https://wiki.archlinux.org/index.php/Tmux#Mouse_scrolling)\n\n\n# Mouse scrolling\n\n*Note: This interferes with selection buffer copying and pasting. To copy/paste to/from the selection buffer hold the `shift` key.*\n\nIf you want to scroll with your mouse wheel, ensure mode-mouse is on in .tmux.conf\n\n\tset -g mouse on\n\nYou can set scroll History with:\n\n\tset -g history-limit 30000\n\nFor mouse wheel scrolling as from tmux 2.1 try adding one or both of these to ~/.tmux.conf\n\t\n\tbind-key -T root WheelUpPane   if-shell -F -t = \"#{alternate_on}\" \"send-keys -M\" \"select-pane -t =; copy-mode -e; send-keys -M\"   \n\tbind-key -T root WheelDownPane if-shell -F -t = \"#{alternate_on}\" \"send-keys -M\" \"select-pane -t =; send-keys -M\"\n\n\n# Copy from tmux to clipboard\n\nHold the `shift` key to select the text, then copy & paste.","slug":"tmux-copy2clipboard","published":1,"updated":"2016-03-09T07:26:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fv900143npxkuzjvcv9","content":"<p><a href=\"https://wiki.archlinux.org/index.php/Tmux#Mouse_scrolling\" target=\"_blank\" rel=\"external\">https://wiki.archlinux.org/index.php/Tmux#Mouse_scrolling</a></p>\n<h1 id=\"Mouse-scrolling\"><a href=\"#Mouse-scrolling\" class=\"headerlink\" title=\"Mouse scrolling\"></a>Mouse scrolling</h1><p><em>Note: This interferes with selection buffer copying and pasting. To copy/paste to/from the selection buffer hold the <code>shift</code> key.</em></p>\n<p>If you want to scroll with your mouse wheel, ensure mode-mouse is on in .tmux.conf</p>\n<pre><code>set -g mouse on\n</code></pre><p>You can set scroll History with:</p>\n<pre><code>set -g history-limit 30000\n</code></pre><p>For mouse wheel scrolling as from tmux 2.1 try adding one or both of these to ~/.tmux.conf</p>\n<pre><code>bind-key -T root WheelUpPane   if-shell -F -t = &quot;#{alternate_on}&quot; &quot;send-keys -M&quot; &quot;select-pane -t =; copy-mode -e; send-keys -M&quot;   \nbind-key -T root WheelDownPane if-shell -F -t = &quot;#{alternate_on}&quot; &quot;send-keys -M&quot; &quot;select-pane -t =; send-keys -M&quot;\n</code></pre><h1 id=\"Copy-from-tmux-to-clipboard\"><a href=\"#Copy-from-tmux-to-clipboard\" class=\"headerlink\" title=\"Copy from tmux to clipboard\"></a>Copy from tmux to clipboard</h1><p>Hold the <code>shift</code> key to select the text, then copy &amp; paste.</p>\n","excerpt":"","more":"<p><a href=\"https://wiki.archlinux.org/index.php/Tmux#Mouse_scrolling\">https://wiki.archlinux.org/index.php/Tmux#Mouse_scrolling</a></p>\n<h1 id=\"Mouse-scrolling\"><a href=\"#Mouse-scrolling\" class=\"headerlink\" title=\"Mouse scrolling\"></a>Mouse scrolling</h1><p><em>Note: This interferes with selection buffer copying and pasting. To copy/paste to/from the selection buffer hold the <code>shift</code> key.</em></p>\n<p>If you want to scroll with your mouse wheel, ensure mode-mouse is on in .tmux.conf</p>\n<pre><code>set -g mouse on\n</code></pre><p>You can set scroll History with:</p>\n<pre><code>set -g history-limit 30000\n</code></pre><p>For mouse wheel scrolling as from tmux 2.1 try adding one or both of these to ~/.tmux.conf</p>\n<pre><code>bind-key -T root WheelUpPane   if-shell -F -t = &quot;#{alternate_on}&quot; &quot;send-keys -M&quot; &quot;select-pane -t =; copy-mode -e; send-keys -M&quot;   \nbind-key -T root WheelDownPane if-shell -F -t = &quot;#{alternate_on}&quot; &quot;send-keys -M&quot; &quot;select-pane -t =; send-keys -M&quot;\n</code></pre><h1 id=\"Copy-from-tmux-to-clipboard\"><a href=\"#Copy-from-tmux-to-clipboard\" class=\"headerlink\" title=\"Copy from tmux to clipboard\"></a>Copy from tmux to clipboard</h1><p>Hold the <code>shift</code> key to select the text, then copy &amp; paste.</p>\n"},{"title":"字符集与编码","date":"2016-07-06T11:04:36.000Z","_content":"\n\n\n以前对「字符集与编码」的认识完全来源于[廖雪峰的这篇文章](http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000)，但是总容易忘记   \n而且依稀记得很早的时候在知乎看到梁海大神提到过字符集与编码是不一样的概念\n\n今天仔细查阅了一下，记录如下\n\n# 字符集与编码\n\n顾名思义，「字符」的「集合」，每个「字符」有一个唯一的「数字」与之对应     \n而如何将「数字」改写成内存中的「字节」，即所谓的「编码」或「编码方式」\n\n引自[字符集和编码方式的区别？ - 梁海的回答](https://www.zhihu.com/question/21887246/answer/19631235)：\n\n>「字符集」和「编码」等几个层次的概念被彻底分离且模块化的这样一个模型，其实是 Unicode 时代才得到广泛认同的。\n>\n> 而对于 ASCII、GB2312、Big5 之类的遗留（legacy）方案，其字符集及其编码的关系基本是锁定的，所以常常用「字符编码」（character encoding）、「代码页」（code page）等概念来统称它们那样从字符到编码字节流的整体方案。比如 ASCII 本身就既是字符集又是编码方案，而 GB2312 用的都是 EUC-CN 编码方案。\n\n# ASCII\n\nASCII 既是字符集又是编码方案，其字符集为「它所能表示的 128 种字符（包括控制字符和显示字符）」，编码方案为「128 个字节码与字符集间的映射」\n\n# ANSI\n\nASCII 本身就是 ANSI(American National Standard Institute) 制定的标准。虽然 ASCII 使用一个字节即 8 位的长度，但由于在英文世界中 7 位已经完全够用，所以最高位始终为 0。其他国家便将最高位利用起来，用于扩展表示其他语言的字符。\n\nANSI 指的是这样一种编码方式：表示通用英文字符时，最高位为 0，使用 ASCII 编码，长度为一个字节；表示其他语言的专有字符时，最高位为 1，使用其他编码。其中「其他编码」可以是 ANSI 标准中的任意一页，比如「GB2312」，用两个最高位为 1 的字节来表示一个简体中文字符。\n\n\n\n# Unicode 字符集\n\nUnicode 原本只是个字符集，[freebuf 的一篇译文](http://www.freebuf.com/articles/others-articles/25623.html)讲得很生动：\n\n> Unicode 背后的想法非常简单，然而却被普遍的误解了。Unicode 就像一个电话本，标记着字符和数字之间的映射关系。Joel 称之为「神奇数字」，因为它们可能是随机指定的，而且不会给出任何解释。官方术语是码位（Code Point），总是用 U+ 开头。理论上每种语言中的每种字符都被 Unicode 协会指定了一个神奇数字。例如希伯来文中的第一个字母 א，是 U+2135，字母 A 是 U+0061。\n\n> Unicode 并不涉及字符是怎么在字节中表示的，它仅仅指定了字符对应的数字，仅此而已。\n\n> 关于 Unicode 的其它误解包括：Unicode 支持的字符上限是 65536 个，Unicode 字符必须占两个字节。告诉你这些的人应该去换换脑子了。\n\n> 记住，Unicode 只是一个用来映射字符和数字的标准。它对支持字符的数量没有限制，也不要求字符必须占两个、三个或者其它任意数量的字节。\n\n# Unicode 编码\n\nUnicode 的实现方式不同于编码方式。一个字符的 Unicode 编码是确定的。但是在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对 Unicode 编码的实现方式有所不同。Unicode 的实现方式称为  Unicode 转换格式（Unicode Transformation Format，简称为 UTF）。\n\n## UTF-8 编码\n\n如果一个仅包含基本 7 位 ASCII 字符的 Unicode 文件，如果每个字符都使用 2 字节的原 Unicode 编码传输，其第一字节的 8 位始终为 0 。这就造成了比较大的浪费。\n\n对于这种情况，可以使用 UTF-8 编码，这是一种变长编码，它将基本 7 位 ASCII 字符仍用 7 位编码表示，占用一个字节（首位补 0）。\n\n而遇到与其他 Unicode 字符混合的情况，将按一定算法转换，每个字符使用 1-3 个字节编码，并利用首位为 0 或 1 进行识别。这样对以 7 位 ASCII 字符为主的西文文档就大大节省了编码长度（具体方案参见 UTF-8）。\n\n## UTF-16 编码\n\n类似的，另一个流行的可变长度编码方案是 UTF-16，它使用 2 个或者 4 个字节来存储字符。然而，人们逐渐意识到 UTF-16 可能会浪费存储空间，但那是另一个话题了。\n\n## 狭义的 Unicode 编码\n\n需要注意的是，狭义的 Unicode 编码方式与 ISO 10646 的通用字符集（Universal Character Set，UCS）概念相对应，目前实际应用的 Unicode 版本对应于 UCS-2 ，使用 16 位的编码空间。也就是每个字符占用 2 个字节。\n\n这样理论上一共最多可以表示 216 即 65536 个字符。基本满足各种语言的使用。实际上当前版本的 Unicode 尚未填满这 16 位编码，保留了大量空间作为特殊使用或将来扩展。\n\n以 Python 为例，`unicode(s,'utf8')` 所返回的结果就是这种狭义的 Unicode 编码。\n\n又是梁海在[廖雪峰答案](https://www.zhihu.com/question/19817672/answer/13055185)的评论里提到:\n\n> 廖雪峰说的「Unicode」指的是 UCS-2（所以不能改成「UTF-32」）。当年只有 BMP 的时候 UCS-2 和 UTF-16 是等价的，又被称作「Unicode」（所以这里不是「Unicode 是字符集，不是编码方式」这个问题，只是 UCS-2 也被称作「Unicode」而已）。但现在这种用「Unicode」指代 UCS-2/UTF-16 的做法已经过时了，很不合适。\n\n# 总结\n\n简单总结一下，Unicode 是「字符集」而不是「编码」。但由于历史原因，某些时候提到的「Unicode 编码」指的是曾经定长的 UCS-2/UTF-16（现在 UTF-16 也是变长）。\n\n由于 UTF-8 可以兼容 ASCII，且其变长特性能相对高效地利用空间，在应用或传输过程中一般使用的是 UTF-8。例如 Python shell 中 str 使用的就是 ASCII(UTF-8)。\n\n而内存一般使用的是这种「Unicode 编码」，所以在进行编码转换时，通常将各类编码`decode`成「Unicode 编码」，在`encode`成最终编码形式。\n\neg:\n\n```py\n>>> a='在'\n>>> a\n'\\xe5\\x9c\\xa8'\n\n>>> b=unicode(a,'utf8') // 或 b=a.decode('utf8')，其中'utf-8'等同于'utf8' \n>>> b\nu'\\u5728'\n\n>>> b.encode('gbk')\n'\\xd4\\xda'\n```\n\n在 Python 2.x 版本中，字符串实际上是字节串，这种字符串中的每个字符长度为 1，实际上就是一个字节，等同于 ASCII。（参考《Python Cookbook》1.21）\n\n不过在 Python 3.x 版本中，把 'xxx' 和 u'xxx' 统一成了 Unicode 编码，即写不写前缀 u 都是一样的，而以字节形式表示的字符串则必须加上 b 前缀。\n\n","source":"_posts/字符集与编码方式.md","raw":"---\ntitle: 字符集与编码\ndate: 2016-07-06 19:04:36\ncategory: 编码\ntags: [字符集, 编码, ASCII, ANSI, Unicode, UTF-8, Python]\n---\n\n\n\n以前对「字符集与编码」的认识完全来源于[廖雪峰的这篇文章](http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000)，但是总容易忘记   \n而且依稀记得很早的时候在知乎看到梁海大神提到过字符集与编码是不一样的概念\n\n今天仔细查阅了一下，记录如下\n\n# 字符集与编码\n\n顾名思义，「字符」的「集合」，每个「字符」有一个唯一的「数字」与之对应     \n而如何将「数字」改写成内存中的「字节」，即所谓的「编码」或「编码方式」\n\n引自[字符集和编码方式的区别？ - 梁海的回答](https://www.zhihu.com/question/21887246/answer/19631235)：\n\n>「字符集」和「编码」等几个层次的概念被彻底分离且模块化的这样一个模型，其实是 Unicode 时代才得到广泛认同的。\n>\n> 而对于 ASCII、GB2312、Big5 之类的遗留（legacy）方案，其字符集及其编码的关系基本是锁定的，所以常常用「字符编码」（character encoding）、「代码页」（code page）等概念来统称它们那样从字符到编码字节流的整体方案。比如 ASCII 本身就既是字符集又是编码方案，而 GB2312 用的都是 EUC-CN 编码方案。\n\n# ASCII\n\nASCII 既是字符集又是编码方案，其字符集为「它所能表示的 128 种字符（包括控制字符和显示字符）」，编码方案为「128 个字节码与字符集间的映射」\n\n# ANSI\n\nASCII 本身就是 ANSI(American National Standard Institute) 制定的标准。虽然 ASCII 使用一个字节即 8 位的长度，但由于在英文世界中 7 位已经完全够用，所以最高位始终为 0。其他国家便将最高位利用起来，用于扩展表示其他语言的字符。\n\nANSI 指的是这样一种编码方式：表示通用英文字符时，最高位为 0，使用 ASCII 编码，长度为一个字节；表示其他语言的专有字符时，最高位为 1，使用其他编码。其中「其他编码」可以是 ANSI 标准中的任意一页，比如「GB2312」，用两个最高位为 1 的字节来表示一个简体中文字符。\n\n\n\n# Unicode 字符集\n\nUnicode 原本只是个字符集，[freebuf 的一篇译文](http://www.freebuf.com/articles/others-articles/25623.html)讲得很生动：\n\n> Unicode 背后的想法非常简单，然而却被普遍的误解了。Unicode 就像一个电话本，标记着字符和数字之间的映射关系。Joel 称之为「神奇数字」，因为它们可能是随机指定的，而且不会给出任何解释。官方术语是码位（Code Point），总是用 U+ 开头。理论上每种语言中的每种字符都被 Unicode 协会指定了一个神奇数字。例如希伯来文中的第一个字母 א，是 U+2135，字母 A 是 U+0061。\n\n> Unicode 并不涉及字符是怎么在字节中表示的，它仅仅指定了字符对应的数字，仅此而已。\n\n> 关于 Unicode 的其它误解包括：Unicode 支持的字符上限是 65536 个，Unicode 字符必须占两个字节。告诉你这些的人应该去换换脑子了。\n\n> 记住，Unicode 只是一个用来映射字符和数字的标准。它对支持字符的数量没有限制，也不要求字符必须占两个、三个或者其它任意数量的字节。\n\n# Unicode 编码\n\nUnicode 的实现方式不同于编码方式。一个字符的 Unicode 编码是确定的。但是在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对 Unicode 编码的实现方式有所不同。Unicode 的实现方式称为  Unicode 转换格式（Unicode Transformation Format，简称为 UTF）。\n\n## UTF-8 编码\n\n如果一个仅包含基本 7 位 ASCII 字符的 Unicode 文件，如果每个字符都使用 2 字节的原 Unicode 编码传输，其第一字节的 8 位始终为 0 。这就造成了比较大的浪费。\n\n对于这种情况，可以使用 UTF-8 编码，这是一种变长编码，它将基本 7 位 ASCII 字符仍用 7 位编码表示，占用一个字节（首位补 0）。\n\n而遇到与其他 Unicode 字符混合的情况，将按一定算法转换，每个字符使用 1-3 个字节编码，并利用首位为 0 或 1 进行识别。这样对以 7 位 ASCII 字符为主的西文文档就大大节省了编码长度（具体方案参见 UTF-8）。\n\n## UTF-16 编码\n\n类似的，另一个流行的可变长度编码方案是 UTF-16，它使用 2 个或者 4 个字节来存储字符。然而，人们逐渐意识到 UTF-16 可能会浪费存储空间，但那是另一个话题了。\n\n## 狭义的 Unicode 编码\n\n需要注意的是，狭义的 Unicode 编码方式与 ISO 10646 的通用字符集（Universal Character Set，UCS）概念相对应，目前实际应用的 Unicode 版本对应于 UCS-2 ，使用 16 位的编码空间。也就是每个字符占用 2 个字节。\n\n这样理论上一共最多可以表示 216 即 65536 个字符。基本满足各种语言的使用。实际上当前版本的 Unicode 尚未填满这 16 位编码，保留了大量空间作为特殊使用或将来扩展。\n\n以 Python 为例，`unicode(s,'utf8')` 所返回的结果就是这种狭义的 Unicode 编码。\n\n又是梁海在[廖雪峰答案](https://www.zhihu.com/question/19817672/answer/13055185)的评论里提到:\n\n> 廖雪峰说的「Unicode」指的是 UCS-2（所以不能改成「UTF-32」）。当年只有 BMP 的时候 UCS-2 和 UTF-16 是等价的，又被称作「Unicode」（所以这里不是「Unicode 是字符集，不是编码方式」这个问题，只是 UCS-2 也被称作「Unicode」而已）。但现在这种用「Unicode」指代 UCS-2/UTF-16 的做法已经过时了，很不合适。\n\n# 总结\n\n简单总结一下，Unicode 是「字符集」而不是「编码」。但由于历史原因，某些时候提到的「Unicode 编码」指的是曾经定长的 UCS-2/UTF-16（现在 UTF-16 也是变长）。\n\n由于 UTF-8 可以兼容 ASCII，且其变长特性能相对高效地利用空间，在应用或传输过程中一般使用的是 UTF-8。例如 Python shell 中 str 使用的就是 ASCII(UTF-8)。\n\n而内存一般使用的是这种「Unicode 编码」，所以在进行编码转换时，通常将各类编码`decode`成「Unicode 编码」，在`encode`成最终编码形式。\n\neg:\n\n```py\n>>> a='在'\n>>> a\n'\\xe5\\x9c\\xa8'\n\n>>> b=unicode(a,'utf8') // 或 b=a.decode('utf8')，其中'utf-8'等同于'utf8' \n>>> b\nu'\\u5728'\n\n>>> b.encode('gbk')\n'\\xd4\\xda'\n```\n\n在 Python 2.x 版本中，字符串实际上是字节串，这种字符串中的每个字符长度为 1，实际上就是一个字节，等同于 ASCII。（参考《Python Cookbook》1.21）\n\n不过在 Python 3.x 版本中，把 'xxx' 和 u'xxx' 统一成了 Unicode 编码，即写不写前缀 u 都是一样的，而以字节形式表示的字符串则必须加上 b 前缀。\n\n","slug":"字符集与编码方式","published":1,"updated":"2016-10-12T07:51:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhdi5fva00153npxihyiusi0","content":"<p>以前对「字符集与编码」的认识完全来源于<a href=\"http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000\" target=\"_blank\" rel=\"external\">廖雪峰的这篇文章</a>，但是总容易忘记<br>而且依稀记得很早的时候在知乎看到梁海大神提到过字符集与编码是不一样的概念</p>\n<p>今天仔细查阅了一下，记录如下</p>\n<h1 id=\"字符集与编码\"><a href=\"#字符集与编码\" class=\"headerlink\" title=\"字符集与编码\"></a>字符集与编码</h1><p>顾名思义，「字符」的「集合」，每个「字符」有一个唯一的「数字」与之对应<br>而如何将「数字」改写成内存中的「字节」，即所谓的「编码」或「编码方式」</p>\n<p>引自<a href=\"https://www.zhihu.com/question/21887246/answer/19631235\" target=\"_blank\" rel=\"external\">字符集和编码方式的区别？ - 梁海的回答</a>：</p>\n<blockquote>\n<p>「字符集」和「编码」等几个层次的概念被彻底分离且模块化的这样一个模型，其实是 Unicode 时代才得到广泛认同的。</p>\n<p>而对于 ASCII、GB2312、Big5 之类的遗留（legacy）方案，其字符集及其编码的关系基本是锁定的，所以常常用「字符编码」（character encoding）、「代码页」（code page）等概念来统称它们那样从字符到编码字节流的整体方案。比如 ASCII 本身就既是字符集又是编码方案，而 GB2312 用的都是 EUC-CN 编码方案。</p>\n</blockquote>\n<h1 id=\"ASCII\"><a href=\"#ASCII\" class=\"headerlink\" title=\"ASCII\"></a>ASCII</h1><p>ASCII 既是字符集又是编码方案，其字符集为「它所能表示的 128 种字符（包括控制字符和显示字符）」，编码方案为「128 个字节码与字符集间的映射」</p>\n<h1 id=\"ANSI\"><a href=\"#ANSI\" class=\"headerlink\" title=\"ANSI\"></a>ANSI</h1><p>ASCII 本身就是 ANSI(American National Standard Institute) 制定的标准。虽然 ASCII 使用一个字节即 8 位的长度，但由于在英文世界中 7 位已经完全够用，所以最高位始终为 0。其他国家便将最高位利用起来，用于扩展表示其他语言的字符。</p>\n<p>ANSI 指的是这样一种编码方式：表示通用英文字符时，最高位为 0，使用 ASCII 编码，长度为一个字节；表示其他语言的专有字符时，最高位为 1，使用其他编码。其中「其他编码」可以是 ANSI 标准中的任意一页，比如「GB2312」，用两个最高位为 1 的字节来表示一个简体中文字符。</p>\n<h1 id=\"Unicode-字符集\"><a href=\"#Unicode-字符集\" class=\"headerlink\" title=\"Unicode 字符集\"></a>Unicode 字符集</h1><p>Unicode 原本只是个字符集，<a href=\"http://www.freebuf.com/articles/others-articles/25623.html\" target=\"_blank\" rel=\"external\">freebuf 的一篇译文</a>讲得很生动：</p>\n<blockquote>\n<p>Unicode 背后的想法非常简单，然而却被普遍的误解了。Unicode 就像一个电话本，标记着字符和数字之间的映射关系。Joel 称之为「神奇数字」，因为它们可能是随机指定的，而且不会给出任何解释。官方术语是码位（Code Point），总是用 U+ 开头。理论上每种语言中的每种字符都被 Unicode 协会指定了一个神奇数字。例如希伯来文中的第一个字母 א，是 U+2135，字母 A 是 U+0061。</p>\n<p>Unicode 并不涉及字符是怎么在字节中表示的，它仅仅指定了字符对应的数字，仅此而已。</p>\n<p>关于 Unicode 的其它误解包括：Unicode 支持的字符上限是 65536 个，Unicode 字符必须占两个字节。告诉你这些的人应该去换换脑子了。</p>\n<p>记住，Unicode 只是一个用来映射字符和数字的标准。它对支持字符的数量没有限制，也不要求字符必须占两个、三个或者其它任意数量的字节。</p>\n</blockquote>\n<h1 id=\"Unicode-编码\"><a href=\"#Unicode-编码\" class=\"headerlink\" title=\"Unicode 编码\"></a>Unicode 编码</h1><p>Unicode 的实现方式不同于编码方式。一个字符的 Unicode 编码是确定的。但是在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对 Unicode 编码的实现方式有所不同。Unicode 的实现方式称为  Unicode 转换格式（Unicode Transformation Format，简称为 UTF）。</p>\n<h2 id=\"UTF-8-编码\"><a href=\"#UTF-8-编码\" class=\"headerlink\" title=\"UTF-8 编码\"></a>UTF-8 编码</h2><p>如果一个仅包含基本 7 位 ASCII 字符的 Unicode 文件，如果每个字符都使用 2 字节的原 Unicode 编码传输，其第一字节的 8 位始终为 0 。这就造成了比较大的浪费。</p>\n<p>对于这种情况，可以使用 UTF-8 编码，这是一种变长编码，它将基本 7 位 ASCII 字符仍用 7 位编码表示，占用一个字节（首位补 0）。</p>\n<p>而遇到与其他 Unicode 字符混合的情况，将按一定算法转换，每个字符使用 1-3 个字节编码，并利用首位为 0 或 1 进行识别。这样对以 7 位 ASCII 字符为主的西文文档就大大节省了编码长度（具体方案参见 UTF-8）。</p>\n<h2 id=\"UTF-16-编码\"><a href=\"#UTF-16-编码\" class=\"headerlink\" title=\"UTF-16 编码\"></a>UTF-16 编码</h2><p>类似的，另一个流行的可变长度编码方案是 UTF-16，它使用 2 个或者 4 个字节来存储字符。然而，人们逐渐意识到 UTF-16 可能会浪费存储空间，但那是另一个话题了。</p>\n<h2 id=\"狭义的-Unicode-编码\"><a href=\"#狭义的-Unicode-编码\" class=\"headerlink\" title=\"狭义的 Unicode 编码\"></a>狭义的 Unicode 编码</h2><p>需要注意的是，狭义的 Unicode 编码方式与 ISO 10646 的通用字符集（Universal Character Set，UCS）概念相对应，目前实际应用的 Unicode 版本对应于 UCS-2 ，使用 16 位的编码空间。也就是每个字符占用 2 个字节。</p>\n<p>这样理论上一共最多可以表示 216 即 65536 个字符。基本满足各种语言的使用。实际上当前版本的 Unicode 尚未填满这 16 位编码，保留了大量空间作为特殊使用或将来扩展。</p>\n<p>以 Python 为例，<code>unicode(s,&#39;utf8&#39;)</code> 所返回的结果就是这种狭义的 Unicode 编码。</p>\n<p>又是梁海在<a href=\"https://www.zhihu.com/question/19817672/answer/13055185\" target=\"_blank\" rel=\"external\">廖雪峰答案</a>的评论里提到:</p>\n<blockquote>\n<p>廖雪峰说的「Unicode」指的是 UCS-2（所以不能改成「UTF-32」）。当年只有 BMP 的时候 UCS-2 和 UTF-16 是等价的，又被称作「Unicode」（所以这里不是「Unicode 是字符集，不是编码方式」这个问题，只是 UCS-2 也被称作「Unicode」而已）。但现在这种用「Unicode」指代 UCS-2/UTF-16 的做法已经过时了，很不合适。</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>简单总结一下，Unicode 是「字符集」而不是「编码」。但由于历史原因，某些时候提到的「Unicode 编码」指的是曾经定长的 UCS-2/UTF-16（现在 UTF-16 也是变长）。</p>\n<p>由于 UTF-8 可以兼容 ASCII，且其变长特性能相对高效地利用空间，在应用或传输过程中一般使用的是 UTF-8。例如 Python shell 中 str 使用的就是 ASCII(UTF-8)。</p>\n<p>而内存一般使用的是这种「Unicode 编码」，所以在进行编码转换时，通常将各类编码<code>decode</code>成「Unicode 编码」，在<code>encode</code>成最终编码形式。</p>\n<p>eg:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a=<span class=\"string\">'在'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"string\">'\\xe5\\x9c\\xa8'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b=unicode(a,<span class=\"string\">'utf8'</span>) // 或 b=a.decode(<span class=\"string\">'utf8'</span>)，其中<span class=\"string\">'utf-8'</span>等同于<span class=\"string\">'utf8'</span> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</div><div class=\"line\"><span class=\"string\">u'\\u5728'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.encode(<span class=\"string\">'gbk'</span>)</div><div class=\"line\"><span class=\"string\">'\\xd4\\xda'</span></div></pre></td></tr></table></figure>\n<p>在 Python 2.x 版本中，字符串实际上是字节串，这种字符串中的每个字符长度为 1，实际上就是一个字节，等同于 ASCII。（参考《Python Cookbook》1.21）</p>\n<p>不过在 Python 3.x 版本中，把 ‘xxx’ 和 u’xxx’ 统一成了 Unicode 编码，即写不写前缀 u 都是一样的，而以字节形式表示的字符串则必须加上 b 前缀。</p>\n","excerpt":"","more":"<p>以前对「字符集与编码」的认识完全来源于<a href=\"http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000\">廖雪峰的这篇文章</a>，但是总容易忘记<br>而且依稀记得很早的时候在知乎看到梁海大神提到过字符集与编码是不一样的概念</p>\n<p>今天仔细查阅了一下，记录如下</p>\n<h1 id=\"字符集与编码\"><a href=\"#字符集与编码\" class=\"headerlink\" title=\"字符集与编码\"></a>字符集与编码</h1><p>顾名思义，「字符」的「集合」，每个「字符」有一个唯一的「数字」与之对应<br>而如何将「数字」改写成内存中的「字节」，即所谓的「编码」或「编码方式」</p>\n<p>引自<a href=\"https://www.zhihu.com/question/21887246/answer/19631235\">字符集和编码方式的区别？ - 梁海的回答</a>：</p>\n<blockquote>\n<p>「字符集」和「编码」等几个层次的概念被彻底分离且模块化的这样一个模型，其实是 Unicode 时代才得到广泛认同的。</p>\n<p>而对于 ASCII、GB2312、Big5 之类的遗留（legacy）方案，其字符集及其编码的关系基本是锁定的，所以常常用「字符编码」（character encoding）、「代码页」（code page）等概念来统称它们那样从字符到编码字节流的整体方案。比如 ASCII 本身就既是字符集又是编码方案，而 GB2312 用的都是 EUC-CN 编码方案。</p>\n</blockquote>\n<h1 id=\"ASCII\"><a href=\"#ASCII\" class=\"headerlink\" title=\"ASCII\"></a>ASCII</h1><p>ASCII 既是字符集又是编码方案，其字符集为「它所能表示的 128 种字符（包括控制字符和显示字符）」，编码方案为「128 个字节码与字符集间的映射」</p>\n<h1 id=\"ANSI\"><a href=\"#ANSI\" class=\"headerlink\" title=\"ANSI\"></a>ANSI</h1><p>ASCII 本身就是 ANSI(American National Standard Institute) 制定的标准。虽然 ASCII 使用一个字节即 8 位的长度，但由于在英文世界中 7 位已经完全够用，所以最高位始终为 0。其他国家便将最高位利用起来，用于扩展表示其他语言的字符。</p>\n<p>ANSI 指的是这样一种编码方式：表示通用英文字符时，最高位为 0，使用 ASCII 编码，长度为一个字节；表示其他语言的专有字符时，最高位为 1，使用其他编码。其中「其他编码」可以是 ANSI 标准中的任意一页，比如「GB2312」，用两个最高位为 1 的字节来表示一个简体中文字符。</p>\n<h1 id=\"Unicode-字符集\"><a href=\"#Unicode-字符集\" class=\"headerlink\" title=\"Unicode 字符集\"></a>Unicode 字符集</h1><p>Unicode 原本只是个字符集，<a href=\"http://www.freebuf.com/articles/others-articles/25623.html\">freebuf 的一篇译文</a>讲得很生动：</p>\n<blockquote>\n<p>Unicode 背后的想法非常简单，然而却被普遍的误解了。Unicode 就像一个电话本，标记着字符和数字之间的映射关系。Joel 称之为「神奇数字」，因为它们可能是随机指定的，而且不会给出任何解释。官方术语是码位（Code Point），总是用 U+ 开头。理论上每种语言中的每种字符都被 Unicode 协会指定了一个神奇数字。例如希伯来文中的第一个字母 א，是 U+2135，字母 A 是 U+0061。</p>\n<p>Unicode 并不涉及字符是怎么在字节中表示的，它仅仅指定了字符对应的数字，仅此而已。</p>\n<p>关于 Unicode 的其它误解包括：Unicode 支持的字符上限是 65536 个，Unicode 字符必须占两个字节。告诉你这些的人应该去换换脑子了。</p>\n<p>记住，Unicode 只是一个用来映射字符和数字的标准。它对支持字符的数量没有限制，也不要求字符必须占两个、三个或者其它任意数量的字节。</p>\n</blockquote>\n<h1 id=\"Unicode-编码\"><a href=\"#Unicode-编码\" class=\"headerlink\" title=\"Unicode 编码\"></a>Unicode 编码</h1><p>Unicode 的实现方式不同于编码方式。一个字符的 Unicode 编码是确定的。但是在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对 Unicode 编码的实现方式有所不同。Unicode 的实现方式称为  Unicode 转换格式（Unicode Transformation Format，简称为 UTF）。</p>\n<h2 id=\"UTF-8-编码\"><a href=\"#UTF-8-编码\" class=\"headerlink\" title=\"UTF-8 编码\"></a>UTF-8 编码</h2><p>如果一个仅包含基本 7 位 ASCII 字符的 Unicode 文件，如果每个字符都使用 2 字节的原 Unicode 编码传输，其第一字节的 8 位始终为 0 。这就造成了比较大的浪费。</p>\n<p>对于这种情况，可以使用 UTF-8 编码，这是一种变长编码，它将基本 7 位 ASCII 字符仍用 7 位编码表示，占用一个字节（首位补 0）。</p>\n<p>而遇到与其他 Unicode 字符混合的情况，将按一定算法转换，每个字符使用 1-3 个字节编码，并利用首位为 0 或 1 进行识别。这样对以 7 位 ASCII 字符为主的西文文档就大大节省了编码长度（具体方案参见 UTF-8）。</p>\n<h2 id=\"UTF-16-编码\"><a href=\"#UTF-16-编码\" class=\"headerlink\" title=\"UTF-16 编码\"></a>UTF-16 编码</h2><p>类似的，另一个流行的可变长度编码方案是 UTF-16，它使用 2 个或者 4 个字节来存储字符。然而，人们逐渐意识到 UTF-16 可能会浪费存储空间，但那是另一个话题了。</p>\n<h2 id=\"狭义的-Unicode-编码\"><a href=\"#狭义的-Unicode-编码\" class=\"headerlink\" title=\"狭义的 Unicode 编码\"></a>狭义的 Unicode 编码</h2><p>需要注意的是，狭义的 Unicode 编码方式与 ISO 10646 的通用字符集（Universal Character Set，UCS）概念相对应，目前实际应用的 Unicode 版本对应于 UCS-2 ，使用 16 位的编码空间。也就是每个字符占用 2 个字节。</p>\n<p>这样理论上一共最多可以表示 216 即 65536 个字符。基本满足各种语言的使用。实际上当前版本的 Unicode 尚未填满这 16 位编码，保留了大量空间作为特殊使用或将来扩展。</p>\n<p>以 Python 为例，<code>unicode(s,&#39;utf8&#39;)</code> 所返回的结果就是这种狭义的 Unicode 编码。</p>\n<p>又是梁海在<a href=\"https://www.zhihu.com/question/19817672/answer/13055185\">廖雪峰答案</a>的评论里提到:</p>\n<blockquote>\n<p>廖雪峰说的「Unicode」指的是 UCS-2（所以不能改成「UTF-32」）。当年只有 BMP 的时候 UCS-2 和 UTF-16 是等价的，又被称作「Unicode」（所以这里不是「Unicode 是字符集，不是编码方式」这个问题，只是 UCS-2 也被称作「Unicode」而已）。但现在这种用「Unicode」指代 UCS-2/UTF-16 的做法已经过时了，很不合适。</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>简单总结一下，Unicode 是「字符集」而不是「编码」。但由于历史原因，某些时候提到的「Unicode 编码」指的是曾经定长的 UCS-2/UTF-16（现在 UTF-16 也是变长）。</p>\n<p>由于 UTF-8 可以兼容 ASCII，且其变长特性能相对高效地利用空间，在应用或传输过程中一般使用的是 UTF-8。例如 Python shell 中 str 使用的就是 ASCII(UTF-8)。</p>\n<p>而内存一般使用的是这种「Unicode 编码」，所以在进行编码转换时，通常将各类编码<code>decode</code>成「Unicode 编码」，在<code>encode</code>成最终编码形式。</p>\n<p>eg:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a=<span class=\"string\">'在'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"string\">'\\xe5\\x9c\\xa8'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b=unicode(a,<span class=\"string\">'utf8'</span>) // 或 b=a.decode(<span class=\"string\">'utf8'</span>)，其中<span class=\"string\">'utf-8'</span>等同于<span class=\"string\">'utf8'</span> </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</div><div class=\"line\"><span class=\"string\">u'\\u5728'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.encode(<span class=\"string\">'gbk'</span>)</div><div class=\"line\"><span class=\"string\">'\\xd4\\xda'</span></div></pre></td></tr></table></figure>\n<p>在 Python 2.x 版本中，字符串实际上是字节串，这种字符串中的每个字符长度为 1，实际上就是一个字节，等同于 ASCII。（参考《Python Cookbook》1.21）</p>\n<p>不过在 Python 3.x 版本中，把 ‘xxx’ 和 u’xxx’ 统一成了 Unicode 编码，即写不写前缀 u 都是一样的，而以字节形式表示的字符串则必须加上 b 前缀。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjhdi5ft800013npx9lq5hc3w","category_id":"cjhdi5fvo00163npxndyxrxh8","_id":"cjhdi5fzc006d3npxr68k65rp"},{"post_id":"cjhdi5fte00023npxq95vkg92","category_id":"cjhdi5fwf00183npxo905tux3","_id":"cjhdi5fzc006f3npxk8e3vml3"},{"post_id":"cjhdi5fth00033npxjw5rmm54","category_id":"cjhdi5fwg001a3npxiszzxbc1","_id":"cjhdi5fzc006h3npxmon993wk"},{"post_id":"cjhdi5fti00043npxcpiwbri0","category_id":"cjhdi5fwg001a3npxiszzxbc1","_id":"cjhdi5fzc006j3npxv7zjkpo5"},{"post_id":"cjhdi5ftk00053npxvgtwcdg7","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzc006l3npxomzspnn1"},{"post_id":"cjhdi5ftm00063npxcglv3fb2","category_id":"cjhdi5fwk001g3npx5d74umgr","_id":"cjhdi5fzc006n3npxwsy67enz"},{"post_id":"cjhdi5ftq00073npx2t14e9k1","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzc006p3npxwkzp4gka"},{"post_id":"cjhdi5fts00083npxvf13djbg","category_id":"cjhdi5fwm001k3npxaalozxi2","_id":"cjhdi5fzd006r3npx5j5bwinm"},{"post_id":"cjhdi5fu000093npx5bzt7wcv","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzd006t3npxjtk6l0j1"},{"post_id":"cjhdi5fu2000a3npx8q7y9ax2","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzd006v3npxc6oezng3"},{"post_id":"cjhdi5fu3000b3npxxa6d56px","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzd006x3npxof1vajod"},{"post_id":"cjhdi5fu5000c3npx00s86xaa","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzd006z3npxpm1i8389"},{"post_id":"cjhdi5fu6000d3npxbhf7kxj9","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzd00713npxn7rujnqu"},{"post_id":"cjhdi5fu7000e3npxmel1iw3i","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzd00733npx9m8ukajv"},{"post_id":"cjhdi5fu9000f3npxzex5k19m","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzd00753npxdxvhm8xo"},{"post_id":"cjhdi5fua000g3npx7d5zqnxh","category_id":"cjhdi5fwu00203npx1dhm0umv","_id":"cjhdi5fze00773npx58x1jt5c"},{"post_id":"cjhdi5fub000h3npxgourzxbf","category_id":"cjhdi5fwm001k3npxaalozxi2","_id":"cjhdi5fze00793npxr9gofgnv"},{"post_id":"cjhdi5fuc000i3npxbxi0f2hf","category_id":"cjhdi5fwz00243npxe0r7kvb3","_id":"cjhdi5fze007b3npxvs9j1nbl"},{"post_id":"cjhdi5fud000j3npxt73kxaht","category_id":"cjhdi5fwf00183npxo905tux3","_id":"cjhdi5fze007d3npxb5ie8rcp"},{"post_id":"cjhdi5fug000k3npxd3qw02yy","category_id":"cjhdi5fx200273npx0cm5rn7w","_id":"cjhdi5fze007f3npxzhq2mk85"},{"post_id":"cjhdi5fun000l3npxdngjo0jm","category_id":"cjhdi5fwm001k3npxaalozxi2","_id":"cjhdi5fze007h3npxmftt02h1"},{"post_id":"cjhdi5fur000n3npxa0013cmo","category_id":"cjhdi5fx3002b3npxrcbvkwly","_id":"cjhdi5fze007j3npx6o9wqg28"},{"post_id":"cjhdi5fus000o3npxswlbzd4v","category_id":"cjhdi5fx5002d3npxy42v42p5","_id":"cjhdi5fze007l3npxdit427t0"},{"post_id":"cjhdi5fut000p3npxr0f5m6ec","category_id":"cjhdi5fx5002d3npxy42v42p5","_id":"cjhdi5fze007n3npxke4gze53"},{"post_id":"cjhdi5fuu000q3npx0blfvcft","category_id":"cjhdi5fx7002h3npx6z2878ta","_id":"cjhdi5fze007p3npx7ibneuhu"},{"post_id":"cjhdi5fuv000r3npxlp2bpqmn","category_id":"cjhdi5fx7002h3npx6z2878ta","_id":"cjhdi5fze007r3npxiavcwsl3"},{"post_id":"cjhdi5fux000s3npx3i7tq3na","category_id":"cjhdi5fx8002l3npxfvi5cf41","_id":"cjhdi5fze007t3npx44qrs67x"},{"post_id":"cjhdi5fux000t3npx1noh5d7r","category_id":"cjhdi5fwm001k3npxaalozxi2","_id":"cjhdi5fzf007v3npxj4kh71du"},{"post_id":"cjhdi5fuy000u3npxggygdnky","category_id":"cjhdi5fvo00163npxndyxrxh8","_id":"cjhdi5fzf007x3npxsx9m41c6"},{"post_id":"cjhdi5fv1000w3npx86l4eimg","category_id":"cjhdi5fvo00163npxndyxrxh8","_id":"cjhdi5fzf007z3npxkhsapchx"},{"post_id":"cjhdi5fv3000x3npxi24egd5t","category_id":"cjhdi5fvo00163npxndyxrxh8","_id":"cjhdi5fzf00813npxlze2nfsz"},{"post_id":"cjhdi5fv4000y3npxn3fvny2x","category_id":"cjhdi5fvo00163npxndyxrxh8","_id":"cjhdi5fzf00833npxaewtsq6n"},{"post_id":"cjhdi5fv4000z3npxzeypn8by","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzf00853npxo6ej079w"},{"post_id":"cjhdi5fv500103npxvoi3n9bx","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzf00873npxe6gy15xv"},{"post_id":"cjhdi5fv600113npxt44yjww6","category_id":"cjhdi5fwj001e3npxx5c6nw2j","_id":"cjhdi5fzf00893npxurfqfo6d"},{"post_id":"cjhdi5fv700123npxmgoalomc","category_id":"cjhdi5fxi00323npxn7m6cgac","_id":"cjhdi5fzf008b3npxry2h3svq"},{"post_id":"cjhdi5fv800133npxcuiuhtr9","category_id":"cjhdi5fvo00163npxndyxrxh8","_id":"cjhdi5fzf008d3npx9nh993b3"},{"post_id":"cjhdi5fv900143npxkuzjvcv9","category_id":"cjhdi5fxj00363npxm0eogiyn","_id":"cjhdi5fzf008f3npxjdnh7gm2"},{"post_id":"cjhdi5fva00153npxihyiusi0","category_id":"cjhdi5fxl00383npxr7ix7ohq","_id":"cjhdi5fzf008h3npxpne3d2e4"}],"PostTag":[{"post_id":"cjhdi5ft800013npx9lq5hc3w","tag_id":"cjhdi5fwe00173npx70zzdedn","_id":"cjhdi5fzb006c3npxe3yrznul"},{"post_id":"cjhdi5ft800013npx9lq5hc3w","tag_id":"cjhdi5fwf00193npxuld9a8pm","_id":"cjhdi5fzc006e3npxlu15y3ve"},{"post_id":"cjhdi5ft800013npx9lq5hc3w","tag_id":"cjhdi5fwg001b3npxpmduj549","_id":"cjhdi5fzc006g3npxmycz7xev"},{"post_id":"cjhdi5fte00023npxq95vkg92","tag_id":"cjhdi5fwh001d3npxlhk2jkj8","_id":"cjhdi5fzc006i3npx3i0y77u3"},{"post_id":"cjhdi5fte00023npxq95vkg92","tag_id":"cjhdi5fwk001f3npxt9u4y46k","_id":"cjhdi5fzc006k3npxgeq4u45k"},{"post_id":"cjhdi5fte00023npxq95vkg92","tag_id":"cjhdi5fwl001h3npxobu4g9dl","_id":"cjhdi5fzc006m3npx85k8oomr"},{"post_id":"cjhdi5fte00023npxq95vkg92","tag_id":"cjhdi5fwl001j3npxe4sxhtse","_id":"cjhdi5fzc006o3npxsmpatgn9"},{"post_id":"cjhdi5fth00033npxjw5rmm54","tag_id":"cjhdi5fwm001l3npxh1n7mlte","_id":"cjhdi5fzc006q3npx0lv3bgqx"},{"post_id":"cjhdi5fth00033npxjw5rmm54","tag_id":"cjhdi5fwm001n3npxvx7p0ohn","_id":"cjhdi5fzd006s3npx7cnttnhf"},{"post_id":"cjhdi5fth00033npxjw5rmm54","tag_id":"cjhdi5fwn001p3npxs1w6m0dl","_id":"cjhdi5fzd006u3npxhqh0enig"},{"post_id":"cjhdi5fth00033npxjw5rmm54","tag_id":"cjhdi5fwo001r3npxiu46zo3l","_id":"cjhdi5fzd006w3npxweyluykc"},{"post_id":"cjhdi5fti00043npxcpiwbri0","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzd006y3npxz1waicw3"},{"post_id":"cjhdi5fti00043npxcpiwbri0","tag_id":"cjhdi5fwm001n3npxvx7p0ohn","_id":"cjhdi5fzd00703npxnz1jp43t"},{"post_id":"cjhdi5fti00043npxcpiwbri0","tag_id":"cjhdi5fwr001x3npxs6pw5fmi","_id":"cjhdi5fzd00723npxb7qwwy1k"},{"post_id":"cjhdi5fti00043npxcpiwbri0","tag_id":"cjhdi5fwt001z3npx33066h0c","_id":"cjhdi5fzd00743npxzvj9pza8"},{"post_id":"cjhdi5ftk00053npxvgtwcdg7","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzd00763npx5dnw6zmr"},{"post_id":"cjhdi5ftk00053npxvgtwcdg7","tag_id":"cjhdi5fwy00233npxdo87qe5f","_id":"cjhdi5fze00783npxv15w6a84"},{"post_id":"cjhdi5ftk00053npxvgtwcdg7","tag_id":"cjhdi5fx000253npxpp4e59u7","_id":"cjhdi5fze007a3npxd8bdgp4u"},{"post_id":"cjhdi5ftm00063npxcglv3fb2","tag_id":"cjhdi5fx200283npxgbhva4vj","_id":"cjhdi5fze007c3npxzbjec6mt"},{"post_id":"cjhdi5ftm00063npxcglv3fb2","tag_id":"cjhdi5fx2002a3npxcqyurqi7","_id":"cjhdi5fze007e3npxm8rp62e9"},{"post_id":"cjhdi5ftm00063npxcglv3fb2","tag_id":"cjhdi5fx4002c3npxvwmqs3ds","_id":"cjhdi5fze007g3npxyixv0t16"},{"post_id":"cjhdi5ftm00063npxcglv3fb2","tag_id":"cjhdi5fx5002e3npxipkxqr4j","_id":"cjhdi5fze007i3npxt7qlam3q"},{"post_id":"cjhdi5ftm00063npxcglv3fb2","tag_id":"cjhdi5fx6002g3npx6blyf45t","_id":"cjhdi5fze007k3npxmjc2et6x"},{"post_id":"cjhdi5ftm00063npxcglv3fb2","tag_id":"cjhdi5fx7002i3npx7eh42pdp","_id":"cjhdi5fze007m3npx08oc5com"},{"post_id":"cjhdi5ftm00063npxcglv3fb2","tag_id":"cjhdi5fx8002k3npxnojgbntt","_id":"cjhdi5fze007o3npx8971yfdi"},{"post_id":"cjhdi5ftm00063npxcglv3fb2","tag_id":"cjhdi5fx9002m3npxpg6vk8x2","_id":"cjhdi5fze007q3npxluk6mhho"},{"post_id":"cjhdi5ftq00073npx2t14e9k1","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fze007s3npxsc49k1n7"},{"post_id":"cjhdi5ftq00073npx2t14e9k1","tag_id":"cjhdi5fxd002q3npx3wts2qfi","_id":"cjhdi5fze007u3npxdwysw1tv"},{"post_id":"cjhdi5ftq00073npx2t14e9k1","tag_id":"cjhdi5fxe002s3npx4hsu5l3w","_id":"cjhdi5fzf007w3npxl6t8xtj2"},{"post_id":"cjhdi5ftq00073npx2t14e9k1","tag_id":"cjhdi5fxf002u3npxmoy4ptla","_id":"cjhdi5fzf007y3npx4b176mxm"},{"post_id":"cjhdi5fts00083npxvf13djbg","tag_id":"cjhdi5fxf002w3npxnc3gsen8","_id":"cjhdi5fzf00803npxy2waeow1"},{"post_id":"cjhdi5fts00083npxvf13djbg","tag_id":"cjhdi5fxg002y3npxxs88514s","_id":"cjhdi5fzf00823npxbo0vmq90"},{"post_id":"cjhdi5fts00083npxvf13djbg","tag_id":"cjhdi5fxh00313npxgfzh4wc7","_id":"cjhdi5fzf00843npx41nxzj36"},{"post_id":"cjhdi5fts00083npxvf13djbg","tag_id":"cjhdi5fxi00333npxssr965vc","_id":"cjhdi5fzf00863npx5n7ndqiw"},{"post_id":"cjhdi5fts00083npxvf13djbg","tag_id":"cjhdi5fxj00353npx53x2almu","_id":"cjhdi5fzf00883npxqcemvzbz"},{"post_id":"cjhdi5fu000093npx5bzt7wcv","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzf008a3npxln4e8smb"},{"post_id":"cjhdi5fu000093npx5bzt7wcv","tag_id":"cjhdi5fxl00393npxoavikcwl","_id":"cjhdi5fzf008c3npxmoqho3zw"},{"post_id":"cjhdi5fu000093npx5bzt7wcv","tag_id":"cjhdi5fxm003a3npxvg5t3503","_id":"cjhdi5fzf008e3npxl5pnhmim"},{"post_id":"cjhdi5fu2000a3npx8q7y9ax2","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzf008g3npx56pt1n41"},{"post_id":"cjhdi5fu2000a3npx8q7y9ax2","tag_id":"cjhdi5fxl00393npxoavikcwl","_id":"cjhdi5fzf008i3npxaphxoni0"},{"post_id":"cjhdi5fu2000a3npx8q7y9ax2","tag_id":"cjhdi5fxn003d3npx84c57yko","_id":"cjhdi5fzf008j3npx7ego4ezu"},{"post_id":"cjhdi5fu3000b3npxxa6d56px","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzf008k3npxi8zg23a1"},{"post_id":"cjhdi5fu3000b3npxxa6d56px","tag_id":"cjhdi5fxl00393npxoavikcwl","_id":"cjhdi5fzf008l3npxroaoemzx"},{"post_id":"cjhdi5fu3000b3npxxa6d56px","tag_id":"cjhdi5fxn003g3npxkwsvwn8u","_id":"cjhdi5fzf008m3npxss0xjef4"},{"post_id":"cjhdi5fu5000c3npx00s86xaa","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzf008n3npx9kklg98n"},{"post_id":"cjhdi5fu5000c3npx00s86xaa","tag_id":"cjhdi5fxl00393npxoavikcwl","_id":"cjhdi5fzf008o3npxzzlim4ol"},{"post_id":"cjhdi5fu5000c3npx00s86xaa","tag_id":"cjhdi5fxo003j3npx66xbp8pg","_id":"cjhdi5fzg008p3npxpf7lovd6"},{"post_id":"cjhdi5fu6000d3npxbhf7kxj9","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzg008q3npxnbcly9sd"},{"post_id":"cjhdi5fu6000d3npxbhf7kxj9","tag_id":"cjhdi5fxl00393npxoavikcwl","_id":"cjhdi5fzg008r3npxly6yxas3"},{"post_id":"cjhdi5fu7000e3npxmel1iw3i","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzg008s3npxon8ox077"},{"post_id":"cjhdi5fu7000e3npxmel1iw3i","tag_id":"cjhdi5fxl00393npxoavikcwl","_id":"cjhdi5fzg008t3npxdiv4vhhr"},{"post_id":"cjhdi5fu7000e3npxmel1iw3i","tag_id":"cjhdi5fxs003o3npxj1qun8gj","_id":"cjhdi5fzg008u3npxw7aoismq"},{"post_id":"cjhdi5fu9000f3npxzex5k19m","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzg008v3npxzcyyit2o"},{"post_id":"cjhdi5fu9000f3npxzex5k19m","tag_id":"cjhdi5fxl00393npxoavikcwl","_id":"cjhdi5fzg008w3npxf46z3ndj"},{"post_id":"cjhdi5fu9000f3npxzex5k19m","tag_id":"cjhdi5fxt003r3npxix979ilp","_id":"cjhdi5fzg008x3npxm2w1p10a"},{"post_id":"cjhdi5fua000g3npx7d5zqnxh","tag_id":"cjhdi5fxt003s3npxcy84tf1z","_id":"cjhdi5fzg008y3npxy2dtydrl"},{"post_id":"cjhdi5fua000g3npx7d5zqnxh","tag_id":"cjhdi5fxt003t3npxgxeyiymg","_id":"cjhdi5fzg008z3npxhc8pkud7"},{"post_id":"cjhdi5fua000g3npx7d5zqnxh","tag_id":"cjhdi5fxu003u3npxxam6c6jg","_id":"cjhdi5fzg00903npxuvxm8qyl"},{"post_id":"cjhdi5fua000g3npx7d5zqnxh","tag_id":"cjhdi5fxv003v3npx09658e3p","_id":"cjhdi5fzg00913npximlc1ma5"},{"post_id":"cjhdi5fub000h3npxgourzxbf","tag_id":"cjhdi5fxv003w3npxeov6wiqv","_id":"cjhdi5fzg00923npxywslg0u8"},{"post_id":"cjhdi5fub000h3npxgourzxbf","tag_id":"cjhdi5fx9002m3npxpg6vk8x2","_id":"cjhdi5fzg00933npxuwa357z3"},{"post_id":"cjhdi5fub000h3npxgourzxbf","tag_id":"cjhdi5fxw003y3npxyfs485zu","_id":"cjhdi5fzg00943npx5vymz4bm"},{"post_id":"cjhdi5fuc000i3npxbxi0f2hf","tag_id":"cjhdi5fxv003w3npxeov6wiqv","_id":"cjhdi5fzg00953npx6p3mch7v"},{"post_id":"cjhdi5fuc000i3npxbxi0f2hf","tag_id":"cjhdi5fxw00403npxw7b6rww0","_id":"cjhdi5fzg00963npx2ci325zw"},{"post_id":"cjhdi5fud000j3npxt73kxaht","tag_id":"cjhdi5fwh001d3npxlhk2jkj8","_id":"cjhdi5fzg00973npx1hkm3rml"},{"post_id":"cjhdi5fud000j3npxt73kxaht","tag_id":"cjhdi5fwk001f3npxt9u4y46k","_id":"cjhdi5fzg00983npx5i7051hs"},{"post_id":"cjhdi5fud000j3npxt73kxaht","tag_id":"cjhdi5fwl001h3npxobu4g9dl","_id":"cjhdi5fzg00993npx8lci1v8a"},{"post_id":"cjhdi5fud000j3npxt73kxaht","tag_id":"cjhdi5fxy00443npxvi0se467","_id":"cjhdi5fzh009a3npxi6bcwpk1"},{"post_id":"cjhdi5fud000j3npxt73kxaht","tag_id":"cjhdi5fxy00453npxp4t8m97n","_id":"cjhdi5fzh009b3npx1ppmj3xo"},{"post_id":"cjhdi5fud000j3npxt73kxaht","tag_id":"cjhdi5fxy00463npx71w2f86y","_id":"cjhdi5fzh009c3npxbfirt7pz"},{"post_id":"cjhdi5fug000k3npxd3qw02yy","tag_id":"cjhdi5fwh001d3npxlhk2jkj8","_id":"cjhdi5fzh009d3npx8npr6k3e"},{"post_id":"cjhdi5fug000k3npxd3qw02yy","tag_id":"cjhdi5fwk001f3npxt9u4y46k","_id":"cjhdi5fzh009e3npxtias2o84"},{"post_id":"cjhdi5fug000k3npxd3qw02yy","tag_id":"cjhdi5fxz00493npxxyo38x5y","_id":"cjhdi5fzh009f3npxz9m8g434"},{"post_id":"cjhdi5fug000k3npxd3qw02yy","tag_id":"cjhdi5fxz004a3npxnqeyuvwe","_id":"cjhdi5fzh009g3npxwtq3pzu0"},{"post_id":"cjhdi5fug000k3npxd3qw02yy","tag_id":"cjhdi5fy0004b3npxj68r5is6","_id":"cjhdi5fzh009h3npxrbfyu9hr"},{"post_id":"cjhdi5fun000l3npxdngjo0jm","tag_id":"cjhdi5fy0004c3npx6t42cnek","_id":"cjhdi5fzh009i3npxpubd82a0"},{"post_id":"cjhdi5fun000l3npxdngjo0jm","tag_id":"cjhdi5fy0004d3npx4t53c066","_id":"cjhdi5fzi009j3npxfxoyd53f"},{"post_id":"cjhdi5fun000l3npxdngjo0jm","tag_id":"cjhdi5fxi00333npxssr965vc","_id":"cjhdi5fzi009k3npxk4bz3tj4"},{"post_id":"cjhdi5fup000m3npx9xm4kz4u","tag_id":"cjhdi5fy1004f3npxmvnd3le4","_id":"cjhdi5fzi009l3npx3yadxxmp"},{"post_id":"cjhdi5fur000n3npxa0013cmo","tag_id":"cjhdi5fy1004g3npxoyprdhvs","_id":"cjhdi5fzi009m3npxuh3q9dyx"},{"post_id":"cjhdi5fur000n3npxa0013cmo","tag_id":"cjhdi5fy1004h3npxfujxgft4","_id":"cjhdi5fzi009n3npx3np8bu22"},{"post_id":"cjhdi5fur000n3npxa0013cmo","tag_id":"cjhdi5fy2004i3npxc5zrsb10","_id":"cjhdi5fzi009o3npx1zgnjqhv"},{"post_id":"cjhdi5fus000o3npxswlbzd4v","tag_id":"cjhdi5fy2004j3npxee74680a","_id":"cjhdi5fzi009p3npx7jz9ot2i"},{"post_id":"cjhdi5fus000o3npxswlbzd4v","tag_id":"cjhdi5fy1004g3npxoyprdhvs","_id":"cjhdi5fzk009q3npxfzstgs5n"},{"post_id":"cjhdi5fus000o3npxswlbzd4v","tag_id":"cjhdi5fy1004h3npxfujxgft4","_id":"cjhdi5fzk009r3npx4u3cvv2u"},{"post_id":"cjhdi5fut000p3npxr0f5m6ec","tag_id":"cjhdi5fy2004j3npxee74680a","_id":"cjhdi5fzk009s3npxki2dp5ww"},{"post_id":"cjhdi5fut000p3npxr0f5m6ec","tag_id":"cjhdi5fy3004n3npxz785hhi0","_id":"cjhdi5fzk009t3npxru8s3bdy"},{"post_id":"cjhdi5fut000p3npxr0f5m6ec","tag_id":"cjhdi5fy4004o3npxddaquknu","_id":"cjhdi5fzk009u3npxzm7gfduo"},{"post_id":"cjhdi5fuu000q3npx0blfvcft","tag_id":"cjhdi5fy0004c3npx6t42cnek","_id":"cjhdi5fzl009v3npx7ytsal5x"},{"post_id":"cjhdi5fuu000q3npx0blfvcft","tag_id":"cjhdi5fxj00353npx53x2almu","_id":"cjhdi5fzl009w3npxw9ah4rsu"},{"post_id":"cjhdi5fuu000q3npx0blfvcft","tag_id":"cjhdi5fy5004r3npxhmfynv9s","_id":"cjhdi5fzl009x3npx2jwton4p"},{"post_id":"cjhdi5fuu000q3npx0blfvcft","tag_id":"cjhdi5fy5004s3npxkkbp5vcf","_id":"cjhdi5fzl009y3npxwd6n4a2a"},{"post_id":"cjhdi5fuv000r3npxlp2bpqmn","tag_id":"cjhdi5fy5004r3npxhmfynv9s","_id":"cjhdi5fzl009z3npx53cidapu"},{"post_id":"cjhdi5fuv000r3npxlp2bpqmn","tag_id":"cjhdi5fy0004c3npx6t42cnek","_id":"cjhdi5fzl00a03npx1yvpvrh9"},{"post_id":"cjhdi5fuv000r3npxlp2bpqmn","tag_id":"cjhdi5fxj00353npx53x2almu","_id":"cjhdi5fzl00a13npxyuxsfjx6"},{"post_id":"cjhdi5fux000s3npx3i7tq3na","tag_id":"cjhdi5fwk001f3npxt9u4y46k","_id":"cjhdi5fzl00a23npxv4m6ucno"},{"post_id":"cjhdi5fux000s3npx3i7tq3na","tag_id":"cjhdi5fya004x3npxjx4hrjcx","_id":"cjhdi5fzl00a33npxsprfy7yh"},{"post_id":"cjhdi5fux000s3npx3i7tq3na","tag_id":"cjhdi5fwl001h3npxobu4g9dl","_id":"cjhdi5fzl00a43npxjrhwxuzh"},{"post_id":"cjhdi5fux000s3npx3i7tq3na","tag_id":"cjhdi5fwl001j3npxe4sxhtse","_id":"cjhdi5fzl00a53npxwl48u347"},{"post_id":"cjhdi5fux000t3npx1noh5d7r","tag_id":"cjhdi5fy0004c3npx6t42cnek","_id":"cjhdi5fzl00a63npxe62wbzzu"},{"post_id":"cjhdi5fux000t3npx1noh5d7r","tag_id":"cjhdi5fyc00513npxjvbkdaeb","_id":"cjhdi5fzl00a73npxomais7vw"},{"post_id":"cjhdi5fux000t3npx1noh5d7r","tag_id":"cjhdi5fyd00523npxpkc126ch","_id":"cjhdi5fzl00a83npxu9i71fu8"},{"post_id":"cjhdi5fux000t3npx1noh5d7r","tag_id":"cjhdi5fxi00333npxssr965vc","_id":"cjhdi5fzl00a93npxnd2fuuso"},{"post_id":"cjhdi5fux000t3npx1noh5d7r","tag_id":"cjhdi5fyd00543npx167dfspd","_id":"cjhdi5fzl00aa3npxq99571u6"},{"post_id":"cjhdi5fuy000u3npxggygdnky","tag_id":"cjhdi5fye00553npxksb1jiu8","_id":"cjhdi5fzl00ab3npxmntmky43"},{"post_id":"cjhdi5fuy000u3npxggygdnky","tag_id":"cjhdi5fye00563npx6l0l3zye","_id":"cjhdi5fzm00ac3npxc334v4un"},{"post_id":"cjhdi5fuz000v3npxoe8cg8nu","tag_id":"cjhdi5fye00573npxffxb7s5s","_id":"cjhdi5fzm00ad3npx8ez32q7p"},{"post_id":"cjhdi5fuz000v3npxoe8cg8nu","tag_id":"cjhdi5fyf00583npxqf7m793c","_id":"cjhdi5fzn00ae3npx6b7gb4xl"},{"post_id":"cjhdi5fuz000v3npxoe8cg8nu","tag_id":"cjhdi5fyf00593npx0nez8wjo","_id":"cjhdi5fzn00af3npx5jfif6he"},{"post_id":"cjhdi5fuz000v3npxoe8cg8nu","tag_id":"cjhdi5fyf005a3npxscic3m8d","_id":"cjhdi5fzn00ag3npxppgwlgqs"},{"post_id":"cjhdi5fv1000w3npx86l4eimg","tag_id":"cjhdi5fyg005b3npxx3mq4z77","_id":"cjhdi5fzn00ah3npxinif54gs"},{"post_id":"cjhdi5fv1000w3npx86l4eimg","tag_id":"cjhdi5fyg005c3npxlf6yx4t3","_id":"cjhdi5fzn00ai3npx0sli1r1a"},{"post_id":"cjhdi5fv3000x3npxi24egd5t","tag_id":"cjhdi5fyg005d3npxvju78k61","_id":"cjhdi5fzn00aj3npxe01if86t"},{"post_id":"cjhdi5fv3000x3npxi24egd5t","tag_id":"cjhdi5fyg005e3npxgvp5hxv8","_id":"cjhdi5fzn00ak3npxsono6sac"},{"post_id":"cjhdi5fv3000x3npxi24egd5t","tag_id":"cjhdi5fyg005f3npx1z22fm4b","_id":"cjhdi5fzn00al3npxy5lu084v"},{"post_id":"cjhdi5fv3000x3npxi24egd5t","tag_id":"cjhdi5fwf00193npxuld9a8pm","_id":"cjhdi5fzn00am3npxygt9fn5a"},{"post_id":"cjhdi5fv3000x3npxi24egd5t","tag_id":"cjhdi5fyi005h3npx5xobtkw9","_id":"cjhdi5fzn00an3npxrx9gfxrj"},{"post_id":"cjhdi5fv3000x3npxi24egd5t","tag_id":"cjhdi5fyi005i3npxiysqq5h7","_id":"cjhdi5fzn00ao3npxr4ktxnh4"},{"post_id":"cjhdi5fv4000y3npxn3fvny2x","tag_id":"cjhdi5fyi005j3npxp5br0ika","_id":"cjhdi5fzn00ap3npxr0rpxw7a"},{"post_id":"cjhdi5fv4000y3npxn3fvny2x","tag_id":"cjhdi5fyg005e3npxgvp5hxv8","_id":"cjhdi5fzn00aq3npxcq8moof6"},{"post_id":"cjhdi5fv4000z3npxzeypn8by","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzn00ar3npxb95gsn8y"},{"post_id":"cjhdi5fv4000z3npxzeypn8by","tag_id":"cjhdi5fyj005m3npxn08o5gcd","_id":"cjhdi5fzn00as3npxpxmyg8ld"},{"post_id":"cjhdi5fv4000z3npxzeypn8by","tag_id":"cjhdi5fyk005n3npxwwin6rvo","_id":"cjhdi5fzn00at3npx0l6t48s2"},{"post_id":"cjhdi5fv4000z3npxzeypn8by","tag_id":"cjhdi5fyk005o3npxzlp7v1my","_id":"cjhdi5fzn00au3npxze0x1nz8"},{"post_id":"cjhdi5fv4000z3npxzeypn8by","tag_id":"cjhdi5fyl005p3npxxtjnol43","_id":"cjhdi5fzn00av3npxrmg04zxw"},{"post_id":"cjhdi5fv500103npxvoi3n9bx","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzn00aw3npxh3hbh3j3"},{"post_id":"cjhdi5fv500103npxvoi3n9bx","tag_id":"cjhdi5fyl005r3npxqcfc1ek6","_id":"cjhdi5fzn00ax3npxz5q8rcb2"},{"post_id":"cjhdi5fv500103npxvoi3n9bx","tag_id":"cjhdi5fyl005s3npxqvrnxpsi","_id":"cjhdi5fzn00ay3npx3r0qnvpk"},{"post_id":"cjhdi5fv500103npxvoi3n9bx","tag_id":"cjhdi5fym005t3npxskcpc6rq","_id":"cjhdi5fzn00az3npxodm5g6x2"},{"post_id":"cjhdi5fv500103npxvoi3n9bx","tag_id":"cjhdi5fxw003y3npxyfs485zu","_id":"cjhdi5fzo00b03npxw7gfvysi"},{"post_id":"cjhdi5fv600113npxt44yjww6","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzo00b13npx76bl1zf0"},{"post_id":"cjhdi5fv600113npxt44yjww6","tag_id":"cjhdi5fyo005w3npxijumsszy","_id":"cjhdi5fzo00b23npx9tia4hlm"},{"post_id":"cjhdi5fv600113npxt44yjww6","tag_id":"cjhdi5fyq005x3npx3yuvr3pp","_id":"cjhdi5fzo00b33npxnvdm5ey7"},{"post_id":"cjhdi5fv600113npxt44yjww6","tag_id":"cjhdi5fyq005y3npx20zdkagf","_id":"cjhdi5fzo00b43npxonz330w6"},{"post_id":"cjhdi5fv700123npxmgoalomc","tag_id":"cjhdi5fyq005z3npxav3vwmp1","_id":"cjhdi5fzo00b53npx7x86vjma"},{"post_id":"cjhdi5fv800133npxcuiuhtr9","tag_id":"cjhdi5fyr00603npx6498qdrs","_id":"cjhdi5fzo00b63npx4yneoxvf"},{"post_id":"cjhdi5fv800133npxcuiuhtr9","tag_id":"cjhdi5fyr00613npxjwv1ngn5","_id":"cjhdi5fzo00b73npxd1p684ch"},{"post_id":"cjhdi5fv800133npxcuiuhtr9","tag_id":"cjhdi5fye00553npxksb1jiu8","_id":"cjhdi5fzo00b83npxqwnj3opz"},{"post_id":"cjhdi5fv900143npxkuzjvcv9","tag_id":"cjhdi5fys00633npxtxy5ldiz","_id":"cjhdi5fzo00b93npxuyanhw4j"},{"post_id":"cjhdi5fv900143npxkuzjvcv9","tag_id":"cjhdi5fxv003w3npxeov6wiqv","_id":"cjhdi5fzo00ba3npxbgimyzpr"},{"post_id":"cjhdi5fva00153npxihyiusi0","tag_id":"cjhdi5fys00653npxugwh8p76","_id":"cjhdi5fzo00bb3npxnoombslu"},{"post_id":"cjhdi5fva00153npxihyiusi0","tag_id":"cjhdi5fyt00663npxz24neewk","_id":"cjhdi5fzo00bc3npx5noqa388"},{"post_id":"cjhdi5fva00153npxihyiusi0","tag_id":"cjhdi5fyt00673npxy4gusb2y","_id":"cjhdi5fzo00bd3npxxwmp2i80"},{"post_id":"cjhdi5fva00153npxihyiusi0","tag_id":"cjhdi5fyo005w3npxijumsszy","_id":"cjhdi5fzo00be3npx0nn2ilvl"},{"post_id":"cjhdi5fva00153npxihyiusi0","tag_id":"cjhdi5fz100693npxyzojhujy","_id":"cjhdi5fzo00bf3npxma4i9gui"},{"post_id":"cjhdi5fva00153npxihyiusi0","tag_id":"cjhdi5fyg005c3npxlf6yx4t3","_id":"cjhdi5fzo00bg3npxdosfs80i"},{"post_id":"cjhdi5fva00153npxihyiusi0","tag_id":"cjhdi5fwo001t3npx9qyvnxor","_id":"cjhdi5fzo00bh3npxmsevl7w0"}],"Tag":[{"name":"Privoxy","_id":"cjhdi5fwe00173npx70zzdedn"},{"name":"Shadowsocks","_id":"cjhdi5fwf00193npxuld9a8pm"},{"name":"gfw","_id":"cjhdi5fwg001b3npxpmduj549"},{"name":"Coursera","_id":"cjhdi5fwh001d3npxlhk2jkj8"},{"name":"JavaScript","_id":"cjhdi5fwk001f3npxt9u4y46k"},{"name":"AngularJS","_id":"cjhdi5fwl001h3npxobu4g9dl"},{"name":"ngResource","_id":"cjhdi5fwl001j3npxe4sxhtse"},{"name":"Flask","_id":"cjhdi5fwm001l3npxh1n7mlte"},{"name":"Flask-SQLAlchemy","_id":"cjhdi5fwm001n3npxvx7p0ohn"},{"name":"relationship","_id":"cjhdi5fwn001p3npxs1w6m0dl"},{"name":"backref","_id":"cjhdi5fwo001r3npxiu46zo3l"},{"name":"Python","_id":"cjhdi5fwo001t3npx9qyvnxor"},{"name":"Alembic","_id":"cjhdi5fwr001x3npxs6pw5fmi"},{"name":"Flask-Migrate","_id":"cjhdi5fwt001z3npx33066h0c"},{"name":"sorted","_id":"cjhdi5fwy00233npxdo87qe5f"},{"name":"key","_id":"cjhdi5fx000253npxpp4e59u7"},{"name":"Linux","_id":"cjhdi5fx200283npxgbhva4vj"},{"name":"x86","_id":"cjhdi5fx2002a3npxcqyurqi7"},{"name":"elf","_id":"cjhdi5fx4002c3npxvwmqs3ds"},{"name":"main","_id":"cjhdi5fx5002e3npxipkxqr4j"},{"name":"libc","_id":"cjhdi5fx6002g3npx6blyf45t"},{"name":"start","_id":"cjhdi5fx7002i3npx7eh42pdp"},{"name":"init","_id":"cjhdi5fx8002k3npxnojgbntt"},{"name":"gdb","_id":"cjhdi5fx9002m3npxpg6vk8x2"},{"name":"Closure","_id":"cjhdi5fxd002q3npx3wts2qfi"},{"name":"Decorator","_id":"cjhdi5fxe002s3npx4hsu5l3w"},{"name":"func_defaults","_id":"cjhdi5fxf002u3npxmoy4ptla"},{"name":"Q","_id":"cjhdi5fxf002w3npxnc3gsen8"},{"name":"asm","_id":"cjhdi5fxg002y3npxxs88514s"},{"name":"align","_id":"cjhdi5fxh00313npxgfzh4wc7"},{"name":"capstone","_id":"cjhdi5fxi00333npxssr965vc"},{"name":"ida","_id":"cjhdi5fxj00353npx53x2almu"},{"name":"Spider","_id":"cjhdi5fxl00393npxoavikcwl"},{"name":"ThreadPool","_id":"cjhdi5fxm003a3npxvg5t3503"},{"name":"logging","_id":"cjhdi5fxn003d3npx84c57yko"},{"name":"argparse","_id":"cjhdi5fxn003g3npxkwsvwn8u"},{"name":"sqlite","_id":"cjhdi5fxo003j3npx66xbp8pg"},{"name":"requests","_id":"cjhdi5fxs003o3npxj1qun8gj"},{"name":"doctest","_id":"cjhdi5fxt003r3npxix979ilp"},{"name":"SublimeREPL","_id":"cjhdi5fxt003s3npxcy84tf1z"},{"name":"ExpandRegion","_id":"cjhdi5fxt003t3npxgxeyiymg"},{"name":"Anaconda","_id":"cjhdi5fxu003u3npxxam6c6jg"},{"name":"MarkdownEditing","_id":"cjhdi5fxv003v3npx09658e3p"},{"name":"Archlinux","_id":"cjhdi5fxv003w3npxeov6wiqv"},{"name":"pip","_id":"cjhdi5fxw003y3npxyfs485zu"},{"name":"vmtools","_id":"cjhdi5fxw00403npxw7b6rww0"},{"name":"Brackets","_id":"cjhdi5fxy00443npxvi0se467"},{"name":"gulp","_id":"cjhdi5fxy00453npxp4t8m97n"},{"name":"browser-sync","_id":"cjhdi5fxy00463npx71w2f86y"},{"name":"bootstrap","_id":"cjhdi5fxz00493npxxyo38x5y"},{"name":"keyboard","_id":"cjhdi5fxz004a3npxnqeyuvwe"},{"name":"tagIndex","_id":"cjhdi5fy0004b3npxj68r5is6"},{"name":"python","_id":"cjhdi5fy0004c3npx6t42cnek"},{"name":"ropgadget","_id":"cjhdi5fy0004d3npx4t53c066"},{"name":"Refactoring","_id":"cjhdi5fy1004f3npxmvnd3le4"},{"name":"git","_id":"cjhdi5fy1004g3npxoyprdhvs"},{"name":"github","_id":"cjhdi5fy1004h3npxfujxgft4"},{"name":"ssh","_id":"cjhdi5fy2004i3npxc5zrsb10"},{"name":"hexo","_id":"cjhdi5fy2004j3npxee74680a"},{"name":"rss","_id":"cjhdi5fy3004n3npxz785hhi0"},{"name":"sitemap","_id":"cjhdi5fy4004o3npxddaquknu"},{"name":"idapython","_id":"cjhdi5fy5004r3npxhmfynv9s"},{"name":"idc","_id":"cjhdi5fy5004s3npxkkbp5vcf"},{"name":"ionic","_id":"cjhdi5fya004x3npxjx4hrjcx"},{"name":"rop","_id":"cjhdi5fyc00513npxjvbkdaeb"},{"name":"keystone","_id":"cjhdi5fyd00523npxpkc126ch"},{"name":"unicorn","_id":"cjhdi5fyd00543npx167dfspd"},{"name":"Mac","_id":"cjhdi5fye00553npxksb1jiu8"},{"name":"mongodb","_id":"cjhdi5fye00563npx6l0l3zye"},{"name":"markdown","_id":"cjhdi5fye00573npxffxb7s5s"},{"name":"evernote","_id":"cjhdi5fyf00583npxqf7m793c"},{"name":"sublime","_id":"cjhdi5fyf00593npx0nez8wjo"},{"name":"vscode","_id":"cjhdi5fyf005a3npxscic3m8d"},{"name":"MySQL","_id":"cjhdi5fyg005b3npxx3mq4z77"},{"name":"UTF-8","_id":"cjhdi5fyg005c3npxlf6yx4t3"},{"name":"proxy","_id":"cjhdi5fyg005d3npxvju78k61"},{"name":"iTerm","_id":"cjhdi5fyg005e3npxgvp5hxv8"},{"name":"polipo","_id":"cjhdi5fyg005f3npx1z22fm4b"},{"name":"Charles","_id":"cjhdi5fyi005h3npx5xobtkw9"},{"name":"科学上网","_id":"cjhdi5fyi005i3npxiysqq5h7"},{"name":"Powerline","_id":"cjhdi5fyi005j3npxp5br0ika"},{"name":"cookbook","_id":"cjhdi5fyj005m3npxn08o5gcd"},{"name":"closure","_id":"cjhdi5fyk005n3npxwwin6rvo"},{"name":"factory","_id":"cjhdi5fyk005o3npxzlp7v1my"},{"name":"string","_id":"cjhdi5fyl005p3npxxtjnol43"},{"name":"python-magic","_id":"cjhdi5fyl005r3npxqcfc1ek6"},{"name":"mime","_id":"cjhdi5fyl005s3npxqvrnxpsi"},{"name":"apt-get","_id":"cjhdi5fym005t3npxskcpc6rq"},{"name":"ANSI","_id":"cjhdi5fyo005w3npxijumsszy"},{"name":"termcolor","_id":"cjhdi5fyq005x3npx3yuvr3pp"},{"name":"colorama","_id":"cjhdi5fyq005y3npx20zdkagf"},{"name":"raspi","_id":"cjhdi5fyq005z3npxav3vwmp1"},{"name":"redis","_id":"cjhdi5fyr00603npx6498qdrs"},{"name":"brew","_id":"cjhdi5fyr00613npxjwv1ngn5"},{"name":"tmux","_id":"cjhdi5fys00633npxtxy5ldiz"},{"name":"字符集","_id":"cjhdi5fys00653npxugwh8p76"},{"name":"编码","_id":"cjhdi5fyt00663npxz24neewk"},{"name":"ASCII","_id":"cjhdi5fyt00673npxy4gusb2y"},{"name":"Unicode","_id":"cjhdi5fz100693npxyzojhujy"}]}}