<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Answerrrrrrrrr</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://answerrrrrrrrr.io/"/>
  <updated>2016-11-30T08:42:33.000Z</updated>
  <id>http://answerrrrrrrrr.io/</id>
  
  <author>
    <name>Air9</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>keystone</title>
    <link href="http://answerrrrrrrrr.io/2016/11/30/keystone/"/>
    <id>http://answerrrrrrrrr.io/2016/11/30/keystone/</id>
    <published>2016-11-30T07:37:27.000Z</published>
    <updated>2016-11-30T08:42:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 的反汇编框架很多，尤其是 capstone 非常好用<br>但是将常见汇编语句汇编成对应机器码的框架居然一直没找到<br>难道没有其他懒得记机器码的人了吗╮(╯_╰)╭</p>
<p>今天突然发现 capstone 的作者似乎居然早就听到了我的心声<br>在上半年就发布了一个汇编框架 <a href="http://www.keystone-engine.org/" target="_blank" rel="external">keystone</a><br><code>pip install keystone-engine</code> 就可以安装，用法和 capstone 非常相似<br>甚至连毛病也一样，把动态库放到正确的位置才能正常使用…</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>python2.<span class="number">7</span><span class="regexp">/site-packages/u</span>sr<span class="regexp">/local/</span>Cellar<span class="regexp">/python/</span><span class="number">2.7</span>.<span class="number">12</span>_1<span class="regexp">/Frameworks/</span>Python.framework<span class="regexp">/Versions/</span><span class="number">2.7</span><span class="regexp">/lib/</span>python2.<span class="number">7</span><span class="regexp">/site-packages/</span>keystone<span class="regexp">/libkeystone.dylib /u</span>sr<span class="regexp">/local/</span>lib<span class="regexp">/python2.7/</span>site-packages<span class="regexp">/keystone/</span>libkeystone.dylib</span><br></pre></td></tr></table></figure>
<p>使用起来非常简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> keystone <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ks_asm</span><span class="params">(code, arch=KS_ARCH_X86, mode=KS_MODE_64, syntax=<span class="number">0</span>)</span>:</span></span><br><span class="line">    ks = Ks(arch, mode)</span><br><span class="line">    <span class="keyword">if</span> syntax != <span class="number">0</span>:</span><br><span class="line">        ks.syntax = syntax</span><br><span class="line"></span><br><span class="line">    encoding, count = ks.asm(code)</span><br><span class="line">    <span class="comment"># print(encoding)</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'&#123;&#125; = '</span>.format(code), end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> encoding:</span><br><span class="line">        print(<span class="string">'&#123;:02x&#125; '</span>.format(i), end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code = <span class="string">'mov rax, rsp; syscall; nop; pop rbx; ret'</span></span><br><span class="line">ks_asm(code)</span><br><span class="line"><span class="comment"># mov rax, rsp; syscall; nop; pop rbx; ret = 48 89 e0 0f 05 90 5b c3</span></span><br></pre></td></tr></table></figure>
<p>另外官方用例：<a href="https://github.com/keystone-engine/keystone/blob/master/bindings/python/sample.py" target="_blank" rel="external">https://github.com/keystone-engine/keystone/blob/master/bindings/python/sample.py</a></p>
<p>简直爱死这个作者了 -0-<br>另外发现他还有一个 CPU emulator 框架 <a href="http://www.unicorn-engine.org/docs/tutorial.html" target="_blank" rel="external">Unicorn</a><br>有时间了可以学习下</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 的反汇编框架很多，尤其是 capstone 非常好用&lt;br&gt;但是将常见汇编语句汇编成对应机器码的框架居然一直没找到&lt;br&gt;难道没有其他懒得记机器码的人了吗╮(╯_╰)╭&lt;/p&gt;
&lt;p&gt;今天突然发现 capstone 的作者似乎居然早就听到了我的心声&lt;br&gt;在上
    
    </summary>
    
      <category term="rop" scheme="http://answerrrrrrrrr.io/categories/rop/"/>
    
    
      <category term="rop" scheme="http://answerrrrrrrrr.io/tags/rop/"/>
    
      <category term="keystone，capstone" scheme="http://answerrrrrrrrr.io/tags/keystone%EF%BC%8Ccapstone/"/>
    
      <category term="unicorn" scheme="http://answerrrrrrrrr.io/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>Python 控制终端输出颜色 &amp; ANSI 控制码</title>
    <link href="http://answerrrrrrrrr.io/2016/10/12/python-termcolor/"/>
    <id>http://answerrrrrrrrr.io/2016/10/12/python-termcolor/</id>
    <published>2016-10-12T11:12:40.000Z</published>
    <updated>2016-10-12T12:22:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天知道了一个控制终端输出颜色的第三方库 termcolor，代码很简单：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># coding: utf-8</span><br><span class="line"># Copyright (c) 2008-2011 Volvox Development Team</span><br><span class="line">#</span><br><span class="line"># Permission is hereby granted, free of charge, to any person obtaining a copy</span><br><span class="line"># of this software and associated documentation files (the "Software"), to deal</span><br><span class="line"># in the Software without restriction, including without limitation the rights</span><br><span class="line"># to <span class="keyword">use</span>, copy, <span class="keyword">modify</span>, <span class="keyword">merge</span>, publish, <span class="keyword">distribute</span>, sublicense, <span class="keyword">and</span>/<span class="keyword">or</span> sell</span><br><span class="line"># copies <span class="keyword">of</span> the Software, <span class="keyword">and</span> <span class="keyword">to</span> permit persons <span class="keyword">to</span> whom the Software <span class="keyword">is</span></span><br><span class="line"># furnished <span class="keyword">to</span> <span class="keyword">do</span> so, subject <span class="keyword">to</span> the <span class="keyword">following</span> conditions:</span><br><span class="line">#</span><br><span class="line"># The above copyright <span class="keyword">notice</span> <span class="keyword">and</span> this permission <span class="keyword">notice</span> shall be included <span class="keyword">in</span></span><br><span class="line"># all copies <span class="keyword">or</span> substantial portions <span class="keyword">of</span> the Software.</span><br><span class="line">#</span><br><span class="line"># THE SOFTWARE <span class="keyword">IS</span> PROVIDED <span class="string">"AS IS"</span>, <span class="keyword">WITHOUT</span> WARRANTY <span class="keyword">OF</span> <span class="keyword">ANY</span> KIND, EXPRESS <span class="keyword">OR</span></span><br><span class="line"># IMPLIED, <span class="keyword">INCLUDING</span> BUT <span class="keyword">NOT</span> LIMITED <span class="keyword">TO</span> THE WARRANTIES <span class="keyword">OF</span> MERCHANTABILITY,</span><br><span class="line"># FITNESS <span class="keyword">FOR</span> A PARTICULAR PURPOSE <span class="keyword">AND</span> NONINFRINGEMENT. <span class="keyword">IN</span> <span class="keyword">NO</span> <span class="keyword">EVENT</span> SHALL THE</span><br><span class="line"># <span class="keyword">AUTHORS</span> <span class="keyword">OR</span> COPYRIGHT HOLDERS BE LIABLE <span class="keyword">FOR</span> <span class="keyword">ANY</span> CLAIM, DAMAGES <span class="keyword">OR</span> OTHER</span><br><span class="line"># LIABILITY, WHETHER <span class="keyword">IN</span> AN <span class="keyword">ACTION</span> <span class="keyword">OF</span> CONTRACT, TORT <span class="keyword">OR</span> OTHERWISE, ARISING <span class="keyword">FROM</span>,</span><br><span class="line"># <span class="keyword">OUT</span> <span class="keyword">OF</span> <span class="keyword">OR</span> <span class="keyword">IN</span> <span class="keyword">CONNECTION</span> <span class="keyword">WITH</span> THE SOFTWARE <span class="keyword">OR</span> THE <span class="keyword">USE</span> <span class="keyword">OR</span> OTHER DEALINGS <span class="keyword">IN</span></span><br><span class="line"># THE SOFTWARE.</span><br><span class="line">#</span><br><span class="line"># Author: Konstantin Lepa &lt;konstantin.lepa@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">"""ANSII Color formatting for output in terminal."""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__ALL__ = [ <span class="string">'colored'</span>, <span class="string">'cprint'</span> ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VERSION</span> = (<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ATTRIBUTES</span> = dict(</span><br><span class="line">        <span class="keyword">list</span>(zip([</span><br><span class="line">            <span class="string">'bold'</span>,</span><br><span class="line">            <span class="string">'dark'</span>,</span><br><span class="line">            <span class="string">''</span>,</span><br><span class="line">            <span class="string">'underline'</span>,</span><br><span class="line">            <span class="string">'blink'</span>,</span><br><span class="line">            <span class="string">''</span>,</span><br><span class="line">            <span class="string">'reverse'</span>,</span><br><span class="line">            <span class="string">'concealed'</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="keyword">list</span>(<span class="keyword">range</span>(<span class="number">1</span>, <span class="number">9</span>))</span><br><span class="line">            ))</span><br><span class="line">        )</span><br><span class="line">del <span class="keyword">ATTRIBUTES</span>[<span class="string">''</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HIGHLIGHTS = dict(</span><br><span class="line">        <span class="keyword">list</span>(zip([</span><br><span class="line">            <span class="string">'on_grey'</span>,</span><br><span class="line">            <span class="string">'on_red'</span>,</span><br><span class="line">            <span class="string">'on_green'</span>,</span><br><span class="line">            <span class="string">'on_yellow'</span>,</span><br><span class="line">            <span class="string">'on_blue'</span>,</span><br><span class="line">            <span class="string">'on_magenta'</span>,</span><br><span class="line">            <span class="string">'on_cyan'</span>,</span><br><span class="line">            <span class="string">'on_white'</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="keyword">list</span>(<span class="keyword">range</span>(<span class="number">40</span>, <span class="number">48</span>))</span><br><span class="line">            ))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">COLORS = dict(</span><br><span class="line">        <span class="keyword">list</span>(zip([</span><br><span class="line">            <span class="string">'grey'</span>,</span><br><span class="line">            <span class="string">'red'</span>,</span><br><span class="line">            <span class="string">'green'</span>,</span><br><span class="line">            <span class="string">'yellow'</span>,</span><br><span class="line">            <span class="string">'blue'</span>,</span><br><span class="line">            <span class="string">'magenta'</span>,</span><br><span class="line">            <span class="string">'cyan'</span>,</span><br><span class="line">            <span class="string">'white'</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="keyword">list</span>(<span class="keyword">range</span>(<span class="number">30</span>, <span class="number">38</span>))</span><br><span class="line">            ))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">RESET</span> = <span class="string">'\033[0m'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> colored(<span class="built_in">text</span>, color=<span class="keyword">None</span>, on_color=<span class="keyword">None</span>, attrs=<span class="keyword">None</span>):</span><br><span class="line">    <span class="string">"""Colorize text.</span><br><span class="line"></span><br><span class="line">    Available text colors:</span><br><span class="line">        red, green, yellow, blue, magenta, cyan, white.</span><br><span class="line"></span><br><span class="line">    Available text highlights:</span><br><span class="line">        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white.</span><br><span class="line"></span><br><span class="line">    Available attributes:</span><br><span class="line">        bold, dark, underline, blink, reverse, concealed.</span><br><span class="line"></span><br><span class="line">    Example:</span><br><span class="line">        colored('Hello, World!', 'red', 'on_grey', ['blue', 'blink'])</span><br><span class="line">        colored('Hello, World!', 'green')</span><br><span class="line">    """</span></span><br><span class="line">    <span class="keyword">if</span> os.getenv(<span class="string">'ANSI_COLORS_DISABLED'</span>) <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        fmt_str = <span class="string">'\033[%dm%s'</span></span><br><span class="line">        <span class="keyword">if</span> color <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="built_in">text</span> = fmt_str % (COLORS[color], <span class="built_in">text</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> on_color <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="built_in">text</span> = fmt_str % (HIGHLIGHTS[on_color], <span class="built_in">text</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> attrs <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">attr</span> <span class="keyword">in</span> attrs:</span><br><span class="line">                <span class="built_in">text</span> = fmt_str % (<span class="keyword">ATTRIBUTES</span>[<span class="keyword">attr</span>], <span class="built_in">text</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">text</span> += <span class="keyword">RESET</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">text</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> cprint(<span class="built_in">text</span>, color=<span class="keyword">None</span>, on_color=<span class="keyword">None</span>, attrs=<span class="keyword">None</span>, **kwargs):</span><br><span class="line">    <span class="string">"""Print colorize text.</span><br><span class="line"></span><br><span class="line">    It accepts arguments of print function.</span><br><span class="line">    """</span></span><br><span class="line"></span><br><span class="line">    print((colored(<span class="built_in">text</span>, color, on_color, attrs)), **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Current terminal type: %s'</span> % os.getenv(<span class="string">'TERM'</span>))</span><br><span class="line">    print(<span class="string">'Test basic colors:'</span>)</span><br><span class="line">    cprint(<span class="string">'Grey color'</span>, <span class="string">'grey'</span>)</span><br><span class="line">    cprint(<span class="string">'Red color'</span>, <span class="string">'red'</span>)</span><br><span class="line">    cprint(<span class="string">'Green color'</span>, <span class="string">'green'</span>)</span><br><span class="line">    cprint(<span class="string">'Yellow color'</span>, <span class="string">'yellow'</span>)</span><br><span class="line">    cprint(<span class="string">'Blue color'</span>, <span class="string">'blue'</span>)</span><br><span class="line">    cprint(<span class="string">'Magenta color'</span>, <span class="string">'magenta'</span>)</span><br><span class="line">    cprint(<span class="string">'Cyan color'</span>, <span class="string">'cyan'</span>)</span><br><span class="line">    cprint(<span class="string">'White color'</span>, <span class="string">'white'</span>)</span><br><span class="line">    print((<span class="string">'-'</span> * <span class="number">78</span>))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Test highlights:'</span>)</span><br><span class="line">    cprint(<span class="string">'On grey color'</span>, on_color=<span class="string">'on_grey'</span>)</span><br><span class="line">    cprint(<span class="string">'On red color'</span>, on_color=<span class="string">'on_red'</span>)</span><br><span class="line">    cprint(<span class="string">'On green color'</span>, on_color=<span class="string">'on_green'</span>)</span><br><span class="line">    cprint(<span class="string">'On yellow color'</span>, on_color=<span class="string">'on_yellow'</span>)</span><br><span class="line">    cprint(<span class="string">'On blue color'</span>, on_color=<span class="string">'on_blue'</span>)</span><br><span class="line">    cprint(<span class="string">'On magenta color'</span>, on_color=<span class="string">'on_magenta'</span>)</span><br><span class="line">    cprint(<span class="string">'On cyan color'</span>, on_color=<span class="string">'on_cyan'</span>)</span><br><span class="line">    cprint(<span class="string">'On white color'</span>, color=<span class="string">'grey'</span>, on_color=<span class="string">'on_white'</span>)</span><br><span class="line">    print(<span class="string">'-'</span> * <span class="number">78</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Test attributes:'</span>)</span><br><span class="line">    cprint(<span class="string">'Bold grey color'</span>, <span class="string">'grey'</span>, attrs=[<span class="string">'bold'</span>])</span><br><span class="line">    cprint(<span class="string">'Dark red color'</span>, <span class="string">'red'</span>, attrs=[<span class="string">'dark'</span>])</span><br><span class="line">    cprint(<span class="string">'Underline green color'</span>, <span class="string">'green'</span>, attrs=[<span class="string">'underline'</span>])</span><br><span class="line">    cprint(<span class="string">'Blink yellow color'</span>, <span class="string">'yellow'</span>, attrs=[<span class="string">'blink'</span>])</span><br><span class="line">    cprint(<span class="string">'Reversed blue color'</span>, <span class="string">'blue'</span>, attrs=[<span class="string">'reverse'</span>])</span><br><span class="line">    cprint(<span class="string">'Concealed Magenta color'</span>, <span class="string">'magenta'</span>, attrs=[<span class="string">'concealed'</span>])</span><br><span class="line">    cprint(<span class="string">'Bold underline reverse cyan color'</span>, <span class="string">'cyan'</span>,</span><br><span class="line">            attrs=[<span class="string">'bold'</span>, <span class="string">'underline'</span>, <span class="string">'reverse'</span>])</span><br><span class="line">    cprint(<span class="string">'Dark blink concealed white color'</span>, <span class="string">'white'</span>,</span><br><span class="line">            attrs=[<span class="string">'dark'</span>, <span class="string">'blink'</span>, <span class="string">'concealed'</span>])</span><br><span class="line">    print((<span class="string">'-'</span> * <span class="number">78</span>))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Test mixing:'</span>)</span><br><span class="line">    cprint(<span class="string">'Underline red on grey color'</span>, <span class="string">'red'</span>, <span class="string">'on_grey'</span>,</span><br><span class="line">            [<span class="string">'underline'</span>])</span><br><span class="line">    cprint(<span class="string">'Reversed green on red color'</span>, <span class="string">'green'</span>, <span class="string">'on_red'</span>, [<span class="string">'reverse'</span>])</span><br></pre></td></tr></table></figure>
<p>不过它不支持 Windows，另外有一个复杂一些但是全平台通用的 colorama，见 <a href="http://stackoverflow.com/questions/21858567/why-termcolor-doesnt-work-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/21858567/why-termcolor-doesnt-work-in-python</a></p>
<p>代码中设置颜色的部分有点费解，查阅其用到的知识点如下</p>
<h1 id="ANSI-控制码"><a href="#ANSI-控制码" class="headerlink" title="ANSI 控制码"></a>ANSI 控制码</h1><p>ANSI 控制码即控制序列（Control Sequence）。大多数终端模拟器（Unix，Linux，Windows）都支持 ANSI 控制码。ANSI 控制码以 ESC 字符（ASCII 27/0x1b/033）开头，分为两类：</p>
<ul>
<li>非 CSI 序列<br>  双字符控制码，格式为<code>ESC``字符</code>，第二个字符的范围是 ASCII 64~95 (‘@’~’_’) </li>
<li>CSI 序列<br>  多于两个字符，格式为<code>ESC[``其余字符</code></li>
</ul>
<p>常用序列表可见 <a href="https://en.wikipedia.org/wiki/ANSI_escape_code" target="_blank" rel="external">https://en.wikipedia.org/wiki/ANSI_escape_code</a></p>
<h1 id="颜色控制"><a href="#颜色控制" class="headerlink" title="颜色控制"></a>颜色控制</h1><p>其中设定终端文本颜色的序列格式为<code>ESC[``编号``;编号``m</code>    </p>
<p>颜色分为字体色（前景色）和背景色，30~37用来设置字体色，40~47设置背景色，其他常用控制码：</p>
<ul>
<li>\033[0m   重置所有属性   </li>
<li>\033[1m   设置高亮度   </li>
<li>\033[4m   下划线   </li>
<li>\033[5m   闪烁   </li>
<li>\033[7m   反色   </li>
</ul>
<h1 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h1><p><code>\033[1;31;40m</code><br>1-高亮显示，31-前景色红色，40-背景色黑色</p>
<p><code>\033[0m</code><br>重置，即恢复默认设置</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天知道了一个控制终端输出颜色的第三方库 termcolor，代码很简单：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# coding: utf
    
    </summary>
    
      <category term="Python" scheme="http://answerrrrrrrrr.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://answerrrrrrrrr.io/tags/Python/"/>
    
      <category term="ANSI" scheme="http://answerrrrrrrrr.io/tags/ANSI/"/>
    
      <category term="termcolor" scheme="http://answerrrrrrrrr.io/tags/termcolor/"/>
    
      <category term="colorama" scheme="http://answerrrrrrrrr.io/tags/colorama/"/>
    
  </entry>
  
  <entry>
    <title>python-magic has no attribute &#39;from_file&#39;</title>
    <link href="http://answerrrrrrrrr.io/2016/10/11/python-magic/"/>
    <id>http://answerrrrrrrrr.io/2016/10/11/python-magic/</id>
    <published>2016-10-11T01:32:53.000Z</published>
    <updated>2016-10-11T02:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/ahupp/python-magic" target="_blank" rel="external">python-magic</a> 是一个用来判断文件类型的第三方库，效果与 linux 命令<code>file</code>类似</p>
<p>使用<code>pip install python-magic</code>安装后，在 mac 上还需要<code>brew install libmagic</code>，之后即可正常使用</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import magic</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; magic.from_file(<span class="string">'readme.md'</span>)</span><br><span class="line"><span class="string">'ASCII text'</span></span><br></pre></td></tr></table></figure>
<p>不过在 kali rolling 上则会报错</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import magic</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; magic.from_file(<span class="string">"testdata/test.pdf"</span>)</span><br><span class="line">Traceback (most recent call last)<span class="symbol">:</span></span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="symbol">AttributeError:</span> <span class="string">'module'</span> object has no attribute <span class="string">'from_file'</span></span><br></pre></td></tr></table></figure>
<p>在 <a href="http://stackoverflow.com/questions/25286176/how-to-use-python-magic-5-19-1" target="_blank" rel="external">stackoverflow</a> 中有人提到原因：</p>
<p>python-magic 有多种实现，apt-get 中预装了 5.19.1 版，<code>import</code>时优先于刚刚用 pip 安装的版本，使用起来相对复杂一些</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import magic</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m=magic.open(magic.MAGIC_NONE)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.load()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.file(<span class="string">'/etc/passwd'</span>)</span><br><span class="line"><span class="string">'ASCII text'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.file(<span class="string">'/usr/share/cups/data/default.pdf'</span>)</span><br><span class="line"><span class="string">'PDF document, version 1.5'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m=magic.open(magic.MAGIC_MIME)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.load()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.file(<span class="string">'/etc/passwd'</span>)</span><br><span class="line"><span class="string">'text/plain; charset=us-ascii'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.file(<span class="string">'/usr/share/cups/data/default.pdf'</span>)</span><br><span class="line"><span class="string">'application/pdf; charset=binary'</span></span><br></pre></td></tr></table></figure>
<p>如果想使用带有<code>from_file</code>方法的版本将其替换为 pip 版即可</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">python</span>-magic</span><br><span class="line">pip install <span class="keyword">python</span>-magic</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/ahupp/python-magic&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;python-magic&lt;/a&gt; 是一个用来判断文件类型的第三方库，效果与 linux 命令&lt;code&gt;file&lt;/
    
    </summary>
    
      <category term="Python" scheme="http://answerrrrrrrrr.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://answerrrrrrrrr.io/tags/Python/"/>
    
      <category term="pip" scheme="http://answerrrrrrrrr.io/tags/pip/"/>
    
      <category term="python-magic" scheme="http://answerrrrrrrrr.io/tags/python-magic/"/>
    
      <category term="mime" scheme="http://answerrrrrrrrr.io/tags/mime/"/>
    
      <category term="apt-get" scheme="http://answerrrrrrrrr.io/tags/apt-get/"/>
    
  </entry>
  
  <entry>
    <title>idapython-elf-gadget</title>
    <link href="http://answerrrrrrrrr.io/2016/10/08/idapython-elf-gadget/"/>
    <id>http://answerrrrrrrrr.io/2016/10/08/idapython-elf-gadget/</id>
    <published>2016-10-08T03:38:29.000Z</published>
    <updated>2016-10-09T02:59:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── batch.py</span><br><span class="line">├── detail</span><br><span class="line">│   ├── heap_test.txt</span><br><span class="line">│   ├── heap<span class="emphasis">_test_</span>static.txt</span><br><span class="line">│   ├── libc2.21.txt</span><br><span class="line">│   ├── ls.txt</span><br><span class="line">│   ├── mv.txt</span><br><span class="line">│   ├── stack_test.txt</span><br><span class="line">│   └── stack<span class="emphasis">_test_</span>static.txt</span><br><span class="line">├── elf</span><br><span class="line">│   ├── heap_test</span><br><span class="line">│   ├── heap<span class="emphasis">_test_</span>static</span><br><span class="line">│   ├── libc2.21</span><br><span class="line">│   ├── ls</span><br><span class="line">│   ├── mv</span><br><span class="line">│   ├── stack_test</span><br><span class="line">│   └── stack<span class="emphasis">_test_</span>static</span><br><span class="line">├── fragment</span><br><span class="line">│   ├── heap_test.txt</span><br><span class="line">│   ├── heap<span class="emphasis">_test_</span>static.txt</span><br><span class="line">│   ├── libc2.21.txt</span><br><span class="line">│   ├── ls.txt</span><br><span class="line">│   ├── mv.txt</span><br><span class="line">│   ├── stack_test.txt</span><br><span class="line">│   └── stack<span class="emphasis">_test_</span>static.txt</span><br><span class="line">├── ganalyzer.py</span><br><span class="line">├── gcollector.py</span><br><span class="line">├── gvalidator.py</span><br><span class="line">├── lib</span><br><span class="line">│   ├── <span class="strong">__init__</span>.py</span><br><span class="line">│   ├── <span class="strong">__init__</span>.pyc</span><br><span class="line">│   ├── classifier.py</span><br><span class="line">│   ├── classifier.pyc</span><br><span class="line">│   ├── extra_archinfo.py</span><br><span class="line">│   ├── extra_archinfo.pyc</span><br><span class="line">│   ├── gadget.py</span><br><span class="line">│   ├── gadget.pyc</span><br><span class="line">│   ├── utils.py</span><br><span class="line">│   ├── utils.pyc</span><br><span class="line">│   ├── validator.py</span><br><span class="line">│   └── validator.pyc</span><br><span class="line">├── pin</span><br><span class="line">│   ├── heap_test.txt</span><br><span class="line">│   ├── heap<span class="emphasis">_test_</span>static.txt</span><br><span class="line">│   ├── libc2.21.txt</span><br><span class="line">│   ├── ls.txt</span><br><span class="line">│   ├── mv.txt</span><br><span class="line">│   ├── stack_test.txt</span><br><span class="line">│   └── stack<span class="emphasis">_test_</span>static.txt</span><br><span class="line">└── result.txt</span><br><span class="line"></span><br><span class="line">5 directories, 46 files</span><br></pre></td></tr></table></figure>
<h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><p><img src="/images/idapython-elf-gadget.png" alt="img"></p>
<h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><ol>
<li>将要分析的 elf 文件放入 elf 目录</li>
<li>在主目录运行<code>python batch.py</code></li>
<li>脚本会批量使用 ida 静态分析 elf 目录内的所有 elf 文件并在完成后自动关闭 ida</li>
<li>由于版本功能限制，无法完全自动化，每个 elf 需要在弹窗时手动回车确认 2 次</li>
<li>中间结果分别保存于 fragment, detail 和 pin 目录，最终结果保存于主目录下的 result.txt</li>
</ol>
<h1 id="主要模块"><a href="#主要模块" class="headerlink" title="主要模块"></a>主要模块</h1><h2 id="gcollector-py"><a href="#gcollector-py" class="headerlink" title="gcollector.py"></a>gcollector.py</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>找到所有间接跳转（IBR)，再按 IBR 所在地址回溯，直到上一条跳转指令为止，输出其间所有可能构成 gadget 的指令片段，按不同文件名保存到 fragment 目录 </p>
<h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; length: 1</span><br><span class="line">|-- .fini:80485B7	retn</span><br><span class="line">c3</span><br><span class="line">----------------------------------------</span><br><span class="line">&gt; length: 2</span><br><span class="line">|-- .fini:80485B6	pop     ebx</span><br><span class="line">|-- .fini:80485B7	retn</span><br><span class="line">5bc3</span><br><span class="line">----------------------------------------</span><br><span class="line">&gt; length: 3</span><br><span class="line">|-- .fini:80485B3	add     esp, 8</span><br><span class="line">|-- .fini:80485B6	pop     ebx</span><br><span class="line">|-- .fini:80485B7	retn</span><br><span class="line">83c4085bc3</span><br><span class="line">----------------------------------------</span><br><span class="line">&gt; length: 4</span><br><span class="line">|-- .fini:80485AD	add     ebx, 1217h</span><br><span class="line">|-- .fini:80485B3	add     esp, 8</span><br><span class="line">|-- .fini:80485B6	pop     ebx</span><br><span class="line">|-- .fini:80485B7	retn</span><br><span class="line">81c31712000083c4085bc3</span><br></pre></td></tr></table></figure>
<p>回溯到第 5 条指令时为另一条跳转指令，所以以 <code>80485B7    retn</code>为结尾所有可能为 gadget 的指令片段一共只有 4 种</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>利用 ida-python 提供的 api <code>Segments()</code>获得所有段起始地址，<code>SegEnd()</code>获取段结束地址</li>
<li>根据对应段的起止地址，利用<code>Heads(start, end)</code>得到段内所有指令的起始地址</li>
<li>利用<code>disasm(head)</code>函数获得指令的机器码和汇编代码</li>
<li>通过正则表达式和机器码判断指令是否为<code>间接跳转指令</code>并按如上目标格式保存，同时加上<code>call-preceded</code>和<code>syscall</code>等标记</li>
<li>对总指令数等数据进行统计，同时利用<code>Functions()</code>收集所有函数入口</li>
</ol>
<h2 id="gvalidator-py"><a href="#gvalidator-py" class="headerlink" title="gvalidator.py"></a>gvalidator.py</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><p>以每个间接跳转为单位，对所有以该间接跳转为结尾的指令片段进行判断：</p>
<ol>
<li>是否存在 functional gadget， 最大长度多少</li>
<li>是否存在 nop gadget， 最大长度多少</li>
<li>是否为 call-preceded gadget</li>
</ol>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol>
<li>遍历 fragment 目录中所有 txt 文件并依次进行逐行读取，根据<code>+&gt;|-*</code>等预设标记判断该行内容类型，然后收集对应长度的指令片段、片段内部遭到修改的寄存器</li>
<li>读取到整个指令片段的机器码时，利用 Q 的 api <code>classifier.GadgetClassifier()</code>判断片段是否为 functional gadget，并统计相关数据</li>
<li>若非 functional gadget，根据可容忍的最大寄存器修改数量判断可否归为 nop gadget，并统计相关数据</li>
<li>按文件名保存所有统计数据到 detail 目录</li>
<li>另外按照 pin 动态分析所需的输入数据格式将对应部分数据保存到 pin 目录</li>
</ol>
<h2 id="ganalyzer-py"><a href="#ganalyzer-py" class="headerlink" title="ganalyzer.py"></a>ganalyzer.py</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><p>将 detail 目录中所有统计数据汇总到 result.txt 中</p>
<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">heap_test, heap_test_static, libc2, ls, mv, stack_test, stack_test_static</span><br><span class="line">+ Files: <span class="number">7</span></span><br><span class="line"></span><br><span class="line">+ [AVG]</span><br><span class="line">|-- Functions: <span class="number">794.00</span></span><br><span class="line">|-- Instructions: <span class="number">86870.29</span></span><br><span class="line">|-- Branch instructions: <span class="number">17118.00</span></span><br><span class="line">|-- Indirect branch instructions: <span class="number">1609.29</span></span><br><span class="line">    |-- ret: <span class="number">1211.43</span> (<span class="number">9</span> ~ <span class="number">5587</span>)</span><br><span class="line">    |-- jmp: <span class="number">88.00</span> (<span class="number">1</span> ~ <span class="number">408</span>)</span><br><span class="line">    |-- call: <span class="number">284.43</span> (<span class="number">4</span> ~ <span class="number">1300</span>)</span><br><span class="line">    |-- system call: <span class="number">90.57</span> (<span class="number">0</span> ~ <span class="number">462</span>)</span><br><span class="line">    |-- call preceded: <span class="number">284.43</span> (<span class="number">4</span> ~ <span class="number">1300</span>)</span><br><span class="line">|-- Functional gadgets: <span class="number">6145.29</span></span><br><span class="line">    |-- length: <span class="number">4.15</span> (<span class="number">0</span> ~ <span class="number">48</span>)</span><br><span class="line">|-- Nop gadgets: <span class="number">3634.14</span></span><br><span class="line">    |-- length: <span class="number">2.07</span> (<span class="number">0</span> ~ <span class="number">71</span>)</span><br><span class="line">|-- Normal code fragments: <span class="number">924.57</span></span><br><span class="line">    |-- length: <span class="number">9.01</span> (<span class="number">0</span> ~ <span class="number">80</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h1&gt;&lt;figure class=&quot;highlight md&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;sp
    
    </summary>
    
      <category term="ida" scheme="http://answerrrrrrrrr.io/categories/ida/"/>
    
    
      <category term="ida" scheme="http://answerrrrrrrrr.io/tags/ida/"/>
    
      <category term="idapython" scheme="http://answerrrrrrrrr.io/tags/idapython/"/>
    
      <category term="python" scheme="http://answerrrrrrrrr.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ionic 使用 popover 时的一点小问题</title>
    <link href="http://answerrrrrrrrr.io/2016/09/27/ionic-popover/"/>
    <id>http://answerrrrrrrrr.io/2016/09/27/ionic-popover/</id>
    <published>2016-09-27T08:52:04.000Z</published>
    <updated>2016-09-29T08:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 ionic 附带的 ngResource 时需要在 index.html 中加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/ionic/js/angular/angular-resource.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>否则会报错</p>
<p>另外，<a href="http://ionicframework.com/docs/api/service/$ionicPopover/" target="_blank" rel="external">官方文档</a>中关于使用<code>popover</code>独立 html 模板的格式有点小问题：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"my-popover.html"</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span>&gt;</span><span class="handlebars"><span class="xml"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-popover-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-header-bar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>My Popover Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-header-bar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">      Hello!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-popover-view</span>&gt;</span></span><br><span class="line"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-popover-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-header-bar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>My Popover Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-header-bar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">    Hello!qwew</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-popover-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>否则会无法找到对应 template 而产生<code>Error: popoverEle[0] is undefined</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 ionic 附带的 ngResource 时需要在 index.html 中加上&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span c
    
    </summary>
    
      <category term="ionic" scheme="http://answerrrrrrrrr.io/categories/ionic/"/>
    
    
      <category term="JavaScript" scheme="http://answerrrrrrrrr.io/tags/JavaScript/"/>
    
      <category term="AngularJS" scheme="http://answerrrrrrrrr.io/tags/AngularJS/"/>
    
      <category term="ngResource" scheme="http://answerrrrrrrrr.io/tags/ngResource/"/>
    
      <category term="ionic" scheme="http://answerrrrrrrrr.io/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>Code Smell</title>
    <link href="http://answerrrrrrrrr.io/2016/09/25/code-smell/"/>
    <id>http://answerrrrrrrrr.io/2016/09/25/code-smell/</id>
    <published>2016-09-25T08:44:03.000Z</published>
    <updated>2016-09-25T08:51:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="http://www.nowamagic.net/librarys/veda/detail/2053" target="_blank" rel="external">http://www.nowamagic.net/librarys/veda/detail/2053</a></p>
<p>Code Smell中文译名一般为“代码异味”，或“代码味道”，它是提示代码中某个地方存在错误的一个暗示，开发人员可以通过这种smell（异味）在代码中追捕到问题。</p>
<p>在计算机编程社区中，code smell代表了任何标志着事物变坏的征兆。它常常标志代码应该被refactored或者全部的设计都应该被reviewed。这个短语出现在 WardsWiki上，它是被Kent Beck杜撰出来的。在refactoring兴起之后，这个短语的使用率骤增。</p>
<p>判断是否存在code smell经常是主观判断，并且随着语言、开发者、开发理论的不同而存在差异。</p>
<p>经验丰富和知识渊博的开发人员通过对优秀设计有一种“感觉”，他们已经达到一种称之为“无意识能力 （UnconsciousCompetence）”的状态。也就是说，他们无需思考，只要通过查看代码或一段设计就可以立马对这个项目的代码质量有一种 “感觉”，能够对代码设计的优劣有一个大致的判断。</p>
<p>但大家需要注意，code smell只是一种“暗示”，而非一种“确定”。将某些事物称之为“code smell”并未是一种攻击，它只是一种提示：开发人员需要对项目设计进行更进一步的查看。因此，code smell更多是“直觉的，本能的”。</p>
<p>code smell一般包括：</p>
<ol>
<li><p>Duplicated Code。代码重复几乎是最常见的异味了。他也是Refactoring 的主要目标之一。代码重复往往来自于copy-and-paste 的编程风格。与他相对应OAOO 是一个好系统的重要标志。</p>
</li>
<li><p>Long method。它是传统结构化的“遗毒”。一个方法应当具有自我独立的意图，不要把几个意图放在一起，特别注意大类和长方法。</p>
</li>
<li><p>Large Class。大类就是你把太多的责任交给了一个类。这里的规则是One Class One。</p>
</li>
<li><p>Divergent Change。一个类里面的内容变化率不同。某些状态一个小时变一次，某些则几个月一年才变一次；某些状态因为这方面的原因发生变化，而另一些则因为其他方面的原因变一 次。面向对象的抽象就是把相对不变的和相对变化相隔离。把问题变化的一方面和另一方面相隔离。这使得这些相对不变的可以重用。问题变化的每个方面都可以单 独重用。这种相异变化的共存使得重用非常困难。</p>
</li>
<li><p>Shotgun Surgery。这正好和上面相反。对系统一个地方的改变涉及到其他许多地方的相关改变。这些变化率和变化内容相似的状态和行为通常应当放在同一个类中。</p>
</li>
<li><p>Feature Envy。对象的目的就是封装状态以及与这些状态紧密相关的行为。如果一个类的方法频繁用get 方法存取其他类的状态进行计算，那么你要考虑把行为移到涉及状态数目最多的那个类。</p>
</li>
<li><p>Data Clumps。某些数据通常像孩子一样成群玩耍：一起出现在很多类的成员变量中，一起出现在许多方法的参数中……，这些数据或许应该自己独立形成对象。</p>
</li>
<li><p>Primitive Obsession。面向对象的新手通常习惯使用几个原始类型的数据来表示一个概念。譬如对于范围，他们会使用两个数字。对于Money，他们会用一个浮点数来表示。因为你没 有使用对象来表达问题中存在的概念，这使得代码变的难以理解，解决问题的难度大大增加。好的习惯是扩充语言所能提供原始类型，用小对象来表示范围、金额、 转化率、邮政编码等等。</p>
</li>
<li><p>Switch Statement。基于常量的开关语句是OO 的大敌，你应当把他变为子类、state 或strategy。</p>
</li>
<li><p>Parallel Inheritance Hierarchies。并行的继承层次是shotgun surgery 的特殊情况。因为当你改变一个层次中的某一个类时，你必须同时改变另外一个层次的并行子类。</p>
</li>
<li><p>Lazy Class。一个干活不多的类。类的维护需要额外的开销，如果一个类承担了太少的责任，应当消除它。</p>
</li>
<li><p>Speculative Generality。一个类实现了从未用到的功能和通用性。通常这样的类或方法唯一的用户是test case。不要犹豫，删除它。</p>
</li>
<li><p>Temporary Field。一个对象的属性可能只在某些情况下才有意义。这样的代码将难以理解。专门建立一个对象来持有这样的孤儿属性，把只和他相关的行为移到该类。最常见的是一个特定的算法需要某些只有该算法才有用的变量。</p>
</li>
<li><p>Message Chain。消息链发生于当一个客户向一个对象要求另一个对象，然后客户又向这另一对象要求另一个对象，再向这另一个对象要求另一个对象，如此如此。这时，你需要隐藏分派。</p>
</li>
<li><p>Middle Man。对象的基本特性之一就是封装，而你经常会通过分派去实现封装。但是这一步不能走得太远，如果你发现一个类接口的一大半方法都在做分派，你可能需要移去这个中间人。</p>
</li>
<li><p>Inappropriate Intimacy。某些类相互之间太亲密，它们花费了太多的时间去砖研别人的私有部分。对人类而言，我们也许不应该太假正经，但我们应当让自己的类严格遵守禁欲主义。</p>
</li>
<li><p>Alternative Classes with Different Interfaces。做相同事情的方法有不同的函数signature，一致把它们往类层次上移，直至协议一致。</p>
</li>
<li><p>Incomplete Library Class。要建立一个好的类库非常困难。我们大量的程序工作都基于类库实现。然而，如此广泛而又相异的目标对库构建者提出了苛刻的要求。库构建者也不是万能的。有时 候我们会发现库类无法实现我们需要的功能。而直接对库类的修改有非常困难。这时候就需要用各种手段进行Refactoring。</p>
</li>
<li><p>Data Class。对象包括状态和行为。如果一个类只有状态没有行为，那么肯定有什么地方出问题了。</p>
</li>
<li><p>Refused Bequest。超类传下来很多行为和状态，而子类只是用了其中的很小一部分。这通常意味着你的类层次有问题。</p>
</li>
<li><p>Comments。经常觉得要写很多注释表示你的代码难以理解。如果这种感觉太多，表示你需要Refactoring。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自：&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/2053&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/det
    
    </summary>
    
      <category term="Code" scheme="http://answerrrrrrrrr.io/categories/Code/"/>
    
    
      <category term="Refactoring" scheme="http://answerrrrrrrrr.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title>Mac 安装 mongodb</title>
    <link href="http://answerrrrrrrrr.io/2016/09/22/mac-mongod/"/>
    <id>http://answerrrrrrrrr.io/2016/09/22/mac-mongod/</id>
    <published>2016-09-22T12:35:03.000Z</published>
    <updated>2016-09-27T01:18:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 下按照<a href="https://docs.mongodb.com/manual/mongo/" target="_blank" rel="external">官网说明</a> 安装 mongodb 并配置好<code>PATH</code>后直接<code>mongo</code>会报错：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ brew <span class="keyword">install</span> mongodb</span><br><span class="line">...</span><br><span class="line">$ <span class="keyword">export</span> <span class="keyword">PATH</span>=$<span class="keyword">PATH</span>:/usr/<span class="keyword">local</span>/Cellar/mongodb/<span class="number">3.2</span><span class="number">.9</span>/<span class="keyword">bin</span></span><br><span class="line">$ mongo</span><br><span class="line">MongoDB shell <span class="keyword">version</span>: <span class="number">3.2</span><span class="number">.9</span></span><br><span class="line">connecting <span class="keyword">to</span>: <span class="keyword">test</span></span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span>T20:<span class="number">15</span>:<span class="number">48.787</span>+<span class="number">0800</span> W NETWORK  [thread1] <span class="keyword">Failed</span> <span class="keyword">to</span> <span class="keyword">connect</span> <span class="keyword">to</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">27017</span>, reason: errno:<span class="number">61</span> <span class="keyword">Connection</span> refused</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span>T20:<span class="number">15</span>:<span class="number">48.789</span>+<span class="number">0800</span> E <span class="keyword">QUERY</span>    [thread1] <span class="keyword">Error</span>: couldn<span class="string">'t connect to server 127.0.0.1:27017, connection attempt failed :</span><br><span class="line">connect@src/mongo/shell/mongo.js:229:14</span><br><span class="line">@(connect):1:6</span><br><span class="line"></span><br><span class="line">exception: connect failed</span></span><br></pre></td></tr></table></figure>
<p>好在 <a href="http://stackoverflow.com/questions/12831939/couldnt-connect-to-server-127-0-0-127017/17220732#17220732" target="_blank" rel="external">Stackoverflow</a> 一个答案提到，是因为没有启动 mongodb service:</p>
<blockquote>
<p>Did you run mongod before running mongo?</p>
<p>I followed installation instructions for mongodb from <a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/" target="_blank" rel="external">http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/</a> and I had the same error as you only when I ran mongo before actually running the mongo process with mongod. I thought installing mongodb would also launch it but you need to launch it manually with mongod before you do anything else that needs mongodb.</p>
</blockquote>
<p>不过还是报错：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ mongod</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.094</span>+<span class="number">0800</span> I CONTROL  [initandlisten] MongoDB <span class="string">starting :</span> pid=<span class="number">75109</span> port=<span class="number">27017</span> dbpath=<span class="regexp">/data/</span>db <span class="number">64</span>-bit host=localhost</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.095</span>+<span class="number">0800</span> I CONTROL  [initandlisten] db version v3<span class="number">.2</span><span class="number">.9</span></span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.095</span>+<span class="number">0800</span> I CONTROL  [initandlisten] git <span class="string">version:</span> <span class="number">22</span>ec9e93b40c85fc7cae7d56e7d6a02fd811088c</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.095</span>+<span class="number">0800</span> I CONTROL  [initandlisten] OpenSSL <span class="string">version:</span> OpenSSL <span class="number">1.0</span><span class="number">.2</span>h  <span class="number">3</span> May <span class="number">2016</span></span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.095</span>+<span class="number">0800</span> I CONTROL  [initandlisten] <span class="string">allocator:</span> system</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.095</span>+<span class="number">0800</span> I CONTROL  [initandlisten] <span class="string">modules:</span> none</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.095</span>+<span class="number">0800</span> I CONTROL  [initandlisten] build <span class="string">environment:</span></span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.095</span>+<span class="number">0800</span> I CONTROL  [initandlisten]     <span class="string">distarch:</span> x86_64</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.095</span>+<span class="number">0800</span> I CONTROL  [initandlisten]     <span class="string">target_arch:</span> x86_64</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.095</span>+<span class="number">0800</span> I CONTROL  [initandlisten] <span class="string">options:</span> &#123;&#125;</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.097</span>+<span class="number">0800</span> I -        [initandlisten] Detected data files <span class="keyword">in</span> <span class="regexp">/data/</span>db created by the <span class="string">'mmapv1'</span> storage engine, so setting the active storage engine to <span class="string">'mmapv1'</span>.</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T20:</span><span class="number">28</span>:<span class="number">37.100</span>+<span class="number">0800</span> I STORAGE  [initandlisten] exception <span class="keyword">in</span> <span class="string">initAndListen:</span> <span class="number">98</span> Unable to create<span class="regexp">/open lock file: /</span>data<span class="regexp">/db/</span>mongod.lock <span class="string">errno:</span><span class="number">13</span> Permission denied Is a mongod instance already running?, terminating</span><br><span class="line">2016-09-22T20:<span class="number">28</span>:<span class="number">37.100</span>+<span class="number">0800</span> I CONTROL  [initandlisten] <span class="string">dbexit:</span>  <span class="string">rc:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>看见<code>lock file</code>习惯性想去删掉，结果依然不行</p>
<p>最后还是在 <a href="http://stackoverflow.com/questions/15229412/unable-to-create-open-lock-file-data-mongod-lock-errno13-permission-denied/22623543#22623543" target="_blank" rel="external">Stackoverflow</a> 找到解决方法：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R $USER <span class="regexp">/data/</span>db</span><br><span class="line">$ mongod</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.066</span>+<span class="number">0800</span> I CONTROL  [initandlisten] MongoDB <span class="string">starting :</span> pid=<span class="number">75729</span> port=<span class="number">27017</span> dbpath=<span class="regexp">/data/</span>db <span class="number">64</span>-bit host=localhost</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.066</span>+<span class="number">0800</span> I CONTROL  [initandlisten] db version v3<span class="number">.2</span><span class="number">.9</span></span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.066</span>+<span class="number">0800</span> I CONTROL  [initandlisten] git <span class="string">version:</span> <span class="number">22</span>ec9e93b40c85fc7cae7d56e7d6a02fd811088c</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.066</span>+<span class="number">0800</span> I CONTROL  [initandlisten] OpenSSL <span class="string">version:</span> OpenSSL <span class="number">1.0</span><span class="number">.2</span>h  <span class="number">3</span> May <span class="number">2016</span></span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.066</span>+<span class="number">0800</span> I CONTROL  [initandlisten] <span class="string">allocator:</span> system</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.066</span>+<span class="number">0800</span> I CONTROL  [initandlisten] <span class="string">modules:</span> none</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.066</span>+<span class="number">0800</span> I CONTROL  [initandlisten] build <span class="string">environment:</span></span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.066</span>+<span class="number">0800</span> I CONTROL  [initandlisten]     <span class="string">distarch:</span> x86_64</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.066</span>+<span class="number">0800</span> I CONTROL  [initandlisten]     <span class="string">target_arch:</span> x86_64</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.067</span>+<span class="number">0800</span> I CONTROL  [initandlisten] <span class="string">options:</span> &#123;&#125;</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.069</span>+<span class="number">0800</span> I -        [initandlisten] Detected data files <span class="keyword">in</span> <span class="regexp">/data/</span>db created by the <span class="string">'mmapv1'</span> storage engine, so setting the active storage engine to <span class="string">'mmapv1'</span>.</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.096</span>+<span class="number">0800</span> I JOURNAL  [initandlisten] journal dir=<span class="regexp">/data/</span>db/journal</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.096</span>+<span class="number">0800</span> I JOURNAL  [initandlisten] <span class="string">recover :</span> no journal files present, no recovery needed</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.112</span>+<span class="number">0800</span> I JOURNAL  [durability] Durability thread started</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.112</span>+<span class="number">0800</span> I JOURNAL  [journal writer] Journal writer thread started</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.438</span>+<span class="number">0800</span> I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory <span class="string">'/data/db/diagnostic.data'</span></span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.438</span>+<span class="number">0800</span> I NETWORK  [HostnameCanonicalizationWorker] Starting hostname canonicalization worker</span><br><span class="line"><span class="number">2016</span><span class="number">-09</span><span class="number">-22</span><span class="string">T21:</span><span class="number">08</span>:<span class="number">07.439</span>+<span class="number">0800</span> I NETWORK  [initandlisten] waiting <span class="keyword">for</span> connections on port <span class="number">27017</span></span><br></pre></td></tr></table></figure>
<p>开启<code>mongod</code>后再<code>mongo</code>就可以了</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">MongoDB <span class="built_in">shell</span> <span class="built_in">version</span>: <span class="number">3.2</span><span class="number">.9</span></span><br><span class="line">connecting <span class="built_in">to</span>: test</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>感觉 mongodb 的官方文档有点掉链子啊…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac 下按照&lt;a href=&quot;https://docs.mongodb.com/manual/mongo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网说明&lt;/a&gt; 安装 mongodb 并配置好&lt;code&gt;PATH&lt;/code&gt;后直接&lt;code&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://answerrrrrrrrr.io/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://answerrrrrrrrr.io/tags/Mac/"/>
    
      <category term="mongodb" scheme="http://answerrrrrrrrr.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>命令行调用 idapython 脚本</title>
    <link href="http://answerrrrrrrrr.io/2016/09/20/idapython-commandline/"/>
    <id>http://answerrrrrrrrr.io/2016/09/20/idapython-commandline/</id>
    <published>2016-09-20T02:40:41.000Z</published>
    <updated>2016-09-20T10:08:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li><p>安装 Python 2.7</p>
</li>
<li><p>下载 <a href="https://github.com/idapython/bin/raw/master/idapython-6.9.0-python2.7-mac.zip" target="_blank" rel="external">https://github.com/idapython/bin/raw/master/idapython-6.9.0-python2.7-mac.zip</a> 并解压</p>
</li>
<li><p>将 Python 内的所有内容复制到 IDA 根目录的 Python 内（没有就新建）</p>
</li>
<li><p>将 Plugins 内的所有内容复制到 IDA 根目录的 Plugins 内</p>
</li>
<li><p>将 python.cfg 复制到 IDA 根目录的 cfg 内</p>
</li>
<li><p>重启 IDA，File 菜单下面会有 Python Command 选项，而且 Script files 选项中可以选择 py 文件</p>
</li>
</ol>
<p>python 目录中的四个文件：</p>
<ul>
<li>init.py 是初始的基础文件</li>
<li>idaapi.py 中导入了 _idaapi 模块，这个以下划线开始的 idaapi 模块就是对 IDA API 的低层封装，idaapi.py 则是作为调用 IDA API 的用户层</li>
<li>idautils.py 提供了一些高级功能的函数</li>
<li>idc.py 则是对 IDA 内置的 IDC 脚本语言的兼容</li>
</ul>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>调用 idapython 脚本时总是要鼠标点来点去很不方便，在官网找了找 </p>
<p><a href="https://www.hex-rays.com/products/ida/support/idadoc/417.shtml" target="_blank" rel="external">https://www.hex-rays.com/products/ida/support/idadoc/417.shtml</a></p>
<p>该页面提供了命令行使用 ida 时的可用参数，比较常用的有：</p>
<p>-A 让 ida 自动运行，不需要人工干预。也就是在处理的过程中不会弹出交互窗口，但是如果从来没有使用过 ida 那么许可协议的窗口无论你是否使用这个参数都将会显示。</p>
<p>-c 参数会删除所有与参数中指定的文件相关的数据库，并且生成一个新的数据库。</p>
<p>-S 参数用于指定 ida 在分析完数据之后执行的 idc 脚本，<strong>注意：该选项和参数之间没有空格</strong>，并且搜索目录为 ida 目录下的 idc 目录。</p>
<p>-B 参数指定批量模式，等效于-A –c  –Sanylysis.idc.在分析完成后会自动生成相关的数据库和 asm 代码。并且在最后关闭 ida，以保存新的数据库。</p>
<p><em><a href="http://www.h4ck.org.cn/2012/03/ida-batch-mode/" target="_blank" rel="external">这篇文章</a><sup>2</sup>比较详细地讲解了批量模式的用法</em> </p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight py"><figcaption><span>test.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> idautils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"></span><br><span class="line">idc.Wait()	<span class="comment"># idaapi.autoWait()</span></span><br><span class="line"></span><br><span class="line">ea = BeginEA()</span><br><span class="line">dll_functions = []</span><br><span class="line"></span><br><span class="line">fp = open(<span class="string">"fun_output.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">fp.write(<span class="string">"check"</span>)</span><br><span class="line"><span class="keyword">for</span> funcea <span class="keyword">in</span> Functions(SegStart(ea), SegEnd(ea)):</span><br><span class="line">    functionName = GetFunctionName(funcea)</span><br><span class="line">    dll_functions.append(functionName)</span><br><span class="line">    fp.write(functionName)</span><br><span class="line">    print(functionName)</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line">idc.Exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><em>其中<code>idc.Wait()</code>表示带有<code>-A</code>参数时，等待 ida 自动分析过程完成后再运行后续脚本，<code>idc.Exit(0)</code>表示脚本运行结束后自动关闭 ida</em></p>
<p>不过在实际测试时，<code>idaq -c -A -Stest.py heap_test</code>失败且没有任何错误提示，参阅了<a href="http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/" target="_blank" rel="external">Using IDAPython to Make Your Life Easier: Part 6
</a><sup>3</sup>，脚本和命令都没什么问题，不知是不是因为 Demo 版的缘故。。。</p>
<p><code>idaq -c -Stest.py heap_test</code>倒是一切正常，只好暂且如此了。。。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.csdn.net/zhangmiaoping23/article/details/14521995" target="_blank" rel="external">http://blog.csdn.net/zhangmiaoping23/article/details/14521995</a></li>
<li><a href="http://www.h4ck.org.cn/2012/03/ida-batch-mode/" target="_blank" rel="external">http://www.h4ck.org.cn/2012/03/ida-batch-mode/</a></li>
<li><a href="http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/" target="_blank" rel="external">http://researchcenter.paloaltonetworks.com/2016/06/unit42-using-idapython-to-make-your-life-easier-part-6/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装 Python 2.7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载 &lt;a href=&quot;https://github.com
    
    </summary>
    
      <category term="ida" scheme="http://answerrrrrrrrr.io/categories/ida/"/>
    
    
      <category term="ida" scheme="http://answerrrrrrrrr.io/tags/ida/"/>
    
      <category term="idapython" scheme="http://answerrrrrrrrr.io/tags/idapython/"/>
    
      <category term="idc" scheme="http://answerrrrrrrrr.io/tags/idc/"/>
    
  </entry>
  
  <entry>
    <title>Mac 下使用 homebrew 安装 redis</title>
    <link href="http://answerrrrrrrrr.io/2016/09/12/redis-brew/"/>
    <id>http://answerrrrrrrrr.io/2016/09/12/redis-brew/</id>
    <published>2016-09-12T03:44:37.000Z</published>
    <updated>2016-09-18T02:10:42.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">$ brew install redis</span><br><span class="line">=<span class="function">=&gt;</span> Downloading https:<span class="regexp">//</span>homebrew.bintray.com/bottles/redis<span class="number">-3.2</span><span class="number">.3</span>.el_capitan.bottle.tar.gz</span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span> <span class="number">100.0</span>%</span><br><span class="line">=<span class="function">=&gt;</span> Pouring redis<span class="number">-3.2</span><span class="number">.3</span>.el_capitan.bottle.tar.gz</span><br><span class="line">=<span class="function">=&gt;</span> Caveats</span><br><span class="line">To have launchd start redis now <span class="keyword">and</span> restart at login:</span><br><span class="line">  brew services start redis</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span><br><span class="line">  redis-server /usr/local/etc/redis.conf</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/redis/3.2.3: 10 files, 1.7M</span></span><br></pre></td></tr></table></figure>
<p>这样就安装好了，很是方便<br>不过暂时有一个问题：每次都要手动打开<code>redis-server</code>后才能<code>redis-cli</code>，否则提示<code>not connected</code>   </p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line">Could <span class="keyword">not</span> connect <span class="keyword">to</span> Redis <span class="keyword">at</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>: Connection refused</span><br><span class="line">Could <span class="keyword">not</span> connect <span class="keyword">to</span> Redis <span class="keyword">at</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>: Connection refused</span><br><span class="line"><span class="keyword">not</span> connected&gt;</span><br></pre></td></tr></table></figure>
<p>其实<code>brew</code>很贴心，之前安装完已经提醒过可以<code>brew services start redis</code>来自动启动，另外还可以使用<code>brew info</code>来看看提示信息</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">$ brew info redis</span><br><span class="line">redis: stable 3.2.3 (bottled), HEAD</span><br><span class="line">Persistent key-value database, with built-in net interface</span><br><span class="line">http://redis.io/</span><br><span class="line"><span class="comment">/usr/local/Cellar/redis/3.2.3 (10 files, 1.7M) *</span></span><br><span class="line">  Poured from bottle on 2016-09-18 at 09:51:13</span><br><span class="line">From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/redis.rb</span><br><span class="line">=<span class="ruby">=&gt; Options</span><br><span class="line"></span>-<span class="ruby">-with-jemalloc</span><br><span class="line"></span>	Select jemalloc as memory allocator when building Redis</span><br><span class="line">-<span class="ruby">-HEAD</span><br><span class="line"></span>	Install HEAD version</span><br><span class="line">=<span class="ruby">=&gt; Caveats</span><br><span class="line"></span>To have launchd start redis now and restart at login:</span><br><span class="line">  brew services start redis</span><br><span class="line">Or, if you don't want/need a background service you can just run:</span><br><span class="line">  redis-server /usr/local/etc/redis.conf</span><br><span class="line">$ brew services start redis</span><br><span class="line">=<span class="ruby">=&gt; Tapping homebrew/services</span><br><span class="line"></span>Cloning into '/usr/local/Library/Taps/homebrew/homebrew-services'...</span><br><span class="line">remote: Counting objects: 7, done.</span><br><span class="line">remote: Compressing objects: 100% (6/6), done.</span><br><span class="line">remote: Total 7 (delta 0), reused 3 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (7/7), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Tapped 0 formulae (32 files, 46.3K)</span><br><span class="line">=<span class="ruby">=&gt; Successfully started <span class="string">`redis`</span> (<span class="symbol">label:</span> homebrew.mxcl.redis)</span><br><span class="line"></span>$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
<p>这样就可以了</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew install redis&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
    
    </summary>
    
      <category term="redis" scheme="http://answerrrrrrrrr.io/categories/redis/"/>
    
    
      <category term="redis" scheme="http://answerrrrrrrrr.io/tags/redis/"/>
    
      <category term="brew" scheme="http://answerrrrrrrrr.io/tags/brew/"/>
    
      <category term="mac" scheme="http://answerrrrrrrrr.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Q 判断 Gadget 时遇到 align 伪指令的问题</title>
    <link href="http://answerrrrrrrrr.io/2016/08/23/Q%E5%88%A4%E6%96%ADGadget%E6%97%B6%E9%81%87%E5%88%B0align%E4%BC%AA%E6%8C%87%E4%BB%A4%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://answerrrrrrrrr.io/2016/08/23/Q判断Gadget时遇到align伪指令的问题/</id>
    <published>2016-08-23T05:13:57.000Z</published>
    <updated>2016-08-23T07:51:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在利用 Q 判断 Gadget 时发现，在 IDA 中静态分析时显示如下的指令片段：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">align</span> <span class="number">10h</span></span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure>
<p>会被判断为 Gadget，并且还莫名其妙扯上了 esi</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">8d7600c3</span><br><span class="line">MoveReg(Address: <span class="number">0x40000</span>, Complexity <span class="number">0.67</span>, Stack <span class="number">0x4</span>, <span class="built_in">Ip</span> <span class="number">0x0</span>, Output: <span class="built_in">esi</span>, Inputs [<span class="built_in">esi</span>])</span><br><span class="line">AndGadget(Address: <span class="number">0x40000</span>, Complexity <span class="number">0.67</span>, Stack <span class="number">0x4</span>, <span class="built_in">Ip</span> <span class="number">0x0</span>, Output: <span class="built_in">esi</span>, Inputs [<span class="built_in">esi</span>, <span class="built_in">esi</span>])</span><br><span class="line">OrGadget(Address: <span class="number">0x40000</span>, Complexity <span class="number">0.67</span>, Stack <span class="number">0x4</span>, <span class="built_in">Ip</span> <span class="number">0x0</span>, Output: <span class="built_in">esi</span>, Inputs [<span class="built_in">esi</span>, <span class="built_in">esi</span>])</span><br></pre></td></tr></table></figure>
<p>实在百思不得其解   </p>
<p>按理说<code>伪指令</code>并没有实际的机器码与之对应，但是<code>ret</code>对应<code>c3</code>，那么只能解释为<code>align 10h</code>对应<code>8d7600</code>了</p>
<p>好在 Google 到了<a href="http://www.codingnow.com/2000/frame.htm?http://www.codingnow.com/2000/essay/align.htm" target="_blank" rel="external">一篇文章</a>，提到了汇编器处理<code>align</code>伪指令的原理</p>
<blockquote>
<p>我原来以为, VC 将插入 NOP 来对齐代码, 结果发现, 为了提高效率, VC 按情况填入了单字节,双字节, 三字节指令做空操作, 使空操作的时间最短. 当需要插入 1 字节时, 理所当然的插入一个 0x90 (NOP); 需要插入 2 字节时则是 0x8b 0xff (MOV DI,DI) 这也无可厚非, 此指令不破坏任何寄存器, 也不影响标志位; 可需要填入 3 个字节的时候, 我用的 VC6 却令人费解的填入了 0x8d 0x49 0x00 (LEA CX,[BX+DI+00]), 很明显它影响了 CX, 而风魂的代码就是受到了它的影响.</p>
</blockquote>
<p>我这才恍然大悟，拿 capstone 反汇编了一下<code>8d7600</code>得到</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lea</span>	<span class="built_in">esi</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>]</span><br></pre></td></tr></table></figure>
<p>果然，汇编器在处理<code>align</code>时，插入了这样一个<code>不破坏任何寄存器也不影响标志位</code>的指令来实现对齐效果</p>
<p>而 Q（使用 capstone 反汇编）接收到传入的指令时，自然会按照实际的机器指令而不是<code>align 10h</code>来进行 Gadget 判断，所以出现了上面的结果</p>
<p>大致如此…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在利用 Q 判断 Gadget 时发现，在 IDA 中静态分析时显示如下的指令片段：&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;sp
    
    </summary>
    
      <category term="Q" scheme="http://answerrrrrrrrr.io/categories/Q/"/>
    
    
      <category term="Q" scheme="http://answerrrrrrrrr.io/tags/Q/"/>
    
      <category term="asm" scheme="http://answerrrrrrrrr.io/tags/asm/"/>
    
      <category term="align" scheme="http://answerrrrrrrrr.io/tags/align/"/>
    
      <category term="capstone" scheme="http://answerrrrrrrrr.io/tags/capstone/"/>
    
      <category term="ida" scheme="http://answerrrrrrrrr.io/tags/ida/"/>
    
  </entry>
  
  <entry>
    <title>Flask-SQLAlchemy 中的 relationship &amp; backref</title>
    <link href="http://answerrrrrrrrr.io/2016/08/16/Flask-relationship-backref/"/>
    <id>http://answerrrrrrrrr.io/2016/08/16/Flask-relationship-backref/</id>
    <published>2016-08-16T06:29:07.000Z</published>
    <updated>2016-08-16T08:15:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天重看 Flask 时，发现对<code>backref</code>仍然没有理解透彻。查阅<a href="http://flask-sqlalchemy.pocoo.org/2.1/models/" target="_blank" rel="external">文档</a>后发现，以前试图孤立地理解<code>backref</code>是问题之源，<code>backref</code>是与<code>relationship</code>配合使用的。</p>
<h1 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h1><p><code>db.relationship()</code>用于在两个表之间建立<code>一对多关系</code>。例如书中 roles 表中一个 User 角色，可以对应 users 表中多个实际的普通用户。实现这种关系时，要在“多”这一侧加入一个外键，指向“一”这一侧联接的记录。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">	<span class="comment"># ...</span></span><br><span class="line">	users = db.relationship(<span class="string">'User'</span>, backref=<span class="string">'role'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">	<span class="comment"># ...</span></span><br><span class="line">	role_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'roles.id'</span>))</span><br></pre></td></tr></table></figure>
<h2 id="relationship-amp-ForeighKey"><a href="#relationship-amp-ForeighKey" class="headerlink" title="relationship &amp; ForeighKey"></a>relationship &amp; ForeighKey</h2><p>大多数情况下, db.relationship() 都能自行找到关系中的外键, 但有时却无法决定把 哪一列作为外键。 例如, 如果 User 模型中有两个或以上的列定义为 Role 模型的外键, SQLAlchemy 就不知道该使用哪列。如果无法决定外键,你就要为 db.relationship() 提供额外参数,从而确定所用外键。（见书 P49）</p>
<h2 id="relationship-amp-backref"><a href="#relationship-amp-backref" class="headerlink" title="relationship &amp; backref"></a>relationship &amp; backref</h2><p>通过<code>db.relationship()</code>，Role 模型有了一个可以获得对应角色所有用户的属性<code>users</code>。默认是列表形式，<code>lazy=&#39;dynamic&#39;</code>时返回的是一个 query 对象。即<code>relationship</code>提供了 Role 对 User 的访问。</p>
<p>而<code>backref</code>正好相反，提供了 User 对 Role 的访问。</p>
<p>不妨设一个 Role 实例为 <code>user_role</code>，一个 User 实例为 <code>u</code>。relationship 使 <code>user_role.users</code> 可以访问所有符合角色的用户，而 backref 使 <code>u.role</code> 可以获得用户对应的角色。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ p manage.py shell</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user_role = Role.query.filter_by(name=<span class="string">'User'</span>).all()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user_role</span><br><span class="line">[&lt;Role <span class="string">u'User'</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user_role = Role.query.filter_by(name=<span class="string">'User'</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user_role</span><br><span class="line">&lt;Role <span class="string">u'User'</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user_role.users</span><br><span class="line">&lt;sqlalchemy.orm.dynamic.AppenderBaseQuery object at <span class="number">0x1087c1050</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user_role.users.order_by(User.username).all()</span><br><span class="line">[&lt;User <span class="string">u'alice78'</span>&gt;, &lt;User <span class="string">u'andrea86'</span>&gt;, &lt;User <span class="string">u'hmr'</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Role.query.all()</span><br><span class="line">[&lt;Role <span class="string">u'Moderator'</span>&gt;, &lt;Role <span class="string">u'Administrator'</span>&gt;, &lt;Role <span class="string">u'User'</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user_role.users.count()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = User.query.filter_by(username=<span class="string">'hmr'</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u</span><br><span class="line">&lt;User <span class="string">u'hmr'</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.role</span><br><span class="line">&lt;Role <span class="string">u'User'</span>&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h1 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h1><p>除了一对多之外, 还有几种其他的关系类型。一对一关系可以用前面介绍的一对多关系表示, 但调用 db.relationship() 时要把 uselist 设为 False , 把“多”变成“一”。 </p>
<h1 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h1><p><code>多对多关系</code>在书 P131 讲得很清楚。</p>
<p>在 P134 的实际例子中，使用两个一对多关系实现多对多关系。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天重看 Flask 时，发现对&lt;code&gt;backref&lt;/code&gt;仍然没有理解透彻。查阅&lt;a href=&quot;http://flask-sqlalchemy.pocoo.org/2.1/models/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;
    
    </summary>
    
      <category term="Flask" scheme="http://answerrrrrrrrr.io/categories/Flask/"/>
    
    
      <category term="Flask" scheme="http://answerrrrrrrrr.io/tags/Flask/"/>
    
      <category term="Flask-SQLAlchemy" scheme="http://answerrrrrrrrr.io/tags/Flask-SQLAlchemy/"/>
    
      <category term="relationship" scheme="http://answerrrrrrrrr.io/tags/relationship/"/>
    
      <category term="backref" scheme="http://answerrrrrrrrr.io/tags/backref/"/>
    
  </entry>
  
  <entry>
    <title>hexo-rss-sitemap</title>
    <link href="http://answerrrrrrrrr.io/2016/07/28/hexo-rss-sitemap/"/>
    <id>http://answerrrrrrrrr.io/2016/07/28/hexo-rss-sitemap/</id>
    <published>2016-07-28T02:42:46.000Z</published>
    <updated>2016-07-28T02:56:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然发现没给博客添加<code>RSS</code>订阅和<code>sitemap</code>（站点地图，方便搜索引擎的收录）<br>尝试了一下发觉还挺方便的   </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>这里一定要加上<code>--save</code>，否则无法<code>generate</code>对应的 xml</p>
<p>然后在根目录的<code>_config.xml</code>加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># RSS &amp; sitemap</span><br><span class="line"># Extensions</span><br><span class="line">Plugins:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line"># Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line"></span><br><span class="line"># sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></figure>
<p>然后<code>hexo g</code>即可生成对应 xml</p>
<blockquote>
<p>INFO  Start processing<br>INFO  Files loaded in 650 ms<br>INFO  Generated: atom.xml<br>INFO  Generated: sitemap.xml<br>INFO  2 files generated in 2.47 s</p>
</blockquote>
<p>这时访问对应路径即可验证，另外边栏也可以看见<code>RSS</code>图标了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天突然发现没给博客添加&lt;code&gt;RSS&lt;/code&gt;订阅和&lt;code&gt;sitemap&lt;/code&gt;（站点地图，方便搜索引擎的收录）&lt;br&gt;尝试了一下发觉还挺方便的   &lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
    
    </summary>
    
      <category term="hexo" scheme="http://answerrrrrrrrr.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://answerrrrrrrrr.io/tags/hexo/"/>
    
      <category term="rss" scheme="http://answerrrrrrrrr.io/tags/rss/"/>
    
      <category term="sitemap" scheme="http://answerrrrrrrrr.io/tags/sitemap/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的闭包与装饰器</title>
    <link href="http://answerrrrrrrrr.io/2016/07/25/Python%E9%97%AD%E5%8C%85/"/>
    <id>http://answerrrrrrrrr.io/2016/07/25/Python闭包/</id>
    <published>2016-07-25T02:18:09.000Z</published>
    <updated>2016-09-30T08:27:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Closure-闭包"><a href="#Closure-闭包" class="headerlink" title="Closure(闭包)"></a>Closure(闭包)</h1><p>什么是闭包?简单说,闭包就是根据不同的配置信息得到不同的结果。</p>
<p>专业的解释:闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。</p>
<p>概念总是有点抽象，下面结合示例说下我自己的理解。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>外部函数包裹内部函数</li>
<li>外部函数最终返回一个函数对象，即一个内部函数实例</li>
<li>外部函数传入的参数不同时，会返回不同的内部函数实例</li>
<li>外部函数用于<code>绑定</code>，内部函数用于<code>处理</code></li>
<li>外部函数绑定的参数为<code>函数</code>时，即为<code>装饰器</code></li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(augend)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'augend:'</span>, augend</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plus_inside</span><span class="params">(addend)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'addend:'</span>, addend</span><br><span class="line">        result = augend + addend</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'result:'</span>, result</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> plus_inside</span><br><span class="line"></span><br><span class="line">p20 = plus(<span class="number">20</span>)</span><br><span class="line"><span class="comment"># -&gt; augend: 20</span></span><br><span class="line"><span class="comment"># 只打印 augend 说明内部处理函数尚未执行</span></span><br><span class="line"><span class="comment"># 只是完成了将 augend 与处理函数绑定的操作</span></span><br><span class="line"></span><br><span class="line">p20(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># -&gt; addend: 1</span></span><br><span class="line"><span class="comment"># -&gt; result: 21</span></span><br></pre></td></tr></table></figure>
<h1 id="Decorator-装饰器"><a href="#Decorator-装饰器" class="headerlink" title="Decorator(装饰器)"></a>Decorator(装饰器)</h1><p>前面已经提到，装饰器本质就是外部函数绑定参数为函数的闭包。</p>
<p>另外 Python 给它添加了一个更优雅的调用方式，用在被绑定函数<code>f</code>之前添加<code>@wrapper</code>的方式，代替在被绑定函数<code>f</code>定义后使用<code>f = wrapper(f)</code>手动赋值的方式，来进行绑定。</p>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makebold</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;b&gt;"</span> + fn() + <span class="string">"&lt;/b&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeitalic</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;i&gt;"</span> + fn() + <span class="string">"&lt;/i&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@makebold</span></span><br><span class="line"><span class="meta">@makeitalic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hello() </span><br><span class="line"><span class="comment"># -&gt; &lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;</span></span><br><span class="line"><span class="comment"># 注意&lt;b&gt;和&lt;i&gt;的顺序</span></span><br></pre></td></tr></table></figure>
<h2 id="保持函数默认参数常新的装饰器"><a href="#保持函数默认参数常新的装饰器" class="headerlink" title="保持函数默认参数常新的装饰器"></a>保持函数默认参数常新的装饰器</h2><p>Cookbook 20.1 里有个特别的例子。</p>
<p>Python 里函数的默认参数只在函数定义时求值一次，然后存入函数内建的 func_defaults 元组内。如果是不可变参数（如 1、’qwe’、None 等），完全没有问题；但如果是类似列表这样的可变参数，重新调用函数时默认的列表可能已经面目全非。</p>
<p>书中提供了两种解决该问题的方法：</p>
<h3 id="标准方法"><a href="#标准方法" class="headerlink" title="标准方法"></a>标准方法</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">packitem</span><span class="params">(item, pkg=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> pkg <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        pkg = []</span><br><span class="line">    pkg.append(item)</span><br><span class="line">    <span class="keyword">return</span> pkg</span><br></pre></td></tr></table></figure>
<h3 id="装饰器方法"><a href="#装饰器方法" class="headerlink" title="装饰器方法"></a>装饰器方法</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">freshdefaults</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="string">"a decorator to wrap f and keep its default values fresh between calls"</span></span><br><span class="line">    fdefaults = f.func_defaults</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">refresher</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line">        f.func_defaults = deepcopy(fdefaults)</span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwds)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 用于在 print 时区别不同的被绑定函数，2.4 后有效，见 Cookbook 20.1 </span></span><br><span class="line">    refresher.__name__ = f.__name__</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> refresher</span><br><span class="line"></span><br><span class="line"><span class="comment"># usage as a decorator, in python 2.4:</span></span><br><span class="line"><span class="meta">@freshdefaults</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">packitem</span><span class="params">(item, pkg=[])</span>:</span></span><br><span class="line">    pkg.append(item)</span><br><span class="line">    <span class="keyword">return</span> pkg</span><br><span class="line"><span class="comment"># usage in python 2.3: after the function definition, explicitly assign:</span></span><br><span class="line"><span class="comment"># f = freshdefaults(f)</span></span><br></pre></td></tr></table></figure>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h3><ul>
<li><a href="http://www.cnblogs.com/ma6174/archive/2013/04/15/3022548.html" target="_blank" rel="external">http://www.cnblogs.com/ma6174/archive/2013/04/15/3022548.html</a></li>
<li>Cookbook 20.1</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Closure-闭包&quot;&gt;&lt;a href=&quot;#Closure-闭包&quot; class=&quot;headerlink&quot; title=&quot;Closure(闭包)&quot;&gt;&lt;/a&gt;Closure(闭包)&lt;/h1&gt;&lt;p&gt;什么是闭包?简单说,闭包就是根据不同的配置信息得到不同的结果。&lt;/p&gt;

    
    </summary>
    
      <category term="Python" scheme="http://answerrrrrrrrr.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://answerrrrrrrrr.io/tags/Python/"/>
    
      <category term="Closure" scheme="http://answerrrrrrrrr.io/tags/Closure/"/>
    
      <category term="Decorator" scheme="http://answerrrrrrrrr.io/tags/Decorator/"/>
    
      <category term="func_defaults" scheme="http://answerrrrrrrrr.io/tags/func-defaults/"/>
    
  </entry>
  
  <entry>
    <title>字符集与编码</title>
    <link href="http://answerrrrrrrrr.io/2016/07/06/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/"/>
    <id>http://answerrrrrrrrr.io/2016/07/06/字符集与编码方式/</id>
    <published>2016-07-06T11:04:36.000Z</published>
    <updated>2016-10-12T07:51:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前对「字符集与编码」的认识完全来源于<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000" target="_blank" rel="external">廖雪峰的这篇文章</a>，但是总容易忘记<br>而且依稀记得很早的时候在知乎看到梁海大神提到过字符集与编码是不一样的概念</p>
<p>今天仔细查阅了一下，记录如下</p>
<h1 id="字符集与编码"><a href="#字符集与编码" class="headerlink" title="字符集与编码"></a>字符集与编码</h1><p>顾名思义，「字符」的「集合」，每个「字符」有一个唯一的「数字」与之对应<br>而如何将「数字」改写成内存中的「字节」，即所谓的「编码」或「编码方式」</p>
<p>引自<a href="https://www.zhihu.com/question/21887246/answer/19631235" target="_blank" rel="external">字符集和编码方式的区别？ - 梁海的回答</a>：</p>
<blockquote>
<p>「字符集」和「编码」等几个层次的概念被彻底分离且模块化的这样一个模型，其实是 Unicode 时代才得到广泛认同的。</p>
<p>而对于 ASCII、GB2312、Big5 之类的遗留（legacy）方案，其字符集及其编码的关系基本是锁定的，所以常常用「字符编码」（character encoding）、「代码页」（code page）等概念来统称它们那样从字符到编码字节流的整体方案。比如 ASCII 本身就既是字符集又是编码方案，而 GB2312 用的都是 EUC-CN 编码方案。</p>
</blockquote>
<h1 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h1><p>ASCII 既是字符集又是编码方案，其字符集为「它所能表示的 128 种字符（包括控制字符和显示字符）」，编码方案为「128 个字节码与字符集间的映射」</p>
<h1 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h1><p>ASCII 本身就是 ANSI(American National Standard Institute) 制定的标准。虽然 ASCII 使用一个字节即 8 位的长度，但由于在英文世界中 7 位已经完全够用，所以最高位始终为 0。其他国家便将最高位利用起来，用于扩展表示其他语言的字符。</p>
<p>ANSI 指的是这样一种编码方式：表示通用英文字符时，最高位为 0，使用 ASCII 编码，长度为一个字节；表示其他语言的专有字符时，最高位为 1，使用其他编码。其中「其他编码」可以是 ANSI 标准中的任意一页，比如「GB2312」，用两个最高位为 1 的字节来表示一个简体中文字符。</p>
<h1 id="Unicode-字符集"><a href="#Unicode-字符集" class="headerlink" title="Unicode 字符集"></a>Unicode 字符集</h1><p>Unicode 原本只是个字符集，<a href="http://www.freebuf.com/articles/others-articles/25623.html" target="_blank" rel="external">freebuf 的一篇译文</a>讲得很生动：</p>
<blockquote>
<p>Unicode 背后的想法非常简单，然而却被普遍的误解了。Unicode 就像一个电话本，标记着字符和数字之间的映射关系。Joel 称之为「神奇数字」，因为它们可能是随机指定的，而且不会给出任何解释。官方术语是码位（Code Point），总是用 U+ 开头。理论上每种语言中的每种字符都被 Unicode 协会指定了一个神奇数字。例如希伯来文中的第一个字母 א，是 U+2135，字母 A 是 U+0061。</p>
<p>Unicode 并不涉及字符是怎么在字节中表示的，它仅仅指定了字符对应的数字，仅此而已。</p>
<p>关于 Unicode 的其它误解包括：Unicode 支持的字符上限是 65536 个，Unicode 字符必须占两个字节。告诉你这些的人应该去换换脑子了。</p>
<p>记住，Unicode 只是一个用来映射字符和数字的标准。它对支持字符的数量没有限制，也不要求字符必须占两个、三个或者其它任意数量的字节。</p>
</blockquote>
<h1 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h1><p>Unicode 的实现方式不同于编码方式。一个字符的 Unicode 编码是确定的。但是在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对 Unicode 编码的实现方式有所不同。Unicode 的实现方式称为  Unicode 转换格式（Unicode Transformation Format，简称为 UTF）。</p>
<h2 id="UTF-8-编码"><a href="#UTF-8-编码" class="headerlink" title="UTF-8 编码"></a>UTF-8 编码</h2><p>如果一个仅包含基本 7 位 ASCII 字符的 Unicode 文件，如果每个字符都使用 2 字节的原 Unicode 编码传输，其第一字节的 8 位始终为 0 。这就造成了比较大的浪费。</p>
<p>对于这种情况，可以使用 UTF-8 编码，这是一种变长编码，它将基本 7 位 ASCII 字符仍用 7 位编码表示，占用一个字节（首位补 0）。</p>
<p>而遇到与其他 Unicode 字符混合的情况，将按一定算法转换，每个字符使用 1-3 个字节编码，并利用首位为 0 或 1 进行识别。这样对以 7 位 ASCII 字符为主的西文文档就大大节省了编码长度（具体方案参见 UTF-8）。</p>
<h2 id="UTF-16-编码"><a href="#UTF-16-编码" class="headerlink" title="UTF-16 编码"></a>UTF-16 编码</h2><p>类似的，另一个流行的可变长度编码方案是 UTF-16，它使用 2 个或者 4 个字节来存储字符。然而，人们逐渐意识到 UTF-16 可能会浪费存储空间，但那是另一个话题了。</p>
<h2 id="狭义的-Unicode-编码"><a href="#狭义的-Unicode-编码" class="headerlink" title="狭义的 Unicode 编码"></a>狭义的 Unicode 编码</h2><p>需要注意的是，狭义的 Unicode 编码方式与 ISO 10646 的通用字符集（Universal Character Set，UCS）概念相对应，目前实际应用的 Unicode 版本对应于 UCS-2 ，使用 16 位的编码空间。也就是每个字符占用 2 个字节。</p>
<p>这样理论上一共最多可以表示 216 即 65536 个字符。基本满足各种语言的使用。实际上当前版本的 Unicode 尚未填满这 16 位编码，保留了大量空间作为特殊使用或将来扩展。</p>
<p>以 Python 为例，<code>unicode(s,&#39;utf8&#39;)</code> 所返回的结果就是这种狭义的 Unicode 编码。</p>
<p>又是梁海在<a href="https://www.zhihu.com/question/19817672/answer/13055185" target="_blank" rel="external">廖雪峰答案</a>的评论里提到:</p>
<blockquote>
<p>廖雪峰说的「Unicode」指的是 UCS-2（所以不能改成「UTF-32」）。当年只有 BMP 的时候 UCS-2 和 UTF-16 是等价的，又被称作「Unicode」（所以这里不是「Unicode 是字符集，不是编码方式」这个问题，只是 UCS-2 也被称作「Unicode」而已）。但现在这种用「Unicode」指代 UCS-2/UTF-16 的做法已经过时了，很不合适。</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单总结一下，Unicode 是「字符集」而不是「编码」。但由于历史原因，某些时候提到的「Unicode 编码」指的是曾经定长的 UCS-2/UTF-16（现在 UTF-16 也是变长）。</p>
<p>由于 UTF-8 可以兼容 ASCII，且其变长特性能相对高效地利用空间，在应用或传输过程中一般使用的是 UTF-8。例如 Python shell 中 str 使用的就是 ASCII(UTF-8)。</p>
<p>而内存一般使用的是这种「Unicode 编码」，所以在进行编码转换时，通常将各类编码<code>decode</code>成「Unicode 编码」，在<code>encode</code>成最终编码形式。</p>
<p>eg:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">'在'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'\xe5\x9c\xa8'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=unicode(a,<span class="string">'utf8'</span>) // 或 b=a.decode(<span class="string">'utf8'</span>)，其中<span class="string">'utf-8'</span>等同于<span class="string">'utf8'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">u'\u5728'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.encode(<span class="string">'gbk'</span>)</span><br><span class="line"><span class="string">'\xd4\xda'</span></span><br></pre></td></tr></table></figure>
<p>在 Python 2.x 版本中，字符串实际上是字节串，这种字符串中的每个字符长度为 1，实际上就是一个字节，等同于 ASCII。（参考《Python Cookbook》1.21）</p>
<p>不过在 Python 3.x 版本中，把 ‘xxx’ 和 u’xxx’ 统一成了 Unicode 编码，即写不写前缀 u 都是一样的，而以字节形式表示的字符串则必须加上 b 前缀。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前对「字符集与编码」的认识完全来源于&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a3762984
    
    </summary>
    
      <category term="编码" scheme="http://answerrrrrrrrr.io/categories/%E7%BC%96%E7%A0%81/"/>
    
    
      <category term="Python" scheme="http://answerrrrrrrrr.io/tags/Python/"/>
    
      <category term="UTF-8" scheme="http://answerrrrrrrrr.io/tags/UTF-8/"/>
    
      <category term="ANSI" scheme="http://answerrrrrrrrr.io/tags/ANSI/"/>
    
      <category term="字符集" scheme="http://answerrrrrrrrr.io/tags/%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
    
      <category term="编码" scheme="http://answerrrrrrrrr.io/tags/%E7%BC%96%E7%A0%81/"/>
    
      <category term="ASCII" scheme="http://answerrrrrrrrr.io/tags/ASCII/"/>
    
      <category term="Unicode" scheme="http://answerrrrrrrrr.io/tags/Unicode/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS-ngResource-save</title>
    <link href="http://answerrrrrrrrr.io/2016/07/06/AngularJS-ngResource-save/"/>
    <id>http://answerrrrrrrrr.io/2016/07/06/AngularJS-ngResource-save/</id>
    <published>2016-07-06T06:43:02.000Z</published>
    <updated>2016-07-06T07:14:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Coursera AngularJS 课程的最后一个任务，添加提交 feedback 到 server 的功能<br>之前已经实现了添加 feedback 并保存在 client 的功能<br>现在只需要利用<code>$resource</code>的<code>$save</code>方法将 feedback 的 json 对象<code>post</code>到 server   </p>
<p>本以为照葫芦画瓢很简单，结果总是会报错如下</p>
<blockquote>
<p>TypeError: feedbackFactory.getFeedbacks(…).$save is not a function</p>
</blockquote>
<p>仔细对照<a href="https://docs.angularjs.org/api/ngResource/service/$resource" target="_blank" rel="external">官方文档</a>找到原因：</p>
<blockquote>
<p>The action methods on the class object or instance object can be invoked with the following parameters:</p>
<ul>
<li>HTTP GET “class” actions: Resource.action([parameters], [success], [error])</li>
<li>non-GET “class” actions: Resource.action([parameters], postData, [success], [error])</li>
<li>non-GET instance actions: instance.$action([parameters], [success], [error])</li>
</ul>
</blockquote>
<p>问题出在我试图使用<code>non-GET &quot;class&quot; actions</code>，却加了<code>$</code>符号且没有带上<code>postData</code>   </p>
<p>所以解决方式有两种</p>
<h1 id="non-GET-“class”-actions"><a href="#non-GET-“class”-actions" class="headerlink" title="non-GET “class” actions"></a>non-GET “class” actions</h1><figure class="highlight js"><figcaption><span>services.js</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">        .constant(<span class="string">"baseURL"</span>, <span class="string">"http://localhost:3000/"</span>)</span><br><span class="line">        .service(<span class="string">'feedbackFactory'</span>, [<span class="string">'$resource'</span>, <span class="string">'baseURL'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$resource,baseURL</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.getFeedbacks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $resource(baseURL+<span class="string">"feedback"</span>,<span class="literal">null</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        &#125;])</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>controllers.js</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">        .controller(<span class="string">'FeedbackController'</span>, [<span class="string">'$scope'</span>, <span class="string">'feedbackFactory'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, feedbackFactory</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            $scope.feedbacks = feedbackFactory.getFeedbacks().query(</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                    $scope.feedbacks = response;</span><br><span class="line">                    <span class="built_in">console</span>.log($scope.feedbacks);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            $scope.sendFeedback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">console</span>.log($scope.feedbacks);</span><br><span class="line"></span><br><span class="line">                $scope.feedbacks.push($scope.feedback);</span><br><span class="line">                feedbackFactory.getFeedbacks().save($scope.feedback);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ($scope.feedback.agree &amp;&amp; ($scope.feedback.mychannel == <span class="string">""</span>)) &#123;</span><br><span class="line">                    $scope.invalidChannelSelection = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'incorrect'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    $scope.invalidChannelSelection = <span class="literal">false</span>;</span><br><span class="line">                    $scope.feedback = &#123;mychannel:<span class="string">""</span>, firstName:<span class="string">""</span>, lastName:<span class="string">""</span>, agree:<span class="literal">false</span>, email:<span class="string">""</span> &#125;;</span><br><span class="line">                    $scope.feedbackForm.$setPristine();</span><br><span class="line">                    <span class="built_in">console</span>.log($scope.feedback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;])</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h1 id="non-GET-instance-actions"><a href="#non-GET-instance-actions" class="headerlink" title="non-GET instance actions"></a>non-GET instance actions</h1><figure class="highlight js"><figcaption><span>service.js</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">        .constant(<span class="string">"baseURL"</span>, <span class="string">"http://localhost:3000/"</span>)</span><br><span class="line">        .service(<span class="string">'feedbackFactory'</span>, [<span class="string">'$resource'</span>, <span class="string">'baseURL'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$resource,baseURL</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> $resource(baseURL+<span class="string">"feedback/:id"</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125;])</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>controllers.js</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">        .controller(<span class="string">'FeedbackController'</span>, [<span class="string">'$scope'</span>, <span class="string">'feedbackFactory'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, feedbackFactory</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// $scope.feedbacks = feedbackFactory.getFeedbacks().query(</span></span><br><span class="line">            <span class="comment">//     function(response)&#123;</span></span><br><span class="line">            <span class="comment">//         $scope.feedbacks = response;</span></span><br><span class="line">            <span class="comment">//         console.log($scope.feedbacks);</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// );</span></span><br><span class="line"></span><br><span class="line">            $scope.sendFeedback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newFeedback = <span class="keyword">new</span> feedbackFactory($scope.feedback);</span><br><span class="line">                newFeedback.$save();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// $scope.feedbacks.push($scope.feedback);</span></span><br><span class="line">                <span class="comment">// feedbackFactory.getFeedbacks().save($scope.feedback);</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ($scope.feedback.agree &amp;&amp; ($scope.feedback.mychannel == <span class="string">""</span>)) &#123;</span><br><span class="line">                    $scope.invalidChannelSelection = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'incorrect'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    $scope.invalidChannelSelection = <span class="literal">false</span>;</span><br><span class="line">                    $scope.feedback = &#123;mychannel:<span class="string">""</span>, firstName:<span class="string">""</span>, lastName:<span class="string">""</span>, agree:<span class="literal">false</span>, email:<span class="string">""</span> &#125;;</span><br><span class="line">                    $scope.feedbackForm.$setPristine();</span><br><span class="line">                    <span class="built_in">console</span>.log($scope.feedback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;])</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>由于第二种方式没有加上<code>[success], [error]</code>处理，看起来要简单许多<br><a href="http://stackoverflow.com/questions/36558499/angularjs-post-changes-to-the-server-using-resource/36564415#36564415" target="_blank" rel="external">Stackoverflow</a> 里一位疑似该课程的同学用的就是这种方式<br>不过相对来说第一种方式跟其他部分代码风格更统一   </p>
<p>大致如此.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Coursera AngularJS 课程的最后一个任务，添加提交 feedback 到 server 的功能&lt;br&gt;之前已经实现了添加 feedback 并保存在 client 的功能&lt;br&gt;现在只需要利用&lt;code&gt;$resource&lt;/code&gt;的&lt;code&gt;$sav
    
    </summary>
    
      <category term="AngularJS" scheme="http://answerrrrrrrrr.io/categories/AngularJS/"/>
    
    
      <category term="Coursera" scheme="http://answerrrrrrrrr.io/tags/Coursera/"/>
    
      <category term="JavaScript" scheme="http://answerrrrrrrrr.io/tags/JavaScript/"/>
    
      <category term="AngularJS" scheme="http://answerrrrrrrrr.io/tags/AngularJS/"/>
    
      <category term="ngResource" scheme="http://answerrrrrrrrr.io/tags/ngResource/"/>
    
  </entry>
  
  <entry>
    <title>brackets-live-preview-gulp</title>
    <link href="http://answerrrrrrrrr.io/2016/07/05/brackets-live-preview-gulp/"/>
    <id>http://answerrrrrrrrr.io/2016/07/05/brackets-live-preview-gulp/</id>
    <published>2016-07-05T10:23:57.000Z</published>
    <updated>2016-07-05T10:56:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习 Coursera 的 AngularJS 课程时尝试使用<code>ng-include</code>添加模板<br>发觉 Brackets 的 Live Preview 在 Chrome 里总是无法正常显示   </p>
<p><a href="http://blog.csdn.net/aitangyong/article/details/43490117" target="_blank" rel="external">这篇博文</a>提到：</p>
<blockquote>
<p>chrome提示很明显：不能跨域访问。通过上面的错误提示，可以看到:使用ng-include指令的时候，会用到AJAX请求XMLHttpRequest。但是我们是直接用浏览器打开的parent.html，并没有通过web容器访问，所以存在跨域访问问题，加载child.html也就失败了。解决办法很简单：将代码部署到tomcat等web容器下，通过http访问即可。</p>
</blockquote>
<p><a href="https://www.coursera.org/learn/angular-js/discussions/weeks/3/threads/rWCY3qGmEeWF6gpqp4BTmQ" target="_blank" rel="external">Coursera Discussions</a> 里也有人提到了这个问题，可以有 3 种解决方式</p>
<h1 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h1><p>之前的课程刚好提到 gulp 可以使用 brower-sync 建立一个 Web 容器来访问项目<br>把<code>Gulpfile.js</code>略作修改之后<code>gulp watch</code>却仍然无法访问   </p>
<p>在 stackoverflow (<a href="http://stackoverflow.com/questions/32171725/chrome-cant-open-localhost3000-with-gulp-browsersync?rq=1" target="_blank" rel="external">1</a>, <a href="http://stackoverflow.com/questions/30233218/browser-sync-is-blocked-by-chrome-csp" target="_blank" rel="external">2</a>) 找到答案，又是 Chrome 的锅，触发了其<code>Content-Security-Policy</code>   </p>
<p>修改端口号即可解决</p>
<h1 id="Brackets-Live-Preview"><a href="#Brackets-Live-Preview" class="headerlink" title="Brackets Live Preview"></a>Brackets Live Preview</h1><p>尝试之后发现，我在预览单个 html 时，使用的是<code>file</code>协议，在 Chrome 里无法跨域访问<br>而使用 Brackets 打开整个项目时，Live Preview 将项目放入了自建的 Web 容器里，使用的是<code>http</code>协议，即可在 Chrome 中正常跨域访问</p>
<h1 id="http-server-or-json-server"><a href="#http-server-or-json-server" class="headerlink" title="http-server or json-server"></a>http-server or json-server</h1><p>使用 node 安装其它小型 Web 容器后放入运行也可解决</p>
<p>大致如此.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天学习 Coursera 的 AngularJS 课程时尝试使用&lt;code&gt;ng-include&lt;/code&gt;添加模板&lt;br&gt;发觉 Brackets 的 Live Preview 在 Chrome 里总是无法正常显示   &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://b
    
    </summary>
    
      <category term="AngularJS" scheme="http://answerrrrrrrrr.io/categories/AngularJS/"/>
    
    
      <category term="Coursera" scheme="http://answerrrrrrrrr.io/tags/Coursera/"/>
    
      <category term="JavaScript" scheme="http://answerrrrrrrrr.io/tags/JavaScript/"/>
    
      <category term="AngularJS" scheme="http://answerrrrrrrrr.io/tags/AngularJS/"/>
    
      <category term="Brackets" scheme="http://answerrrrrrrrr.io/tags/Brackets/"/>
    
      <category term="gulp" scheme="http://answerrrrrrrrr.io/tags/gulp/"/>
    
      <category term="browser-sync" scheme="http://answerrrrrrrrr.io/tags/browser-sync/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap-keyboard-tagIndex</title>
    <link href="http://answerrrrrrrrr.io/2016/06/28/bootstrap-keyboard-tagIndex/"/>
    <id>http://answerrrrrrrrr.io/2016/06/28/bootstrap-keyboard-tagIndex/</id>
    <published>2016-06-28T08:16:57.000Z</published>
    <updated>2016-07-05T10:56:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天在 Coursera 上学习 Bootstrap<br>第四周的作业是把非 JavaScript 实现的 Modal 改成用 JavaScript 实现（<a href="https://www.coursera.org/learn/web-frameworks/peer/jAXUU/assignment-4-detailed-instructions-and-submission）" target="_blank" rel="external">https://www.coursera.org/learn/web-frameworks/peer/jAXUU/assignment-4-detailed-instructions-and-submission）</a>   </p>
<p>按照 <a href="http://getbootstrap.com/javascript/#modals-methods" target="_blank" rel="external">http://getbootstrap.com/javascript/#modals-methods</a> 找到了解决方案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'#reserveButton'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'#reserveModal'</span>).modal(<span class="string">'toggle'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>作业是解决了，但是发现一个小问题：不管我怎么改<code>keyboard</code>属性，都不能用<code>esc</code>关闭<code>modal</code></p>
<p>搜了一下得知：在<code>modal</code>所在<code>div</code>中加入<code>tabindex=&quot;-1&quot;</code>属性即可<br>那么问题又来了…这个<code>tabindex=&quot;-1&quot;</code>是什么鬼…   </p>
<p>搜索加测试了一下之后终于搞清楚了<br><code>tabindex</code>用来帮助键盘党使用<code>tab</code>键定位网页元素，按其值由小到大跳转，默认是 0<br>如果值相等，则按先后顺序跳转</p>
<p>在未加入<code>tabindex=&quot;-1&quot;</code>时，<code>modal</code>和主页中所有元素值都是 0<br>当前键盘的焦点仍然在主页而非<code>modal</code>上，相当于在主页按<code>esc</code>，<code>modal</code>监听不到所以无任何反应<br>加入<code>tabindex=&quot;-1&quot;</code>后，<code>modal</code>的优先级最高，键盘焦点到了<code>modal</code>上，这时再按<code>esc</code>就能正确触发关闭<code>modal</code>事件了</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.163.com/huan12_8/blog/static/1305190902011274739628/" target="_blank" rel="external">http://blog.163.com/huan12_8/blog/static/1305190902011274739628/</a></li>
<li><a href="https://segmentfault.com/q/1010000004954562" target="_blank" rel="external">https://segmentfault.com/q/1010000004954562</a></li>
<li><a href="http://www.w3school.com.cn/tags/att_standard_tabindex.asp" target="_blank" rel="external">http://www.w3school.com.cn/tags/att_standard_tabindex.asp</a></li>
<li><a href="http://www.mamicode.com/info-detail-494399.html" target="_blank" rel="external">http://www.mamicode.com/info-detail-494399.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天在 Coursera 上学习 Bootstrap&lt;br&gt;第四周的作业是把非 JavaScript 实现的 Modal 改成用 JavaScript 实现（&lt;a href=&quot;https://www.coursera.org/learn/web-frameworks/pe
    
    </summary>
    
      <category term="JavaScript" scheme="http://answerrrrrrrrr.io/categories/JavaScript/"/>
    
    
      <category term="Coursera" scheme="http://answerrrrrrrrr.io/tags/Coursera/"/>
    
      <category term="JavaScript" scheme="http://answerrrrrrrrr.io/tags/JavaScript/"/>
    
      <category term="bootstrap" scheme="http://answerrrrrrrrr.io/tags/bootstrap/"/>
    
      <category term="keyboard" scheme="http://answerrrrrrrrr.io/tags/keyboard/"/>
    
      <category term="tagIndex" scheme="http://answerrrrrrrrr.io/tags/tagIndex/"/>
    
  </entry>
  
  <entry>
    <title>Permission denied (publickey)</title>
    <link href="http://answerrrrrrrrr.io/2016/06/16/git-push-error/"/>
    <id>http://answerrrrrrrrr.io/2016/06/16/git-push-error/</id>
    <published>2016-06-16T00:21:06.000Z</published>
    <updated>2016-06-26T06:37:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天把学习 flask 的本地库上传到 github 时报错</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could <span class="keyword">not</span> <span class="built_in">read</span> <span class="built_in">from</span> remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have <span class="keyword">the</span> correct access rights</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">the</span> repository exists.</span><br></pre></td></tr></table></figure>
<p>在 <a href="http://stackoverflow.com/questions/26953071/github-authentication-failed-github-does-not-provide-shell-access" target="_blank" rel="external">stackoverflow</a> 找到解决方案</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git remote set-url origin git@github<span class="selector-class">.com</span>:lut/EvolutionApp<span class="selector-class">.git</span></span><br><span class="line">git remote show origin</span><br></pre></td></tr></table></figure>
<p>简单记录一下…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天把学习 flask 的本地库上传到 github 时报错&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git pus
    
    </summary>
    
      <category term="git" scheme="http://answerrrrrrrrr.io/categories/git/"/>
    
    
      <category term="git" scheme="http://answerrrrrrrrr.io/tags/git/"/>
    
      <category term="github" scheme="http://answerrrrrrrrr.io/tags/github/"/>
    
      <category term="ssh" scheme="http://answerrrrrrrrr.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Python-Cookbook-1.09 简化 translate 方法</title>
    <link href="http://answerrrrrrrrr.io/2016/05/25/python-cookbook-translator/"/>
    <id>http://answerrrrrrrrr.io/2016/05/25/python-cookbook-translator/</id>
    <published>2016-05-25T13:46:44.000Z</published>
    <updated>2016-07-06T14:07:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="string-maketrans"><a href="#string-maketrans" class="headerlink" title="string.maketrans"></a>string.maketrans</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Help</span> <span class="keyword">on</span> built-<span class="keyword">in</span> <span class="keyword">function</span> maketrans <span class="keyword">in</span> <span class="keyword">module</span> strop:</span><br><span class="line"></span><br><span class="line">maketrans(...)</span><br><span class="line">    maketrans(frm, <span class="keyword">to</span>) -&gt; <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Return</span> a <span class="keyword">translation</span> <span class="keyword">table</span> (a <span class="keyword">string</span> <span class="keyword">of</span> <span class="number">256</span> <span class="keyword">bytes</span> <span class="keyword">long</span>)</span><br><span class="line">    suitable <span class="keyword">for</span> <span class="keyword">use</span> <span class="keyword">in</span> <span class="keyword">string</span>.<span class="keyword">translate</span>.  The strings frm <span class="keyword">and</span> <span class="keyword">to</span></span><br><span class="line">    must be <span class="keyword">of</span> the same <span class="keyword">length</span>.</span><br><span class="line">(<span class="keyword">END</span>)</span><br></pre></td></tr></table></figure>
<p>生成一个供<code>string.translate</code>使用的 ASCII 表，其中<code>frm</code>中的所有字符都依序被替换成<code>to</code>中字符：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; maketrans('abc', 'fed')</span><br><span class="line">'<span class="tag">\<span class="name">x</span></span>00<span class="tag">\<span class="name">x</span></span>01<span class="tag">\<span class="name">x</span></span>02<span class="tag">\<span class="name">x</span></span>03<span class="tag">\<span class="name">x</span></span>04<span class="tag">\<span class="name">x</span></span>05<span class="tag">\<span class="name">x</span></span>06<span class="tag">\<span class="name">x</span></span>07<span class="tag">\<span class="name">x</span></span>08<span class="tag">\<span class="name">t</span></span><span class="tag">\<span class="name">n</span></span><span class="tag">\<span class="name">x</span></span>0b<span class="tag">\<span class="name">x</span></span>0c<span class="tag">\<span class="name">r</span></span><span class="tag">\<span class="name">x</span></span>0e<span class="tag">\<span class="name">x</span></span>0f<span class="tag">\<span class="name">x</span></span>10<span class="tag">\<span class="name">x</span></span>11<span class="tag">\<span class="name">x</span></span>12<span class="tag">\<span class="name">x</span></span>13<span class="tag">\<span class="name">x</span></span>14<span class="tag">\<span class="name">x</span></span>15<span class="tag">\<span class="name">x</span></span>16<span class="tag">\<span class="name">x</span></span>17<span class="tag">\<span class="name">x</span></span>18<span class="tag">\<span class="name">x</span></span>19<span class="tag">\<span class="name">x</span></span>1a<span class="tag">\<span class="name">x</span></span>1b<span class="tag">\<span class="name">x</span></span>1c<span class="tag">\<span class="name">x</span></span>1d<span class="tag">\<span class="name">x</span></span>1e<span class="tag">\<span class="name">x</span></span>1f !"#<span class="formula">$%&amp;<span class="tag">\<span class="name">'</span></span>()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[<span class="tag">\<span class="name">\</span></span>]^_`feddefghijklmnopqrstuvwxyz&#123;|&#125;~<span class="tag">\<span class="name">x</span></span>7f<span class="tag">\<span class="name">x</span></span>80<span class="tag">\<span class="name">x</span></span>81<span class="tag">\<span class="name">x</span></span>82<span class="tag">\<span class="name">x</span></span>83<span class="tag">\<span class="name">x</span></span>84<span class="tag">\<span class="name">x</span></span>85<span class="tag">\<span class="name">x</span></span>86<span class="tag">\<span class="name">x</span></span>87<span class="tag">\<span class="name">x</span></span>88<span class="tag">\<span class="name">x</span></span>89<span class="tag">\<span class="name">x</span></span>8a<span class="tag">\<span class="name">x</span></span>8b<span class="tag">\<span class="name">x</span></span>8c<span class="tag">\<span class="name">x</span></span>8d<span class="tag">\<span class="name">x</span></span>8e<span class="tag">\<span class="name">x</span></span>8f<span class="tag">\<span class="name">x</span></span>90<span class="tag">\<span class="name">x</span></span>91<span class="tag">\<span class="name">x</span></span>92<span class="tag">\<span class="name">x</span></span>93<span class="tag">\<span class="name">x</span></span>94<span class="tag">\<span class="name">x</span></span>95<span class="tag">\<span class="name">x</span></span>96<span class="tag">\<span class="name">x</span></span>97<span class="tag">\<span class="name">x</span></span>98<span class="tag">\<span class="name">x</span></span>99<span class="tag">\<span class="name">x</span></span>9a<span class="tag">\<span class="name">x</span></span>9b<span class="tag">\<span class="name">x</span></span>9c<span class="tag">\<span class="name">x</span></span>9d<span class="tag">\<span class="name">x</span></span>9e<span class="tag">\<span class="name">x</span></span>9f<span class="tag">\<span class="name">xa</span></span>0<span class="tag">\<span class="name">xa</span></span>1<span class="tag">\<span class="name">xa</span></span>2<span class="tag">\<span class="name">xa</span></span>3<span class="tag">\<span class="name">xa</span></span>4<span class="tag">\<span class="name">xa</span></span>5<span class="tag">\<span class="name">xa</span></span>6<span class="tag">\<span class="name">xa</span></span>7<span class="tag">\<span class="name">xa</span></span>8<span class="tag">\<span class="name">xa</span></span>9<span class="tag">\<span class="name">xaa</span></span><span class="tag">\<span class="name">xab</span></span><span class="tag">\<span class="name">xac</span></span><span class="tag">\<span class="name">xad</span></span><span class="tag">\<span class="name">xae</span></span><span class="tag">\<span class="name">xaf</span></span><span class="tag">\<span class="name">xb</span></span>0<span class="tag">\<span class="name">xb</span></span>1<span class="tag">\<span class="name">xb</span></span>2<span class="tag">\<span class="name">xb</span></span>3<span class="tag">\<span class="name">xb</span></span>4<span class="tag">\<span class="name">xb</span></span>5<span class="tag">\<span class="name">xb</span></span>6<span class="tag">\<span class="name">xb</span></span>7<span class="tag">\<span class="name">xb</span></span>8<span class="tag">\<span class="name">xb</span></span>9<span class="tag">\<span class="name">xba</span></span><span class="tag">\<span class="name">xbb</span></span><span class="tag">\<span class="name">xbc</span></span><span class="tag">\<span class="name">xbd</span></span><span class="tag">\<span class="name">xbe</span></span><span class="tag">\<span class="name">xbf</span></span><span class="tag">\<span class="name">xc</span></span>0<span class="tag">\<span class="name">xc</span></span>1<span class="tag">\<span class="name">xc</span></span>2<span class="tag">\<span class="name">xc</span></span>3<span class="tag">\<span class="name">xc</span></span>4<span class="tag">\<span class="name">xc</span></span>5<span class="tag">\<span class="name">xc</span></span>6<span class="tag">\<span class="name">xc</span></span>7<span class="tag">\<span class="name">xc</span></span>8<span class="tag">\<span class="name">xc</span></span>9<span class="tag">\<span class="name">xca</span></span><span class="tag">\<span class="name">xcb</span></span><span class="tag">\<span class="name">xcc</span></span><span class="tag">\<span class="name">xcd</span></span><span class="tag">\<span class="name">xce</span></span><span class="tag">\<span class="name">xcf</span></span><span class="tag">\<span class="name">xd</span></span>0<span class="tag">\<span class="name">xd</span></span>1<span class="tag">\<span class="name">xd</span></span>2<span class="tag">\<span class="name">xd</span></span>3<span class="tag">\<span class="name">xd</span></span>4<span class="tag">\<span class="name">xd</span></span>5<span class="tag">\<span class="name">xd</span></span>6<span class="tag">\<span class="name">xd</span></span>7<span class="tag">\<span class="name">xd</span></span>8<span class="tag">\<span class="name">xd</span></span>9<span class="tag">\<span class="name">xda</span></span><span class="tag">\<span class="name">xdb</span></span><span class="tag">\<span class="name">xdc</span></span><span class="tag">\<span class="name">xdd</span></span><span class="tag">\<span class="name">xde</span></span><span class="tag">\<span class="name">xdf</span></span><span class="tag">\<span class="name">xe</span></span>0<span class="tag">\<span class="name">xe</span></span>1<span class="tag">\<span class="name">xe</span></span>2<span class="tag">\<span class="name">xe</span></span>3<span class="tag">\<span class="name">xe</span></span>4<span class="tag">\<span class="name">xe</span></span>5<span class="tag">\<span class="name">xe</span></span>6<span class="tag">\<span class="name">xe</span></span>7<span class="tag">\<span class="name">xe</span></span>8<span class="tag">\<span class="name">xe</span></span>9<span class="tag">\<span class="name">xea</span></span><span class="tag">\<span class="name">xeb</span></span><span class="tag">\<span class="name">xec</span></span><span class="tag">\<span class="name">xed</span></span><span class="tag">\<span class="name">xee</span></span><span class="tag">\<span class="name">xef</span></span><span class="tag">\<span class="name">xf</span></span>0<span class="tag">\<span class="name">xf</span></span>1<span class="tag">\<span class="name">xf</span></span>2<span class="tag">\<span class="name">xf</span></span>3<span class="tag">\<span class="name">xf</span></span>4<span class="tag">\<span class="name">xf</span></span>5<span class="tag">\<span class="name">xf</span></span>6<span class="tag">\<span class="name">xf</span></span>7<span class="tag">\<span class="name">xf</span></span>8<span class="tag">\<span class="name">xf</span></span>9<span class="tag">\<span class="name">xfa</span></span><span class="tag">\<span class="name">xfb</span></span><span class="tag">\<span class="name">xfc</span></span><span class="tag">\<span class="name">xfd</span></span><span class="tag">\<span class="name">xfe</span></span><span class="tag">\<span class="name">xff</span></span>'</span><br><span class="line">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="string-translate"><a href="#string-translate" class="headerlink" title="string.translate"></a>string.translate</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Help</span> <span class="keyword">on</span> <span class="keyword">function</span> <span class="keyword">translate</span> <span class="keyword">in</span> <span class="keyword">module</span> <span class="keyword">string</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">translate</span>(s, <span class="keyword">table</span>, deletions=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">translate</span>(s,<span class="keyword">table</span> [,deletions]) -&gt; <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Return</span> a copy <span class="keyword">of</span> the <span class="keyword">string</span> s, <span class="keyword">where</span> all <span class="keyword">characters</span> occurring</span><br><span class="line">    <span class="keyword">in</span> the optional argument deletions <span class="keyword">are</span> removed, <span class="keyword">and</span> the</span><br><span class="line">    remaining <span class="keyword">characters</span> have been mapped <span class="keyword">through</span> the given</span><br><span class="line">    <span class="keyword">translation</span> <span class="keyword">table</span>, which must be a <span class="keyword">string</span> <span class="keyword">of</span> <span class="keyword">length</span> <span class="number">256.</span>  The</span><br><span class="line">    deletions argument <span class="keyword">is</span> <span class="keyword">not</span> allowed <span class="keyword">for</span> <span class="keyword">Unicode</span> strings.</span><br><span class="line">(<span class="keyword">END</span>)</span><br></pre></td></tr></table></figure>
<p>(也可以<code>s.translate(table, deletions=&#39;&#39;)</code>为格式）</p>
<p>以<code>maketrans</code>生成的映射表为基准进行字符转换：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; translate(<span class="string">'abcdef'</span>, a)</span><br><span class="line"><span class="string">'feddef'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; translate(<span class="string">'abcdef'</span>, a, <span class="string">'d'</span>)</span><br><span class="line"><span class="string">'fedef'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; translate(<span class="string">'abcdef'</span>, a, <span class="string">'dd'</span>)</span><br><span class="line"><span class="string">'fedef'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; translate(<span class="string">'abcdef'</span>, a, <span class="string">'de'</span>)</span><br><span class="line"><span class="string">'fedf'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; translate(<span class="string">'abcdef'</span>, a, <span class="string">'ade'</span>)</span><br><span class="line"><span class="string">'edf'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure>
<h1 id="自建一个返回闭包的工厂函数-translator"><a href="#自建一个返回闭包的工厂函数-translator" class="headerlink" title="自建一个返回闭包的工厂函数 translator"></a>自建一个返回闭包的工厂函数 translator</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">translator</span><span class="params">(frm=<span class="string">''</span>, to=<span class="string">''</span>, delete=<span class="string">''</span>, keep=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(to) == <span class="number">1</span>:</span><br><span class="line">        to = to * len(frm)</span><br><span class="line">    trans = string.maketrans(frm, to)</span><br><span class="line">    <span class="keyword">if</span> keep <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        allchars = string.maketrans(<span class="string">''</span>, <span class="string">''</span>)</span><br><span class="line">        delete = allchars.translate(allchars, keep.translate(allchars, delete))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">translate</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> s.translate(trans, delete)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> translate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    digits_only = translator(keep=string.digits)</span><br><span class="line">    <span class="keyword">print</span> digits_only(<span class="string">'qwedwefaf24215'</span>)</span><br><span class="line"></span><br><span class="line">    no_digits = translator(delete=string.digits)</span><br><span class="line">    <span class="keyword">print</span> no_digits(<span class="string">'qwedwefaf24215'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;string-maketrans&quot;&gt;&lt;a href=&quot;#string-maketrans&quot; class=&quot;headerlink&quot; title=&quot;string.maketrans&quot;&gt;&lt;/a&gt;string.maketrans&lt;/h1&gt;&lt;figure class=&quot;hi
    
    </summary>
    
      <category term="Python" scheme="http://answerrrrrrrrr.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://answerrrrrrrrr.io/tags/Python/"/>
    
      <category term="cookbook" scheme="http://answerrrrrrrrr.io/tags/cookbook/"/>
    
      <category term="closure" scheme="http://answerrrrrrrrr.io/tags/closure/"/>
    
      <category term="factory" scheme="http://answerrrrrrrrr.io/tags/factory/"/>
    
      <category term="string" scheme="http://answerrrrrrrrr.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Python-sorted函数中key的用法</title>
    <link href="http://answerrrrrrrrr.io/2016/05/19/Python-sorted%E5%87%BD%E6%95%B0%E4%B8%ADkey%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://answerrrrrrrrr.io/2016/05/19/Python-sorted函数中key的用法/</id>
    <published>2016-05-19T01:02:08.000Z</published>
    <updated>2016-07-09T09:56:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>sorted函数的可用参数如下</p>
<blockquote>
<p>sorted(iterable[, cmp[, key[, reverse]]])</p>
</blockquote>
<p>其它几个还好理解，就是<code>key</code>的用法经常会忘记，所以记录一下备用</p>
<p><a href="http://devdocs.io/python~2.7/library/functions#sorted" target="_blank" rel="external">文档</a>中说：</p>
<blockquote>
<p>key specifies a function of one argument that is used to extract a comparison key from each list element: key=str.lower. The default value is None (compare the elements directly).</p>
</blockquote>
<p>我的理解是<br><code>key</code>提供了一个函数，以<code>iterable</code>对象中的元素为唯一参数，返回一个与原元素一一对应的 key 值<br>然后再对以这些 key 值为元素的<code>iterable</code>进行排序<br>最后将这些 key 值替换回对应的原元素<br>排序完成</p>
<p>需要注意的就是<code>False &lt; True</code></p>
<p>然后是实例（参考<a href="https://segmentfault.com/q/1010000005111826/a-1020000005112829）" target="_blank" rel="external">https://segmentfault.com/q/1010000005111826/a-1020000005112829）</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'aB23'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sorted_with_key</span><span class="params">(s, key)</span>:</span></span><br><span class="line">    s = sorted(s, key=key)</span><br><span class="line">    <span class="keyword">print</span> s</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'keys: '</span>,</span><br><span class="line">    <span class="keyword">print</span> [key(x) <span class="keyword">for</span> x <span class="keyword">in</span> s]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\nstr.lower'</span></span><br><span class="line">sorted_with_key(s, str.lower)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\nstr.islower'</span></span><br><span class="line">sorted_with_key(s, str.islower)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\nlambda x: x.isdigit() and int(x) % 2 == 0'</span></span><br><span class="line">sorted_with_key(s, <span class="keyword">lambda</span> x: x.isdigit() <span class="keyword">and</span> int(x) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\nlambda x: x.isdigit(), x.isdigit() and int(x) % 2==0, x.isupper(), x.islower(), x'</span></span><br><span class="line"><span class="comment"># 排序:小写-大写-奇数-偶数</span></span><br><span class="line">sorted_with_key(s, <span class="keyword">lambda</span> x: (x.isdigit(), x.isdigit() <span class="keyword">and</span> int(x) %</span><br><span class="line">                              <span class="number">2</span> == <span class="number">0</span>, x.isupper(), x.islower(), x))</span><br></pre></td></tr></table></figure>
<p>output</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">str.lower</span><br><span class="line">[<span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'a'</span>, <span class="string">'B'</span>]</span><br><span class="line">keys:  [<span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line"></span><br><span class="line">str.islower</span><br><span class="line">[<span class="string">'B'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'a'</span>]</span><br><span class="line">keys:  [<span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">lambda</span> x: x.isdigit() <span class="keyword">and</span> int(x) % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'B'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>]</span><br><span class="line">keys:  [<span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">lambda</span> x: (x.isdigit(), x.isdigit() <span class="keyword">and</span> int(x) % <span class="number">2</span>==<span class="number">0</span>, x.isupper(), x.islower(), x)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'B'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>]</span><br><span class="line">keys:  [(<span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">True</span>, <span class="string">'a'</span>), (<span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="string">'B'</span>), (<span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="string">'3'</span>), (<span class="keyword">True</span>, <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="string">'2'</span>)]</span><br></pre></td></tr></table></figure>
<h1 id="2016-7-9-补充"><a href="#2016-7-9-补充" class="headerlink" title="2016.7.9 补充"></a>2016.7.9 补充</h1><p>今天看了 cookbook 5.2，Python 2.4 之前是不支持<code>key</code>的，书中提供了一个类似的思路，感觉对理解<code>key</code>的实现很有帮助，摘录如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">case_insensitive_sorted</span><span class="params">(string_list)</span>:</span></span><br><span class="line">    auxiliary_list = [(x.lower(), x) <span class="keyword">for</span> x <span class="keyword">in</span> string_list] <span class="comment"># decorate</span></span><br><span class="line">    auxiliary_list.sort()                                  <span class="comment"># sort</span></span><br><span class="line">    <span class="keyword">return</span> [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> auxiliary_list]                  <span class="comment"># undecorate</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sorted函数的可用参数如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sorted(iterable[, cmp[, key[, reverse]]])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其它几个还好理解，就是&lt;code&gt;key&lt;/code&gt;的用法经常会忘记，所以
    
    </summary>
    
      <category term="Python" scheme="http://answerrrrrrrrr.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://answerrrrrrrrr.io/tags/Python/"/>
    
      <category term="sorted" scheme="http://answerrrrrrrrr.io/tags/sorted/"/>
    
      <category term="key" scheme="http://answerrrrrrrrr.io/tags/key/"/>
    
  </entry>
  
</feed>
